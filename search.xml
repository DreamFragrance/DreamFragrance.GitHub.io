<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo使用自定义的CSS和JS</title>
    <url>/2021/08/26/Hexo%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84CSS%E5%92%8CJS/</url>
    <content><![CDATA[<h2 id="Hexo的执行逻辑"><a href="#Hexo的执行逻辑" class="headerlink" title="Hexo的执行逻辑"></a>Hexo的执行逻辑</h2><p>Hexo是根据用户写的md文件进行渲染，得到对应的html文件在网站上显示。但有的时候会需要自定义页面，当然Hexo也给我们预留了解决方案。</p>
<p>这里我要实现的效果就是新建一个游戏标签页，效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<p><br></p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>首先，要新建一个标签页面就需要在NexT的配置文件中添加标签以及对应路由。</p>
<p>其中<code>fa fa-gamepad</code>是<a href="http://www.fontawesome.com.cn">Font Awesome</a>提供的矢量图标。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  game: /game/ || fa fa-gamepad</span><br></pre></td></tr></tbody></table></figure>
<p>如果不想要英文的标签的话，以中文举例，可以到<code>themes/next/languages/zh-CN.yml</code>下添加game对应的中文。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br><span class="line">  game: 游戏</span><br></pre></td></tr></tbody></table></figure>
<p>然后使用git命令<code>hexo new page game</code>，创建/game对应md文件。</p>
<p>注：如需更改一些全局样式，可到Next配置文件的<code>custom_file_path</code>中修改</p>
<span id="more"></span>
<p><br></p>
<h2 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h2><p>自定义渲染分为两种，一种是主题内渲染，一种是完全页面渲染。</p>
<h4 id="1-主题内渲染"><a href="#1-主题内渲染" class="headerlink" title="1.主题内渲染"></a>1.主题内渲染</h4><p><code>layout: false</code>表示该md不会经过layout的渲染。</p>
<p>同时可以保存添加的模块，主题的头部信息，仅对主体部分进行自定义。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">title: game</span><br><span class="line">date: 2021-08-26 15:45:42</span><br><span class="line">layout: false</span><br></pre></td></tr></tbody></table></figure>
<p>这里头部的导航栏以及侧边的统计栏都是保存的。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<h4 id="2-完全页面渲染"><a href="#2-完全页面渲染" class="headerlink" title="2.完全页面渲染"></a>2.完全页面渲染</h4><p>在Hexo的配置文件中，<code>skip_render</code>用来配置跳过渲染的文件。</p>
<p>例：<code>skip_render: game/*</code>，指game/下的文件不会被渲染。</p>
<p>若是<code>game/**</code>则代表目录递归，包含子目录中的文件。</p>
<p>或是指定某个文件：<code>game/index.md</code></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># Directory</span></span><br><span class="line">source<span class="emphasis">_dir: source</span></span><br><span class="line"><span class="emphasis">public_</span>dir: public</span><br><span class="line">tag<span class="emphasis">_dir: tags</span></span><br><span class="line"><span class="emphasis">archive_</span>dir: archives</span><br><span class="line">category<span class="emphasis">_dir: categories</span></span><br><span class="line"><span class="emphasis">code_</span>dir: downloads/code</span><br><span class="line">i18n<span class="emphasis">_dir: :lang</span></span><br><span class="line"><span class="emphasis">skip_</span>render: game/<span class="emphasis">*</span></span><br></pre></td></tr></tbody></table></figure>
<p>完全页面渲染正如其名，不会包含主题模块等信息，全权由自己来设计。</p>
<p>这里我还没有添加CSS和JS。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1fQ1.png" alt="example2"></p>
<p><br></p>
<h2 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h2><p>主题内渲染由于头部信息是主题给定的，因此CSS不能直接使用html的<code>&lt;style&gt;</code>导入CSS，JS同理。</p>
<p>所以需要直接给NexT添加我们需要的CSS文件。</p>
<p>在<code>themes/next/source/css</code>中，首先创建CSS文件的目录，为了与主题自带的CSS区分开，我们新建一个文件夹<code>_mycss</code>，然后创建<code>game.styl</code>，代码如下。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">.game_img *,.game_img *:after,.game_img *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }</span><br><span class="line">body .game_img, html .game_img { font-size: 100%; padding: 0; margin: 0;}</span><br><span class="line">body .game_img{</span><br><span class="line">	font-family: 'Lato', Calibri, Arial, sans-serif;</span><br><span class="line">	color: #b3b9bf;</span><br><span class="line">	background: #f9f9f9;</span><br><span class="line">}</span><br><span class="line">.game_img a {</span><br><span class="line">	color: #888;</span><br><span class="line">	text-decoration: none;</span><br><span class="line">}</span><br><span class="line">.game_img a:hover,.game_img a:active {</span><br><span class="line">	color: #333;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">	padding: 20px 20px 100px 20px;</span><br><span class="line">	max-width: 1300px;</span><br><span class="line">	margin: 0 auto;</span><br><span class="line">	list-style: none;</span><br><span class="line">	text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid li {</span><br><span class="line">	display: inline-block;</span><br><span class="line">	width: 350px;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure {</span><br><span class="line">	margin: 0;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure img {</span><br><span class="line">	max-width: 100%;</span><br><span class="line">	display: block;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption {</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 0;</span><br><span class="line">	left: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	background: #2c3f52;</span><br><span class="line">	color: #ed4e6e;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption h3 {</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption span:before {</span><br><span class="line">	content: 'by ';</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption a {</span><br><span class="line">	text-align: center;</span><br><span class="line">	padding: 5px 10px;</span><br><span class="line">	border-radius: 2px;</span><br><span class="line">	display: inline-block;</span><br><span class="line">	background: #ed4e6e;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">/* 说明文字样式 1 */</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption {</span><br><span class="line">	height: 100%;</span><br><span class="line">	width: 100%;</span><br><span class="line">	opacity: 0;</span><br><span class="line">	text-align: center;</span><br><span class="line">	-webkit-backface-visibility: hidden;</span><br><span class="line">	-moz-backface-visibility: hidden;</span><br><span class="line">	backface-visibility: hidden;</span><br><span class="line">	-webkit-transition: -webkit-transform 0.3s, opacity 0.3s;</span><br><span class="line">	-moz-transition: -moz-transform 0.3s, opacity 0.3s;</span><br><span class="line">	transition: transform 0.3s, opacity 0.3s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.no-touch .cs-style-1 figure:hover figcaption,</span><br><span class="line">.cs-style-1 figure.cs-hover figcaption {</span><br><span class="line">	opacity: 1;</span><br><span class="line">	-webkit-transform: translate(15px, 15px);</span><br><span class="line">	-moz-transform: translate(15px, 15px);</span><br><span class="line">	-ms-transform: translate(15px, 15px);</span><br><span class="line">	transform: translate(15px, 15px);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption h3 {</span><br><span class="line">	margin-top: 35px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption span {</span><br><span class="line">	display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption a {</span><br><span class="line">	margin-top: 20px;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>
<p>然后返回上一级目录，现在在<code>themes/next/source/css</code>中，打开<code>main.styl</code>在尾部添加如下代码，将我们的CSS导入进来就好了！</p>
<p>一定要加注释！不然过几天都不知道这一段CSS是干什么用的。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">//Games</span><br><span class="line">@import "<span class="emphasis">_mycss/game";</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="自定义JS"><a href="#自定义JS" class="headerlink" title="自定义JS"></a>自定义JS</h2><p>同CSS一样，来到<code>themes/next/source/js</code>下，先创建一个我们自己的JS文件夹<code>game</code>，然后将我们预先下载好的<code>modernizr.custom.js</code>放在该目录下，准备工作就完毕了。</p>
<p>然后就需要导入JS文件，我们打开<code>themes/next/layout/_layout.swig</code>，在<code>&lt;head&gt;</code>标签下，添加JS路径，就大功告成了！</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/game/modernizr.custom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><p>最后附上我的HTML代码，目前只有一个框架，游戏还没有写<span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"game_img"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"grid cs-style-1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0002——两数相加</title>
    <url>/2021/08/31/LeetCodeP0002%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/02/hDEmrR.jpg" alt="example"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<p><br></p>
<h3 id="题解1-分三类讨论"><a href="#题解1-分三类讨论" class="headerlink" title="题解1: 分三类讨论"></a>题解1: 分三类讨论</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = pre;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> x = l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            <span class="keyword">int</span> y = l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            <span class="keyword">int</span> sum = x + y + carry;</span><br><span class="line">            </span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line"></span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>)</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>)</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>) {</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>分三种情况讨论</p>
<p>(1)  l1 != null;</p>
<p>(2)  l2 != null;</p>
<p>(3)  l1 != null &amp;&amp; l2 != null</p>
<p>注：链表长度不够值按0处理</p>
<p><br></p>
<p>用时：2ms</p>
<p>假定两个链表长度为m，n</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0003——无重复字符的最长子串</title>
    <url>/2021/08/31/LeetCodeP0003%E2%80%94%E2%80%94%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是&nbsp;"wke"，所以其长度为 3。</span><br><span class="line">&nbsp;    请注意，你的答案必须是 子串 的长度，"pwke"&nbsp;是一个子序列，不是子串。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = <span class="string">""</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p><br></p>
<h3 id="题解1-滑动窗口"><a href="#题解1-滑动窗口" class="headerlink" title="题解1: 滑动窗口"></a>题解1: 滑动窗口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] ascll = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;s.length();j++){</span><br><span class="line">            <span class="comment">// i不能往回退，例：“abba”</span></span><br><span class="line">            i = Math.max(i, ascll[s.charAt(j)]);</span><br><span class="line">            maxLen = Math.max(maxLen, j-i+<span class="number">1</span>);</span><br><span class="line">            ascll[s.charAt(j)] = j+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：2ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
<h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p>初始时，i和j双指针都指向下标0。另外还有一个ASCII（size = 128）的表来存储每个字符在遍历字符串过程中出现的位置再+1。<img src="https://z3.ax1x.com/2021/09/01/h0A7D0.jpg" alt="img1"></p>
<p>大题的遍历思路：i不动，j来遍历字符串，maxLen=j - i +1，当j指向的字符有重复时，将i移到该重复字符此前出现位置的后面一个位置，因此在ASCII中存储的是每个字符出现的后一个位置，然后将ASCII表更新。</p>
<p>下图是j=3时，这时j指向的a和i指向的a重复了，需要将i移到此前出现a的后一个位置，查看ASCII表，将a移到1处，更新ASCII表中a的位置。</p>
<p><img src="https://z3.ax1x.com/2021/09/01/h0AHbV.jpg" alt="h0AHbV.jpg"></p>
<p><img src="https://z3.ax1x.com/2021/09/01/h0ATuq.jpg" alt="h0ATuq.jpg"></p>
<p><br></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0001——两数之和</title>
    <url>/2021/08/31/LeetCodeP0001%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <code>target</code>  的那 两个 <strong>整数</strong>，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>2 &lt;= nums.length &lt;= 104</li>
<li>-109 &lt;= nums[i] &lt;= 109</li>
<li>-109 &lt;= target &lt;= 109</li>
<li>只会存在一个有效答案</li>
</ul>
<p><br></p>
<h3 id="题解1-暴力搜索"><a href="#题解1-暴力搜索" class="headerlink" title="题解1: 暴力搜索"></a>题解1: 暴力搜索</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++){</span><br><span class="line">                sum = nums[i] + nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum == target){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{i,j};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：50ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（1）</p>
<p><br></p>
<h3 id="题解2-哈希查找"><a href="#题解2-哈希查找" class="headerlink" title="题解2: 哈希查找"></a>题解2: 哈希查找</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">       Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">    	   <span class="keyword">int</span> rest = target - nums[i];</span><br><span class="line">    	   <span class="keyword">if</span>(map.containsKey(rest)){</span><br><span class="line">    		   <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{i,map.get(rest)};</span><br><span class="line">    	   }</span><br><span class="line">    	   map.put(nums[i], i);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：2ms</p>
<p>这里将哈希查找的时间复杂度近似成O（1）</p>
<p>时间复杂度：O（$n$）</p>
<p>空间复杂度：S（$n$）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>哈希查找</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0004——寻找两个正序数组的中位数</title>
    <url>/2021/09/01/LeetCodeP0004%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [0,0], nums2 = [0,0]</span><br><span class="line">输出：0.00000</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [], nums2 = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1.00000</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>nums1.length == m</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m &lt;= 1000</code></li>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>1 &lt;= m + n &lt;= 2000</code></li>
<li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
<p><br></p>
<h3 id="题解1-类似归并排序"><a href="#题解1-类似归并排序" class="headerlink" title="题解1: 类似归并排序"></a>题解1: 类似归并排序</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> len = len1 + len2;</span><br><span class="line">        <span class="keyword">int</span> mid = len / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=mid;k++){</span><br><span class="line">            left = right;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len1 &amp;&amp; (j &gt;= len2 || nums1[i] &lt;= nums2[j])){</span><br><span class="line">                right = nums1[i++];</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                right = nums2[j++];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>类似归并排序的思想，但不用开辟新的空间，只移动指针来寻找中位数。</p>
<p>需要将长度为奇数和偶数时，中位数的情况合并。</p>
<p>这里我们设置mid = len / 2，当长度为奇数时，返回第mid个数就行；当长度为偶数时，返回第mid-1和第mid个数取平均就行。</p>
<p>为此我们需要left和right，left保存上一个数，right保存下一个数。</p>
<p>关于分类讨论，这里只有两种结果：移动nums1的指针和移动nums2的指针。</p>
<p>所以只需要把移动nums1的指针的情况写完整了，另一个情况用else即可。</p>
<p><br></p>
<p>用时：2ms</p>
<p>假定两个数组长度为m，n</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（1）</p>
<p><br></p>
<h3 id="题解2-二分查找"><a href="#题解2-二分查找" class="headerlink" title="题解2: 二分查找"></a>题解2: 二分查找</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> len = len1 + len2;</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> (findNum(nums1,nums2,len/<span class="number">2</span>+<span class="number">1</span>) + findNum(nums1,nums2,len/<span class="number">2</span>))/<span class="number">2</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> findNum(nums1,nums2,len/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findNum</span><span class="params">(<span class="keyword">int</span>[] nums1,<span class="keyword">int</span>[] nums2, <span class="keyword">int</span> idx)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> offset_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> offset_2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> half = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">            <span class="keyword">if</span>(offset_2 &gt;= len2){</span><br><span class="line">                <span class="keyword">return</span> nums1[offset_1+idx-<span class="number">1</span>];</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span> (offset_1 &gt;= len1){</span><br><span class="line">                <span class="keyword">return</span> nums2[offset_2+idx-<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            half = idx / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> index1 = Math.min(offset_1 + half - <span class="number">1</span>, len1-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> index2 = Math.min(offset_2 + half - <span class="number">1</span>, len2-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(idx == <span class="number">1</span>){</span><br><span class="line">                <span class="keyword">return</span> Math.min(nums1[offset_1],nums2[offset_2]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(nums1[index1] &gt; nums2[index2]){</span><br><span class="line">                idx -= index2 - offset_2 + <span class="number">1</span>;</span><br><span class="line">                offset_2 += half;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                idx -= index1 - offset_1 + <span class="number">1</span>;</span><br><span class="line">                offset_1 += half;</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果需要找到第n大的数字，那么只需要比较两个数组的第n/2个数，把较小的那个数和它前面的n/2-1个数全部排除，设置偏置值offset=n/2。然后n = n/2。之后再除以2，比较两个数组的第n/2个数，这里有个数组要从偏置值开始第n/2个数。</p>
<p>除此之外还要考虑n/2大于数组长度的情况，因此每一次的偏置值不一定是n/2，可能到数组末尾就停止了。</p>
<p>用时：2ms</p>
<p>时间复杂度：O（log(m + n)）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0005——最长回文子串</title>
    <url>/2021/09/02/LeetCodeP0005%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "babad"</span><br><span class="line">输出："bab"</span><br><span class="line">解释："aba" 同样是符合题意的答案。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "cbbd"</span><br><span class="line">输出："bb"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "a"</span><br><span class="line">输出："a"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 字符串转换为char数组查找快！</span></span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len-i+<span class="number">1</span>;j++){</span><br><span class="line">                <span class="keyword">int</span> end = i + j - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(charArray[j] == charArray[end]){</span><br><span class="line">                    <span class="keyword">if</span>(i &lt;= <span class="number">3</span>){</span><br><span class="line">                        dp[j][end] = <span class="keyword">true</span>;</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        dp[j][end] = dp[j+<span class="number">1</span>][end-<span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(dp[j][end] &amp;&amp; maxLen &lt; i){</span><br><span class="line">                    begin = j;</span><br><span class="line">                    maxLen = i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin,begin+maxLen);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>字符串遍历频繁的时候，可以先转换为char数组便于查找，因为<code>charAt</code>方法多了一层栈的深度（需要进出对象）。</p>
<p>思路：如果一个字符串是回文字符串，那么它去掉头和尾也仍旧是回文字符串，也就可以得出动态规划的状态转移方程。</p>
<p>P[i, j] = P[i+1, j-1] &amp;&amp; charArray[i] == charArray[j]</p>
<p>然后对于长度为1的字符串，本身就是回文字符串。对于长度为2的字符串，只要头和尾相同就是回文字符串。因此我们就可以写出动态规划的边界条件。</p>
<p>P[i, i] = true</p>
<p>P[i, i+1] = true &amp;&amp; charArray[i] == charArray[i+1]</p>
<p><br></p>
<p>用时：124ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$n^2$）</p>
<p><br></p>
<h3 id="题解2-中心扩散法"><a href="#题解2-中心扩散法" class="headerlink" title="题解2: 中心扩散法"></a>题解2: 中心扩散法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">int</span> len1 = getPalindromeLen(charArray, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = getPalindromeLen(charArray, i, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> max = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span>(max &gt; maxLen){</span><br><span class="line">                maxLen = max;</span><br><span class="line">                begin = i - (maxLen-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin,begin+maxLen);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPalindromeLen</span><span class="params">(<span class="keyword">char</span>[] charArray, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> len = charArray.length;</span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;len &amp;&amp; charArray[left] == charArray[right]){</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>首先，我们先观察动态规划的状态转移方程</p>
<p>P[i, i] = true</p>
<p>P[i, i+1] = S[i] == S[i+1]</p>
<p>P[i, j] = P[i+1, j-1] &amp;&amp; S[i] == S[j]</p>
<p>可以找到其中的状态转移链</p>
<p><em>P</em>(<em>i</em>,<em>j</em>)←<em>P</em>(<em>i</em>+1,<em>j</em>−1)←<em>P</em>(<em>i</em>+2,<em>j</em>−2)←⋯←某一边界情况</p>
<p>也就是说，<strong>所有的状态在转移的时候可能性都是唯一的</strong>，因此我们可以从每一种边界情况开始向外扩散，就能得到所有状态对应的答案。</p>
<p>下面两句代码就对应着两种边界状态。</p>
<p><code>int len1 = getPalindromeLen(charArray, i, i);</code> </p>
<p><code>int len2 = getPalindromeLen(charArray, i, i+1);</code></p>
<p><br></p>
<p>用时：9ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0010——正则表达式匹配</title>
    <url>/2021/09/02/LeetCodeP0010%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a"</span><br><span class="line">输出：false</span><br><span class="line">解释："a" 无法匹配 "aa" 整个字符串。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "" p = "c*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个。因此可以匹配字符串 ""。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= s.length &lt;= 20</code></li>
<li><code>0 &lt;= p.length &lt;= 30</code></li>
<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li>
<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code>。</li>
<li>保证每次出现字符 <code>*</code> 时，前面都匹配到有效的字符</li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = s.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = p.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>[] pc = p.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len1;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2;j++){</span><br><span class="line">                <span class="keyword">if</span>(pc[j-<span class="number">1</span>] == <span class="string">'*'</span>){</span><br><span class="line">                    <span class="keyword">if</span>(match(i,j-<span class="number">1</span>,sc,pc)){</span><br><span class="line">                        dp[i][j] = dp[i][j-<span class="number">2</span>] || dp[i-<span class="number">1</span>][j];</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        dp[i][j] = dp[i][j-<span class="number">2</span>];</span><br><span class="line">                    }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(match(i,j,sc,pc)){</span><br><span class="line">                        dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span>[] sc,<span class="keyword">char</span>[] pc)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(pc[j-<span class="number">1</span>] == <span class="string">'.'</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sc[i-<span class="number">1</span>] == pc[j-<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">如果P[j]等于'*'，当P[j-1]等于S[i]时，有两种方式：</span><br><span class="line"></span><br><span class="line">1. dp[i][j] = dp[i][j-2]，直接将“字符*”这个组合扔掉，*这里取0次。</span><br><span class="line">2. dp[i][j] = dp[i-1][j]，将S[i-1]的字符再复制一个，*这里取1次。</span><br><span class="line"></span><br><span class="line">如果P[j]等于'*'，当P[j-1]不等于S[i]时，dp[i][j] = dp[i][j-2]，也是将该组合扔掉。</span><br><span class="line">如果P[j]不等于'*'，当P[j-1]等于S[i]时，dp[i][j] = dp[i-1][j-1]。</span><br><span class="line"></span><br><span class="line">需要注意的是，由于S和P可以为空字符串，因此dp大小是[len1+1][len2+1]，所以字符串charAt的时候下标要-1。</span><br><span class="line">而且，若S为非空串，而P为空串，则一定匹配不成功。</span><br><span class="line">	 若S为空串，P为非空串，还是有可能匹配成功的，见示例4。</span><br><span class="line">	 </span><br><span class="line">这里唯一的边界条件就是dp[0][0] = true，即两个空串可以匹配成功。</span><br></pre></td></tr></tbody></table></figure>
<p>状态转移方程：</p>
<p><img src="https://z3.ax1x.com/2021/09/02/hscgnf.jpg" alt="state"></p>
<p>用时：1ms</p>
<p>时间复杂度：O（m*n）</p>
<p>空间复杂度：S（m*n）</p>
<p><br></p>
<h3 id="题解2-记忆化递归"><a href="#题解2-记忆化递归" class="headerlink" title="题解2: 记忆化递归"></a>题解2: 记忆化递归</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[][] states;</span><br><span class="line">    <span class="keyword">char</span>[] pc;</span><br><span class="line">    <span class="keyword">char</span>[] sc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = s.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = p.length();</span><br><span class="line">        states = <span class="keyword">new</span> <span class="keyword">int</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        pc = p.toCharArray();</span><br><span class="line">        sc = s.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> dps(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dps</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(j == pc.length){</span><br><span class="line">            <span class="keyword">return</span> i == sc.length;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(states[i][j] != <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> states[i][j] &gt; <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> match = i&lt;sc.length &amp;&amp; (sc[i] == pc[j] || pc[j] == <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">boolean</span> t;</span><br><span class="line">        <span class="keyword">if</span>((j+<span class="number">1</span>)&lt;pc.length &amp;&amp; pc[j+<span class="number">1</span>]==<span class="string">'*'</span>){</span><br><span class="line">            t = dps(i,j+<span class="number">2</span>) ||(match &amp;&amp; dps(i+<span class="number">1</span>,j));</span><br><span class="line">            states[i][j] = t?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        t = match &amp;&amp; dps(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">        states[i][j] = t?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>和动态规划类似，递归也有四种情况，具体写代码时，要注意各个条件的先后顺序，不然很容易打死结。</p>
<p><img src="https://z3.ax1x.com/2021/09/03/hs7KHA.png" alt="img"></p>
<p>用时：1ms</p>
<p>时间复杂度：O（m*n）</p>
<p>空间复杂度：S（m*n）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0011——盛最多水的容器</title>
    <url>/2021/09/05/LeetCodeP0011%E2%80%94%E2%80%94%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，a``n</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p><strong>说明：</strong>你不能倾斜容器。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/05/hRke0g.jpg" alt="example"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [4,3,2,1,4]</span><br><span class="line">输出：16</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>n == height.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= height[i] &lt;= 104</code></li>
</ul>
<p><br></p>
<h3 id="题解1-双指针"><a href="#题解1-双指针" class="headerlink" title="题解1: 双指针"></a>题解1: 双指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right){</span><br><span class="line">            <span class="keyword">int</span> lh = height[left];</span><br><span class="line">            <span class="keyword">int</span> rh = height[right];</span><br><span class="line">            <span class="keyword">if</span>(height[left] &lt;= height[right]){</span><br><span class="line">                max = Math.max(max, lh * (right - left));</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; height[left] &lt;= lh){</span><br><span class="line">                    left++;</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                max = Math.max(max, rh * (right - left));</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; height[right] &lt;= rh){</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>双指针分别指向数组的头和尾，然后移动height较低的指针，移动后的高度若没有移动之前高则不用比较继续移动，直到两个指针重合则遍历结束。</p>
<p>如果移动的是height较高的指针，那之后无论怎么移动（不能向外移动），max值都不可能更高了。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0015——三数之和</title>
    <url>/2021/09/08/LeetCodeP0015%E2%80%94%E2%80%94%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<p><br></p>
<h3 id="题解1-双指针"><a href="#题解1-双指针" class="headerlink" title="题解1: 双指针"></a>题解1: 双指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) {</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">2</span>;i++){</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>] == nums[i]){</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> third = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len-<span class="number">1</span>;j++){</span><br><span class="line">                <span class="keyword">if</span>(j &gt; i+<span class="number">1</span> &amp;&amp; nums[j-<span class="number">1</span>] == nums[j]){</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                target = -nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">while</span>(j &lt; third &amp;&amp; nums[third] &gt; target){</span><br><span class="line">                    third--;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(j == third){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(nums[third] == target){</span><br><span class="line">                    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                    tmp.add(nums[i]);</span><br><span class="line">                    tmp.add(nums[j]);</span><br><span class="line">                    tmp.add(nums[third]);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由于不能有重复的组合，因此我们先将数组进行排序，还是三层循环，如果下一次遍历的值和这一次遍历的值相等就会产生重复的组合，因此需要加以判断。</p>
<p>另外，因为数组是单调递增的，在第一层循环i已经确定时，而第二层循环j在遍历的过程中每次加1，遍历的值也随之递增，所以在第三层循环k中需要逐级递减，也就是从数组末尾开始遍历，直到j和k相等则break。</p>
<p>用时：19ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$log_n$）（排序所需空间）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0017——电话号码的字母组合</title>
    <url>/2021/09/09/LeetCodeP0017%E2%80%94%E2%80%94%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><img src="https://z3.ax1x.com/2021/09/09/hqmRZ8.png" alt="img"></p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = "23"</span><br><span class="line">输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = ""</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = "2"</span><br><span class="line">输出：["a","b","c"]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= digits.length &lt;= 4</code></li>
<li><code>digits[i]</code> 是范围 <code>['2', '9']</code> 的一个数字。</li>
</ul>
<p><br></p>
<h3 id="题解1-回溯法"><a href="#题解1-回溯法" class="headerlink" title="题解1: 回溯法"></a>题解1: 回溯法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;<span class="keyword">char</span>[]&gt; number = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        }</span><br><span class="line">        res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        number = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>});</span><br><span class="line">        <span class="keyword">char</span>[] digitsArray = digits.toCharArray();</span><br><span class="line">        dps(digitsArray, <span class="keyword">new</span> StringBuilder(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dps</span><span class="params">(<span class="keyword">char</span>[] digitsArray, StringBuilder str, <span class="keyword">int</span> count)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(count == digitsArray.length){</span><br><span class="line">            res.add(str.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> num = digitsArray[count] - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = number.get(num - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;chars.length;i++){</span><br><span class="line">            StringBuilder str_copy = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">            str_copy.append(chars[i]);</span><br><span class="line">            dps(digitsArray, str_copy, count + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（$3^m \times 4^n$）</p>
<p>空间复杂度：S（m + n），递归调用层数为（m+n）</p>
<p>其中m是输入中对应3个字母的数字个数（包括数字2、3、4、5、6、8）</p>
<p>​         n是输入中对应4个字母的数字个数（包括数字7、9）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0019——删除链表的倒数第N个节点</title>
    <url>/2021/09/09/LeetCodeP0019%E2%80%94%E2%80%94%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/09/hLJDOg.jpg" alt="img"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<p><br></p>
<h3 id="题解1-链表转数组"><a href="#题解1-链表转数组" class="headerlink" title="题解1: 链表转数组"></a>题解1: 链表转数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        ListNode[] nodes = <span class="keyword">new</span> ListNode[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">int</span> targetNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nodeNums = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++){</span><br><span class="line">            nodes[i] = head;</span><br><span class="line">            <span class="keyword">if</span>(head.next == <span class="keyword">null</span>){</span><br><span class="line">                nodeNums = i + <span class="number">1</span>;</span><br><span class="line">                targetNum = nodeNums - n;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(targetNum == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span>(nodeNums &gt; <span class="number">1</span>){</span><br><span class="line">                <span class="keyword">return</span> nodes[<span class="number">1</span>];</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        nodes[targetNum-<span class="number">1</span>].next = nodes[targetNum].next;</span><br><span class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-快慢指针"><a href="#题解2-快慢指针" class="headerlink" title="题解2: 快慢指针"></a>题解2: 快慢指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        ListNode lnode = head;</span><br><span class="line">        ListNode pnode = <span class="keyword">null</span>;</span><br><span class="line">        ListNode rnode = head;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; n){</span><br><span class="line">            rnode = rnode.next;</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(rnode == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(rnode != <span class="keyword">null</span>){</span><br><span class="line">            rnode = rnode.next;</span><br><span class="line">            pnode = lnode;</span><br><span class="line">            lnode = lnode.next;</span><br><span class="line">        }</span><br><span class="line">        pnode.next = pnode.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>因为要找到倒数第n个节点，因此我们设立两个指针，第一个指针指向第一个节点，第二个指向第n个节点。</p>
<p>然后同时向后遍历，当第二个指针指向null时，第一个指针也就指向了第n个节点。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0020——有效的括号</title>
    <url>/2021/09/09/LeetCodeP0020%E2%80%94%E2%80%94%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "()"</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "{[]}"</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "(]"</span><br><span class="line">输出：false</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = <span class="string">"([)]"</span></span><br><span class="line">输出：<span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>'()[]{}'</code> 组成</li>
</ul>
<p><br></p>
<h3 id="题解1-栈"><a href="#题解1-栈" class="headerlink" title="题解1: 栈"></a>题解1: 栈</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Stack&lt;Character&gt; brackets = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++){</span><br><span class="line">            <span class="keyword">char</span> bracket = chars[i];</span><br><span class="line">            <span class="keyword">if</span>(bracket == <span class="string">'('</span> || bracket == <span class="string">'['</span> || bracket == <span class="string">'{'</span>){</span><br><span class="line">                brackets.push(bracket);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(canMatch(bracket, brackets)){</span><br><span class="line">                    brackets.pop();</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canMatch</span><span class="params">(<span class="keyword">char</span> bracket, Stack&lt;Character&gt; brackets)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>((bracket == <span class="string">')'</span> &amp;&amp; brackets.peek() == <span class="string">'('</span>) || </span><br><span class="line">           (bracket == <span class="string">']'</span> &amp;&amp; brackets.peek() == <span class="string">'['</span>) ||</span><br><span class="line">           (bracket == <span class="string">'}'</span> &amp;&amp; brackets.peek() == <span class="string">'{'</span>)){</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           }<span class="keyword">else</span>{</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>将遍历到的左括号放到栈中，遍历到的右括号和栈顶的括号做匹配，匹配成功则两个都消掉，匹配不成功就返回false，字符串遍历完毕则返回true。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-栈-ascll"><a href="#题解2-栈-ascll" class="headerlink" title="题解2: 栈 + ascll"></a>题解2: 栈 + ascll</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Stack&lt;Character&gt; brackets = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++){</span><br><span class="line">            <span class="keyword">char</span> bracket = chars[i];</span><br><span class="line">            <span class="keyword">if</span>(bracket == <span class="string">'('</span> || bracket == <span class="string">'['</span> || bracket == <span class="string">'{'</span>){</span><br><span class="line">                brackets.push(bracket);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(bracket - brackets.peek() == <span class="number">1</span> || bracket - brackets.peek() == <span class="number">2</span>){</span><br><span class="line">                    brackets.pop();</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>做法同题解1，但判断括号是否匹配使用了ascll（两个括号的ascll值相差为1或2），代码相对会更加简洁一点。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解3-奇妙的方法"><a href="#题解3-奇妙的方法" class="headerlink" title="题解3: 奇妙的方法"></a>题解3: 奇妙的方法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(s.contains(<span class="string">"()"</span>) || s.contains(<span class="string">"[]"</span>) || s.contains(<span class="string">"{}"</span>)){</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"()"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"()"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"[]"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"[]"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"{}"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"{}"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.length()==<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>不管怎样，最里面一层一定是”()”,”[]”,”{}”三者选其一，然后逐层剖开。</p>
<p>不过时间复杂度很高，看个乐呵就行了。</p>
<p>用时：47ms</p>
<p>时间复杂度：O（$n^3$）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0021——合并两个有序链表</title>
    <url>/2021/09/09/LeetCodeP0021%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/09/hLvmfU.jpg" alt="img"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<p><br></p>
<h3 id="题解1-迭代"><a href="#题解1-迭代" class="headerlink" title="题解1: 迭代"></a>题解1: 迭代</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode tmp = newHead;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val){</span><br><span class="line">                tmp.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = l1;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = l2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（m + n）</p>
<p>m和n为两个链表长度</p>
<p><br></p>
<h3 id="题解2-递归"><a href="#题解2-递归" class="headerlink" title="题解2: 递归"></a>题解2: 递归</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(l2 == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(l1.val &lt; l2.val){</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>原地操作，如果L1小，则判断L1.next和L2。当有一方为null时，返回另一方。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（m + n），堆栈所需空间</p>
<p>m和n为两个链表长度</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0022——括号生成</title>
    <url>/2021/09/09/LeetCodeP0022%E2%80%94%E2%80%94%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>
<p>有效括号组合需满足：左括号必须以正确的顺序闭合。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：["((()))","(()())","(())()","()(())","()()()"]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：["()"]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= n &lt;= 8</code></li>
</ul>
<p><br></p>
<h3 id="题解1-dfs"><a href="#题解1-dfs" class="headerlink" title="题解1: dfs"></a>题解1: dfs</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        dfs(<span class="keyword">new</span> StringBuilder(), <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> state, <span class="keyword">int</span> count)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span> &amp;&amp; state == <span class="number">0</span>){</span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>){</span><br><span class="line">            sb.append(<span class="string">"("</span>);</span><br><span class="line">            dfs(sb, state + <span class="number">1</span>, count - <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>); </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(state &gt; <span class="number">0</span>){</span><br><span class="line">            sb.append(<span class="string">")"</span>);</span><br><span class="line">            dfs(sb, state - <span class="number">1</span>, count);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：<em>O</em>($\frac{4^n}{\sqrt{n}}$)</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-动态规划"><a href="#题解2-动态规划" class="headerlink" title="题解2: 动态规划"></a>题解2: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; brackets = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        List&lt;String&gt; zero = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        zero.add(<span class="string">""</span>);</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        one.add(<span class="string">"()"</span>);</span><br><span class="line">        brackets.add(zero);</span><br><span class="line">        brackets.add(one);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++){</span><br><span class="line">            List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++){</span><br><span class="line">                List&lt;String&gt; list1 = brackets.get(j);</span><br><span class="line">                List&lt;String&gt; list2 = brackets.get(i-<span class="number">1</span>-j);</span><br><span class="line">                <span class="keyword">for</span>(String str1 : list1){</span><br><span class="line">                    <span class="keyword">for</span>(String str2 : list2){</span><br><span class="line">                        tmp.add(<span class="string">"("</span> + str1 + <span class="string">")"</span> + str2);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            brackets.add(tmp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> brackets.get(brackets.size() - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>动态规划十分类似于数学中的归纳法，也就是给出k = n-1的情况，要能求出k = n的情况。</p>
<p>这里我们也思考一下，如果我们要求k = n的情况，也就是求n个括号，与之对应k = n-1。而n-1个括号我们可以拆成两部分左边m个括号，右边n-1-m个括号，而这第n个括号，无非就是扩住左边的括号或右边的括号或都括起来。因此可以写一个循环，左边括号数为(0,1,2…n-1)，右边括号数则自然而然就为(n-1,n-2…0)，然后把左边括号扩住（此处包含了之前提到了三种情况）。</p>
<p>用时：9ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$n^2$）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown入门</title>
    <url>/2021/08/20/MarkDown%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="MarkDown入门"><a href="#MarkDown入门" class="headerlink" title="MarkDown入门"></a>MarkDown入门</h1><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">```python</span><br><span class="line">    </span><br><span class="line">`行内代码块`</span><br></pre></td></tr></tbody></table></figure>
<p><strong>python代码</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><code>行内代码块</code></p>
<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最多支持六级标题</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><span id="more"></span>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">~~删除~~					<span class="comment"># 删除线</span></span><br><span class="line">**加粗**					<span class="comment"># 加粗</span></span><br><span class="line">*斜体*					<span class="comment"># 斜体</span></span><br><span class="line">***加粗+斜体***					<span class="comment"># 粗斜体</span></span><br><span class="line">&lt;code&gt;高亮&lt;/code&gt;					<span class="comment"># 高亮</span></span><br><span class="line">`$H_2O_2$`					<span class="comment"># 下标</span></span><br><span class="line">`$X^{a^<span class="number">2</span>}$`					<span class="comment"># 平方</span></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;					<span class="comment"># 下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斜体、加粗中*和_效果相同</span></span><br><span class="line"><span class="comment"># HTML语法可以在Markdown中使用</span></span><br></pre></td></tr></tbody></table></figure>
<p><del>删除</del>            </p>
<p><strong>加粗</strong>            </p>
<p><em>斜体</em>            </p>
<p><strong><em>加粗+斜体</em></strong>  </p>
<p><code>高亮</code></p>
<script type="math/tex; mode=display">H_2O_2</script><script type="math/tex; mode=display">X^{a^2}</script><p><u>下划线</u>        </p>
<h2 id="4-表情符号"><a href="#4-表情符号" class="headerlink" title="4.表情符号"></a>4.表情符号</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">:smile_cat: :smile: :laughing: :dizzy_face: :sob: :weary:</span><br></pre></td></tr></tbody></table></figure>
<p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name | price</span><br><span class="line">:---  | ---:			<span class="comment"># :在左边表示该列左对齐；在右边表示右对齐；左右都有居中对齐</span></span><br><span class="line">fried chicken | <span class="number">19</span></span><br><span class="line">cola | <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表格语法较为繁琐，建议右键插入表格</span></span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th style="text-align:right">price</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">fried chicken</td>
<td style="text-align:right">19</td>
</tr>
<tr>
<td style="text-align:left">cola</td>
<td style="text-align:right">5</td>
</tr>
</tbody>
</table>
</div>
<h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>三级引用</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以此类推</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h4 id="7-1无序列表"><a href="#7-1无序列表" class="headerlink" title="7.1无序列表"></a>7.1无序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">* 无序列表<span class="number">1</span></span><br><span class="line">+ 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上三种方式均可</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>无序列表1</li>
</ul>
<ul>
<li>无序列表2</li>
</ul>
<ul>
<li>无序列表3</li>
</ul>
<h4 id="7-2有序列表"><a href="#7-2有序列表" class="headerlink" title="7.2有序列表"></a>7.2有序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 有序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 数字\.来取消显示列表（用反斜杠进行转义）</span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一行中使用三个及以上的*即可</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h2 id="9-跳转"><a href="#9-跳转" class="headerlink" title="9.跳转"></a>9.跳转</h2><h4 id="9-1外部跳转"><a href="#9-1外部跳转" class="headerlink" title="9.1外部跳转"></a>9.1外部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[紫梦沁香的博客](https://紫梦沁香.com)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">紫梦沁香的博客</a></p>
<h4 id="9-2内部跳转"><a href="#9-2内部跳转" class="headerlink" title="9.2内部跳转"></a>9.2内部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[跳转至<span class="number">1.</span>代码块](<span class="comment">#1-代码块)</span></span><br><span class="line">    </span><br><span class="line">[跳转至Connor](<span class="comment">#Connor)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 空格用-代替，特殊字符直接删掉</span></span><br><span class="line"><span class="comment"># 也可以使用HTML标签中的id来进行跳转</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="#1-代码块">跳转至1.代码块</a></p>
<p><a href="#Connor">跳转至康娜酱</a></p>
<h4 id="9-3自动链接"><a href="#9-3自动链接" class="headerlink" title="9.3自动链接"></a>9.3自动链接</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&lt;https://紫梦沁香.com&gt;</span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 协议也写全，不然会有bug</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">https://紫梦沁香.com</a><br><a href="https://www.baidu.com">https://www.baidu.com</a></p>
<h2 id="10-图片"><a href="#10-图片" class="headerlink" title="10.图片"></a>10.图片</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">![康娜酱](Connor.jpg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径在source/_posts/同名文件夹</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" alt="康娜酱"></p>
<h2 id="11-内置标签"><a href="#11-内置标签" class="headerlink" title="11.内置标签"></a>11.内置标签</h2><h4 id="11-1文本居中"><a href="#11-1文本居中" class="headerlink" title="11.1文本居中"></a>11.1文本居中</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="blockquote-center"是必要的</span></span><br><span class="line">&lt;blockquote <span class="class"><span class="keyword">class</span>="<span class="title">blockquote</span>-<span class="title">center</span>"&gt;<span class="title">HTML</span>居中&lt;/<span class="title">blockquote</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签</span></span><br><span class="line"><span class="class">{% <span class="title">centerquote</span> %}标签居中{% <span class="title">endcenterquote</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签别名</span></span><br><span class="line"><span class="class">{% <span class="title">cq</span> %}标签别名居中{% <span class="title">endcq</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中</span></span><br><span class="line"><span class="class"># 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote class="blockquote-center">HTML居中</blockquote>

<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签别名居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<h4 id="11-2图片越界"><a href="#11-2图片越界" class="headerlink" title="11.2图片越界"></a>11.2图片越界</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="full-image"是必要的</span></span><br><span class="line">&lt;img src=<span class="string">"Connor.jpg"</span> <span class="class"><span class="keyword">class</span>="<span class="title">full</span>-<span class="title">image</span>" /&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签的方式失效了，可能换了其它的标签名</span></span><br><span class="line"><span class="class"># 看起来没啥效果</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" class="full-image" id="Connor"></p>
<h3 id="11-3Bootstrap-Callout"><a href="#11-3Bootstrap-Callout" class="headerlink" title="11.3Bootstrap Callout"></a>11.3Bootstrap Callout</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">{% note class_name %} Content (md partial supported) {% endnote %}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中class_name可以是以下值</span></span><br><span class="line"><span class="comment"># danger primary success info warning default</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>It’s danger </p>
          </div>
<div class="note primary">
            <p>It’s primary </p>
          </div>
<div class="note success">
            <p>It’s success </p>
          </div>
<div class="note info">
            <p>It’s info </p>
          </div>
<div class="note warning">
            <p>It’s warning </p>
          </div>
<div class="note default">
            <p>It’s default </p>
          </div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>制作俄罗斯方块</title>
    <url>/2021/08/29/%E5%88%B6%E4%BD%9C%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前游戏标签下只是大致做了个目录，游戏实质内容并没有实现，最近又超级不想学<code>Deep Learning</code>，就来把这个俄罗斯方块给写了吧，后续的游戏等有空再写（下次一定）。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG3GOx.jpg" alt="empty"></p>
<span id="more"></span>
<p><br></p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>写游戏嘛，肯定要先把大致的框架和要实现的功能想好。于是我就画了个比较简略的图，不过应该还是挺清楚的，还附加了尺寸，没提到的部分就自由发挥吧，怎么舒服怎么来。</p>
<p>其中每个俄罗斯方块都是由四个小方块组成，每个小方块都是32px * 32px的，一共19行，12列。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGVaT.jpg" alt="design"></p>
<p>实际HTML实现效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGQMR.jpg" alt="efficiency"></p>
<p>然后设计每一个俄罗斯方块，由于考虑到旋转的问题，这里将他们都用一个大的矩形框起来。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGBD3V.jpg" alt="tetrisCube"></p>
<p>平移就不用多说了，我就着重说下旋转吧！</p>
<p>下面是L型的旋转图示，从左至右，从上至下，我把对应方块的X，Y坐标也写在旁边了。</p>
<p>仔细观察的话可以发现，旋转之后图形的Y就是旋转之前图形的X，而旋转之后图形的X就是旋转之前的（3 - Y）。</p>
<p>不过需要注意的是，旋转也会越界，需做一定的判断。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGzkdO.jpg" alt="rotate"></p>
<p><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>设计好实现的框架后，再添加亿点代码就完事了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>这里就不把代码贴出来了，没怎么写注释，让我再看一遍也费劲，相信聪明的人看了上面的设计图就会有思路了。</p>
<p>从昨天下午写到今天下午，一半的时间都在改bug，不是很会用JS的debug。</p>
<p><img src="https://z3.ax1x.com/2021/08/30/htyG1s.gif" alt="code"></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
  <entry>
    <title>制作贪吃蛇</title>
    <url>/2021/09/10/%E5%88%B6%E4%BD%9C%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>直接步入正题，由于游戏本身游玩以及操作比较简单，因此这次的游戏界面会有点简陋，实在是不知道该加啥东西了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>游戏主体部分是宽为650px，高为450px，而小蛇的每一格身体都是25 * 25的，因此整个游戏界面有18行，26列。</p>
<p>这一次我会尽量把每一个功能的代码都记录下来，一是因为这个贪吃蛇代码肯定比俄罗斯方块要少，二是因为，不写代码的话，我这篇博客已经结束了，这也太短了吧喂！</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjBnGF.jpg" alt=""></p>
<span id="more"></span>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>HTML代码如下，布局都是采用position：absolute的方式，因为部件比较少，这样代码也不会很繁琐，而且很简单。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./snake.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">#000000</span> <span class="number">3.5px</span> solid;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.container</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">570px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">707px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin-top</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.gameDiv</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">650px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">p</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.length</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.score</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">h2</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">305px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.deflory</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.snakeCube</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"length"</span>&gt;</span></span><br><span class="line">				长度：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span></span><br><span class="line">				分数：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gameDiv"</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/Deflory.png"</span> <span class="attr">class</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-移动贪吃蛇"><a href="#1-移动贪吃蛇" class="headerlink" title="1. 移动贪吃蛇"></a>1. 移动贪吃蛇</h4><p>（1） 键盘监听</p>
<p>首先需要让小蛇动起来，因此就会需要键盘监听事件。</p>
<p>凡事都不能一口吃成一个大胖子，不要急着写移动的功能，先看看能否监听到键盘。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ROWS = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> COLS = <span class="number">26</span></span><br><span class="line"><span class="keyword">var</span> SNAKE_SIZE = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">	onKeyDown();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// A 和 ←</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// S 和 ↓</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// D 和 →</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>稍微按了几下，浏览器的输出也正常，接下来就开始写移动的函数了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjfPHg.jpg" alt="console"></p>
<p>但在此之前，还有一件事。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjIFs0.png" alt="havesomethingmore"></p>
<p>（2） 创建小蛇</p>
<p>我们没有东西去移动啊！所以要写一个小蛇初始化的函数。</p>
<p>此处snakeCube类我只写了个position：absolute，不然每次写挺麻烦的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建初始的贪吃蛇</span></span><br><span class="line"><span class="function">function <span class="title">createSnake</span><span class="params">()</span></span>{</span><br><span class="line">	game_div = document.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 蛇头</span></span><br><span class="line">	snakeHead = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">	snakeHead.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/right.png"</span>)</span><br><span class="line">	snakeHead.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	game_div.appendChild(snakeHead);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 蛇身×3</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</span><br><span class="line">		snakeBody = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">		snakeBody.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>)</span><br><span class="line">		snakeBody.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">		game_div.appendChild(snakeBody);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果单单只是创建元素，而不给它“定位”，也就是设定top和left值，他显示是会叠在一起的。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjozgs.jpg" alt="error"></p>
<p>（3） 定位</p>
<p>综上所述，还有一件事，再写一个定位的函数。不要忘了在createSnake的末尾加上这个定位函数。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjogHK.jpg" alt=""></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="keyword">var</span> snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">var</span> len = snakes.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjbUM9.jpg" alt=""></p>
<p>（4） 移动</p>
<p>好了，历经千辛万苦，终于可以准备让这个小蛇动起来了。</p>
<p>先来解释下这里的逻辑吧，想想贪吃蛇是怎么移动的呢？</p>
<p>是不是头先动，然后紧接着第一节身体移动到原先头的位置，第二节身体移动到原先第一节身体的位置。因此我们只需要把snakeLocation数组从后往前覆盖就行了（不能从先往后噢，想想就明白了）。</p>
<p>此外这里x，y都是单位长度，因此还要乘以蛇的大小。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 贪吃蛇移动，x为横向，y为纵向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">x, y</span>)</span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=snakeLen-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--){</span><br><span class="line">		snakeLocation[i][<span class="number">0</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">		snakeLocation[i][<span class="number">1</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	}</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = snakeLocation[<span class="number">0</span>][<span class="number">0</span>] + SNAKE_SIZE * x;</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = snakeLocation[<span class="number">0</span>][<span class="number">1</span>] + SNAKE_SIZE * y;</span><br><span class="line">	snakeLocate();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>好像略微有些惊悚嘛，不过没关系，修改一下移动时头部的方向就行。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjO7RO.png" alt=""></p>
<p>只需要在移动前修改方向变量，定位时判断方向即可，这里代码太多就放出来一部分。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line"><span class="comment">// 键盘监听事件，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">				move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;snakeLen;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			snakes[<span class="number">0</span>].setAttribute(<span class="string">"src"</span>,<span class="string">"./img/up.png"</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjzREj.gif" alt=""></p>
<h4 id="2-碰撞判定"><a href="#2-碰撞判定" class="headerlink" title="2. 碰撞判定"></a>2. 碰撞判定</h4><p>（1） 自身碰撞判定</p>
<p>贪吃蛇碰到自己身体就应该结束游戏了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSKsS.png" alt=""></p>
<p>自身碰撞判定无非就是判断头和身体有没有碰撞，一个for-loop就行了。</p>
<p>当然，我们还需要一个flag，来判断当前是否已经结束，默认是false。</p>
<p>函数实现起来比较轻松，注意每次move都需判断，而且得在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 自身碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchItself</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;snakeLen;i++){</span><br><span class="line">		<span class="keyword">if</span>(left == snakeLocation[i][<span class="number">0</span>] &amp;&amp; top == snakeLocation[i][<span class="number">1</span>]){</span><br><span class="line">			gameover = <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后还得修改一下键盘监听事件，只有gameover = false时才监听移动事件。</p>
<p>这里我多添加了两个方法，一会儿实现。</p>
<p>一个是gameover = true时的restart()；一个是gameover = false时的pause()。</p>
<p>前者用于重新开始，后者用于游戏暂停</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">if</span>(!gameover){</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// W 和 ↑</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// A 和 ←</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"left"</span>;</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// S 和 ↓</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"down"</span>;</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// D 和 →</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					pause();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					restart();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 边框碰撞判定</p>
<p>贪吃蛇是不能穿越这个游戏的边框的，至于碰到边框是会死，还是从另一边出来可以自由发挥。</p>
<p>我这里实现的是从另一头出来的方式。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSWLD.png" alt=""></p>
<p>类似自身碰撞判定，也是要在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 边界碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crashBoundary</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(left &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">625</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(left &gt; <span class="number">625</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">425</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &gt; <span class="number">425</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvwSEV.gif" alt=""></p>
<h4 id="3-游戏结束"><a href="#3-游戏结束" class="headerlink" title="3.游戏结束"></a>3.游戏结束</h4><p>（1） 计时器</p>
<p>首先，我们的小蛇不能自己动，需要设置一个计时器。</p>
<p>因为需要暂停和继续游戏，所以我们在方法中判断，如果当前有计时器就取消它，没有则设置一个。</p>
<p>记得在初始化的时候调用一下。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 暂停/继续游戏</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>暂停的时候，屏幕上空荡荡的也不大好，给人有一种没有暂停的错觉。所以加一个div，美化下暂停的界面。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.paused</span>{</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"paused"</span>&gt;</span></span><br><span class="line">    按下 SPACE 继续游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvWBxx.png" alt=""></p>
<p>在修改下上面pause方法，暂停的时候显示提示，继续时隐去提示。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"block"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 游戏结束</p>
<p>在此之前，我又写了个div，可以先看看效果。同暂停类似，只需要将它的display值默认设为none，待到游戏结束时在改成block即可。</p>
<p>处于美观，我将游戏背景颜色改成了深灰色。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.gameover</span>{</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"gameover"</span>&gt;</span></span><br><span class="line">    游戏结束</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    按下 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#ee3000"</span>&gt;</span>SPACE<span class="tag">&lt;/<span class="name">font</span>&gt;</span> 重新开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">final</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvgmVJ.png" alt=""></p>
<p>（3） 重新开始</p>
<p>重新开始需要把所有的变量都重置，然后删除游戏中的贪吃蛇，再把游戏结束的提示隐去，然后和init()一样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 重新开始</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params"></span>)</span>{</span><br><span class="line">	snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line">	snakeLen = <span class="number">4</span>;</span><br><span class="line">	snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">	gameover = <span class="literal">false</span>;</span><br><span class="line">	timer = <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> children = gameDiv.children;</span><br><span class="line">	<span class="keyword">var</span> childrenLen = children.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=childrenLen-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">		gameDiv.removeChild(children[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>; </span><br><span class="line">	createSnake();</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-分数系统"><a href="#4-分数系统" class="headerlink" title="4. 分数系统"></a>4. 分数系统</h4><p>最后就是小蛇蛇吃的食物啦。</p>
<p>（1） 食物是在屏幕中随机出现，而且吃完一个就会出现下一个。</p>
<p>创建食物同创建小蛇类似，只是多了个random函数，要确保食物随机在游戏界面中。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	foodLeft = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * COLS);</span><br><span class="line">	foodTop = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * ROWS);</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> food = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	food.className = <span class="string">"foodCube"</span>;</span><br><span class="line">	food.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/food.png"</span>);</span><br><span class="line">	food.style.top = foodTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	food.style.left = foodLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	gameDiv.appendChild(food);</span><br><span class="line">	updateData();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 吃一个长度+1，分数+10，且小蛇的身体+1。</p>
<p>蛇头碰到食物即吃掉，删除该img，然后生成新的食物；</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 吃掉食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(foodLeft == left &amp;&amp; foodTop == top){</span><br><span class="line">		snakeLen++;</span><br><span class="line">		score += <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">var</span> food = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"foodCube"</span>)[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">		gameDiv.removeChild(food);</span><br><span class="line">		createFood();</span><br><span class="line">		grow();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 长身体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grow</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> body = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	body.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	body.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当前最后一个身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> lastTop = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">var</span> lastLeft = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 新的身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> bodyTop = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> bodyLeft = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			bodyTop = lastTop + <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">			bodyTop = lastTop - <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	body.style.top = bodyTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	body.style.left = bodyLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	snakeLocation[snakeLen-<span class="number">1</span>] = [bodyLeft, bodyTop];</span><br><span class="line">	gameDiv.appendChild(body);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>之后更新界面分数</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 更新界面中分数和长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> scoreH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"score"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> lengthH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"length"</span>)[<span class="number">0</span>];</span><br><span class="line">	scoreH1.innerHTML = <span class="string">"分数："</span> + score;</span><br><span class="line">	lengthH1.innerHTML = <span class="string">"长度："</span> + snakeLen;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（3） 分数越高，小蛇移动速度越快。</p>
<p>三句代码即可，记得添加到适当的位置，这里就不给出来了。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">speed += score / <span class="number">10</span> * <span class="number">0.05</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}, <span class="number">100</span> / speed);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-游戏性"><a href="#5-游戏性" class="headerlink" title="5. 游戏性"></a>5. 游戏性</h4><p>至此，贪吃蛇的代码已全部写完，之后可以按自己的想法添加一些游戏的规则，例如可以添加一个红色果实的设定，效果是绿色果实的三倍，出现概率10%。我就不实现了，现在已经凌晨了，累了。</p>
<p>游戏运行画面如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/11/hvLwJf.gif" alt=""></p>
<p>以后写小游戏就不写这么详细了，这也太累了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
</search>
