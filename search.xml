<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dijkstra</title>
    <url>/2022/03/01/Dijkstra/</url>
    <content><![CDATA[<h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>Dijkstra 算法可以解决从一点出发，到所有其它点的最短路径问题，但只可用于没有负权重的图，<strong>这是一个基于贪心，广搜以及动态规划的算法</strong>。</p>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><p>每次从==未求出最短路径的节点==中取出<strong>距离起点最近</strong>的节点，然后以这个节点为桥梁向外拓展，求出新的最短路径。</p>
<p>举例如下，要求以 A 为原点，到其他点的最短路径。</p>
<p><img src="https://s4.ax1x.com/2022/03/01/bQ8HfJ.png" alt="image"></p>
<ul>
<li><strong>result</strong>：已求出最小路径的顶点</li>
<li><strong>notFound</strong>：为求出最小路径的顶点</li>
</ul>
<p>开始时，result = {A(0)}，notFound = {B(5)，C(3)，D($\infty$)}，然后从 notFound 中选取 C 点，刷新 result = {A(0)，C(3)}， notFound = {B(5)，D(12)}，以此类推。</p>
<p><strong>时间复杂度</strong>：$O(n^2)$</p>
<p><strong>空间复杂度</strong>：$O(n^2)$</p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>但是这个算法为什么是正确的呢？这里就简单证明一下。</p>
<p>在那儿之前，先来看看这样一道题：<strong>我们规定因数中只含2,3,5（当然也包括1和本身）的数为 α 数，请按顺序输出前 n 个α 数。</strong></p>
<p><strong>解题思路</strong>：建立一个小根堆，一开始往其中压入 <strong>1</strong>，之后每次从堆中弹出一个数 <strong>x</strong> 并输出（==注意去重==），并压入 <strong>2x</strong>，<strong>3x</strong>，<strong>5x</strong>，直到弹出 n 个数为止。</p>
<p>很好理解，排在后面的 <strong>α</strong> 数必然是由排在前面的数，或是乘2，或是乘3，或是乘5所得，而 1 满足 <strong>α</strong> 数的条件，其乘以 2,3,5 所产生的数也必然满足 <strong>α</strong> 数，再加上有小根堆的堆化排序，每次弹出的数就是下一个 <strong>α</strong> 数。</p>
<p>再回到 Dijkstra 这个问题中来<strong>，一条最短路径一定是由另一条最短路径拓展得来</strong>，假使 <strong>A -&gt; D -&gt; B -&gt; C</strong> 是 <strong>A -&gt; C</strong> 的最短路径，那么 <strong>A -&gt; D -&gt; B</strong> 一定是 <strong>A -&gt; B</strong> 的最短路径，可以用反证法来证明，如果存在一条路径 <strong>A -&gt; X -&gt; B</strong> 使得 <strong>A -&gt; B</strong> 路径最短，那么 <strong>A -&gt; D -&gt; B -&gt; C</strong> 就不是 <strong>A -&gt; C</strong> 的最短路径，而是 <strong>A -&gt; X -&gt; B -&gt; C</strong> 了。</p>
<p>一开始我们只有 A -&gt; A = 0 这一条路径，借此拓展其他路径，在从这众多路径中选取距离原点最短的路径，<strong>这条路径就是最短路径</strong>，因为==非负权重==使得不可能再从其它点折返回来使得路径更低。</p>
<h4 id="时间优化"><a href="#时间优化" class="headerlink" title="时间优化"></a>时间优化</h4><p>先前提到过了，该算法的时间复杂度为 $O(n^2)$，每次选取一条最短路径，一共要选 n-1 次，而最短路径的经典做法的选取代价是 $O(n)$ ，但我们可以使用小根堆来优化这个过程，将选取最短路径的代价降低到 $O(logn)$，从而使得整体的时间复杂度为 $O(nlogn)$。</p>
<h4 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h4><p>采用邻接矩阵存储图的方式需要构建 $n <em>n$ 的矩阵，因此空间复杂度为 $O(n^2)$，但平方级别的代码，如果顶点数超过了 $10^4$，很容易 <strong><code>Out Of Memory</code></strong>，这时就可以使用==链式前向星存图==的方式，虽然名字中带有链式二字，但为了运行速度采用了<strong>数组的存储方式</strong>，不过<em>*思想还是链表</em></em>。</p>
<p>假设共有 n 个点，m 条边。</p>
<p>具体做法呢，需要开辟四个数组，head[n]， to[m]， next[m] 和 weight[m]。</p>
<p><strong>head[n]</strong>：存放以 <strong>i</strong> 为起点的第一条边的下标。</p>
<p><strong>to[m]</strong>：第 <strong>i</strong> 条边所指向的节点。</p>
<p><strong>next[m]</strong>：第 <strong>i</strong> 条边的下一条边的下标。（起点相同）</p>
<p><strong>weight[m]</strong>：第 <strong>i</strong> 条边的权重。</p>
<p>在读入数据时需要填入上述四个数组中。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">    <span class="keyword">int</span> f = readInt();		<span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">int</span> t = readInt();		<span class="comment">// 终点</span></span><br><span class="line">    <span class="keyword">int</span> v = readInt();		<span class="comment">// 权重</span></span><br><span class="line">    next[++cnt] = head[f];	<span class="comment">// 将第i条边的下一条边指向以f为起点第一条边</span></span><br><span class="line">    head[f] = cnt;			<span class="comment">// 将f为起点的第一条边设置为当前边</span></span><br><span class="line">    to[cnt] = t;			<span class="comment">// 第i条边的终点是t</span></span><br><span class="line">    weight[cnt] = v;		<span class="comment">// 第i条边的权重是v</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>举个具体的例子，n = 4, m = 3。</p>
<p>数组初始化如下，head[n] 中的 0 不像其他三个数组，是有意义的，<strong>代表了没有以 i 开头的边的信息</strong>，这也是后面更新路径跳出循环的判断条件。</p>
<p><img src="https://s4.ax1x.com/2022/03/01/bliHIK.png" alt="image"></p>
<p>第一条边：<strong>1 -&gt; 2 = 6</strong>。</p>
<p><strong>to[1] = 2</strong> 和 <strong>weight[1] = 6</strong>：分别代表了第一条边的终点以及权重。</p>
<p><strong>head[1] = 1</strong>：代表以节点 <strong>1</strong> 为起点的第一条边是<strong>所有边中的第一条边</strong>。</p>
<p><strong>next[1] = 0</strong>：代表第一条边的下一条边是第 <strong>0</strong> 条边，也就是没有下一条边。</p>
<p><img src="https://s4.ax1x.com/2022/03/01/blFAzQ.png" alt="image"></p>
<p>第二条边：<strong>3 -&gt; 2 = 4</strong>。</p>
<p><strong>to[2] = 2</strong> 和 <strong>weight[2] = 4</strong>：分别代表了第二条边的终点以及权重。</p>
<p><strong>head[3] = 2</strong>：代表以节点 <strong>3</strong> 为起点的第一条边是<strong>所有边中的第二条边</strong>。</p>
<p><strong>next[2] = 0</strong>：代表第二条边的下一条边是第 <strong>0</strong> 条边，也就是没有下一条边。</p>
<p><img src="https://s4.ax1x.com/2022/03/01/blmnc8.png" alt="image"></p>
<p>第三条边：<strong>1 -&gt; 4 = 3</strong>。</p>
<p><strong>to[3] = 4</strong> 和 <strong>weight[3] = 3</strong>：分别代表了第三条边的终点以及权重。</p>
<p><strong>head[1] = 3</strong>：代表以节点 <strong>1</strong> 为起点的第一条边是<strong>所有边中的第三条边</strong>，被覆盖的边的信息需要先存储到 <strong>next</strong> 中，不然就丢失了，<strong>也就是将这条边的下一条边指向原先以 1 为起点的第一条边</strong>，类似链表的头插法。</p>
<p><strong>next[3] = 1</strong>：代表第三条边的下一条边是第 <strong>1</strong> 条边。</p>
<p><img src="https://s4.ax1x.com/2022/03/01/blms41.png" alt="image"></p>
<p>那么该如何访问以某个节点为起点的边呢？这里我们举例以 <strong>1</strong> 为起点的边。</p>
<p><strong>head</strong> 中存储了以 <strong>i</strong> 为起点的第一条边，因此 <strong>head[1]</strong> 就是起始位置，而下一条边就是 <strong>next[head[1]]</strong>。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[start]; i != <span class="number">0</span>; i = next[i]) {</span><br><span class="line">    <span class="comment">// complete the loop</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>虽然说这样我们就无法用 $O(1)$ 的代价去找到某一条边，但在 <strong>Dijkstra</strong> 中我们并没有这样的需求，甚至其还帮我们过滤掉了不可达的点。</p>
<p><strong>空间复杂度</strong>：$O(m + n)$</p>
<p>==注：如果存储无向边需要多开一倍的空间。==</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> StreamTokenizer st = <span class="keyword">new</span> StreamTokenizer(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            st.nextToken();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) st.nval;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = readInt();</span><br><span class="line">        <span class="keyword">int</span> m = readInt();</span><br><span class="line">        <span class="keyword">int</span> s = readInt();</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] head = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] to = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            <span class="keyword">int</span> f = readInt();	<span class="comment">// from</span></span><br><span class="line">            <span class="keyword">int</span> t = readInt();	<span class="comment">// to</span></span><br><span class="line">            <span class="keyword">int</span> v = readInt();	<span class="comment">// weight</span></span><br><span class="line">            next[++cnt] = head[f];</span><br><span class="line">            head[f] = cnt;</span><br><span class="line">            to[cnt] = t;</span><br><span class="line">            weight[cnt] = v;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Node&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Node&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node o1, Node o2)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(s, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] distance = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(distance, Integer.MAX_VALUE);</span><br><span class="line">        distance[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> t = node.to;</span><br><span class="line">            <span class="keyword">if</span> (isVisited[t]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            isVisited[t] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = head[t]; i != <span class="number">0</span>; i = next[i]) {</span><br><span class="line">                <span class="keyword">if</span> (distance[to[i]] &gt; distance[t] + weight[i]){</span><br><span class="line">                    distance[to[i]] = distance[t] + weight[i];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (!isVisited[to[i]]){</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Node(to[i], distance[to[i]]));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            sb.append(distance[i] + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> to, <span class="keyword">int</span> weight)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.to = to;</span><br><span class="line">            <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>Android数据存储</title>
    <url>/2021/09/24/Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>作为一个完整的应用程序，不可能每一次手机重启了，整个应用程序就和刚下载时候一样，因此数据的存储与操作是必不可少的。Android 系统为我们提供了4种数据存储方式，分别是：SharedPreference、SQLite、ContentProvider 和文件。</p>
<span id="more"></span>
<p><br></p>
<h4 id="1-SharedPreference-存储："><a href="#1-SharedPreference-存储：" class="headerlink" title="1. SharedPreference 存储："></a>1. SharedPreference 存储：</h4><p><strong>本质就是基于 xml 文件存储<code>键值对</code>数据，通常用来存储一些简单的配置信息。</strong></p>
<p>   (1) getPreferences，文件名与 Activity 名一致，是该 Activity 独有的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sharedpreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        SharedPreferences shp = getPreferences(Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(<span class="string">"data"</span>, <span class="number">1234</span>);</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>数据被写入到 /data/data/package（包名）/shared_prefs/MainActivity.xml 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>​    (2) getSharedPreferences 与 (1)类似，可以自己设置文件名， 而且是共享的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sharedpreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        SharedPreferences shp = getSharedPreferences(<span class="string">"SavedData"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(<span class="string">"data"</span>, <span class="number">8888</span>);</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>数据被写入到 /data/data/package（包名）/shared_prefs/SavedData.xml 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">value</span>=<span class="string">"8888"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><strong>运用到ViewModel中</strong></p>
<p>ViewModel部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androidviewmodel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.AndroidViewModel;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateHandle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">AndroidViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> SavedStateHandle handle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span><span class="params">(Application application, SavedStateHandle handle)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(application);</span><br><span class="line">        <span class="keyword">this</span>.handle = handle;</span><br><span class="line">        <span class="keyword">if</span> (!handle.contains(MainActivity.KEY_NAME)) {</span><br><span class="line">            load();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> handle.getLiveData(MainActivity.KEY_NAME);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>{</span><br><span class="line">        SharedPreferences shp = getApplication().getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        handle.set(MainActivity.KEY_NAME, shp.getInt(MainActivity.KEY_NAME, <span class="number">0</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>{</span><br><span class="line">        SharedPreferences shp = getApplication().getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(MainActivity.KEY_NAME, handle.get(MainActivity.KEY_NAME));</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        handle.set(MainActivity.KEY_NAME, getNumber().getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>MainaActivity部分</p>
<p>这里 viewModel.save() 之所以放在onPause() 中，是因为比较保险，如果放在 add() 中，每加一次都进行一次读写操作，开销会比较大，而如果放在onStop() 或 onDestory() 中，又会面临着万一出现意料以外的问题没有调用这两个方法导致数据丢失就比较尴尬了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androidviewmodel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateViewModelFactory;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.androidviewmodel.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">private</span> MyViewModel viewModel;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY_NAME = <span class="string">"Number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        viewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        binding.setData(viewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        viewModel.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Activity生命周期</title>
    <url>/2021/09/23/Android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="Activity状态"><a href="#Activity状态" class="headerlink" title="Activity状态"></a>Activity状态</h2><p>Activity 生命周期是指 Activity 从<code>创建</code>到<code>销毁</code>的过程，在这一过程中，Activity 一般处于4种状态，即Active/Running、Paused、Stop、Killed。</p>
<ol>
<li>Active/Running。此时 Activity 一定处于屏幕的最顶端，可以被看到，并且可以与用户进行交互。对于 Activity 栈来说，它处于<code>栈顶</code>。</li>
<li>Paused。此时 Activity 在屏幕上仍然<code>可见</code>，但它已经失去了焦点，用户不能与之交互。处于暂停的 Activity 仍然是存活的，它仍然维持着其内部的状态的信息，但是系统可能会在内存不足时杀死该 Activity。</li>
<li>Stop。此时 Activity 在屏幕上不能被用户所见，即该 Activity 被其它 Activity 所<code>遮盖</code>。同 Paused 状态类似，处于停止状态的 Activity 仍然保留着其内部的状态和成员信息，但是会由于手机系统内存被征用而被系统杀死回收。</li>
<li>Killed。Activity 被系统杀死<code>回收</code>或未启动。</li>
</ol>
<p><br></p>
<h2 id="生命周期的事件回调函数"><a href="#生命周期的事件回调函数" class="headerlink" title="生命周期的事件回调函数"></a>生命周期的事件回调函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">可被杀死</th>
<th style="text-align:center">下一个</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onCreate()</td>
<td style="text-align:center">当 Activity 第一次被创建时调用</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onStart()</td>
</tr>
<tr>
<td style="text-align:center">onRestart()</td>
<td style="text-align:center">当 Activity 停止后，再次启动前调用</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onStart()</td>
</tr>
<tr>
<td style="text-align:center">onStart()</td>
<td style="text-align:center">当 Activity 正要变得为用户所见时被调用<br>当 Activity 转向前台时继以 onResume()<br>当 Activity 变为隐藏时继以 onStop()</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onResume() <br>onStop()</td>
</tr>
<tr>
<td style="text-align:center">onResume()</td>
<td style="text-align:center">当 Activity 开始与用户进行交互前被调用<br>此时 Activity 位于堆栈顶部，用户可见。继以 onPause()</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onPause()</td>
</tr>
<tr>
<td style="text-align:center">onPause()</td>
<td style="text-align:center">当系统将要启动另一个 Activity 或者弹出对话框时调用<br>此方法会将所有持久性数据写入存储中，下一个 Activity 必须待其完成才能继续<br>当 Activity 重新回到前台时继以 onResume()<br>当 Activity 变为用户不可见时继以 onStop()</td>
<td style="text-align:center">是</td>
<td style="text-align:center">onResume()<br>onStop()</td>
</tr>
<tr>
<td style="text-align:center">onStop()</td>
<td style="text-align:center">当 Activity 不再为用户可见时调用<br>这可能发生在它被销毁或者另一个 Activity （可能是现存或新建的）回到运行状态并覆盖它时<br>如果 Activity 再次回到前台跟用户交互则继以 onRestart()<br>如果关闭 Activity 则继以 onDestory()</td>
<td style="text-align:center">是</td>
<td style="text-align:center">onRestart()<br>onDestory()</td>
</tr>
<tr>
<td style="text-align:center">onDestroy()</td>
<td style="text-align:center">在 Activity 销毁前调用<br>这可能发生在 Activity 结束（调用它的 finish() 方法）或者因为系统需要临时空间而销毁该 Activity 实例时<br>可以用 isFinishing() 来区分这两种情况</td>
<td style="text-align:center">是</td>
<td style="text-align:center">无</td>
</tr>
</tbody>
</table>
</div>
<p>注：表格中“可被杀死”一列是指在该方法被调用后，系统是否可以杀死包含此 Activity 的进程。</p>
<p><br></p>
<p>为了获取 Activity 被杀死前的状态，可以在 Activity 被销毁前使用 onSaveInstanceState() 方法。</p>
<p>它会将一个<code>键值对</code>方式记录的 Activity 动态状态的 Bundle 对象传递给该方法。</p>
<p>而当 Activity 再次启动时，这个 Bundle 会传递给 onCreate() 方法或随着 onStart() 方法调用的 onRestoreInstanceState()，所以它们两个都能恢复之前保存的状态。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">是否可终止</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onSaveInstanceState()</td>
<td style="text-align:center">Android 系统因资源不足而终止 Activity 前被调用，用以保存 Activity 的状态信息<br>供 onCreate() 和 onRestoreInstanceState()方法恢复使用</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">onRestoreInstanceState()</td>
<td style="text-align:center">恢复 onSaveInstanceState() 保存的 Activity 状态信息<br>在 onStart() 和 onResume() 方法之间使用</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>Android 界面如下，当前是在 Activity1 下。</p>
<p><img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px"></p>
<p>点击 “进入Activity2”，此时先调用了 onPause() ，Activity1 先进入Paused状态，然后再调用onCreate() -&gt; onStart() -&gt; onResume() ，此乃创建 Activity 三件套。然后 Activity1 调用 onStop() 转向后台，onSaveInstanceState() 保存状态信息。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BJI1K.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40wUQx.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity1: onPause</span><br><span class="line">E/Activity2: onCreate</span><br><span class="line">E/Activity2: onStart</span><br><span class="line">E/Activity2: onResume</span><br><span class="line">E/Activity1: onStop</span><br><span class="line">E/Activity1: onSaveInstanceState</span><br></pre></td></tr></tbody></table></figure>
<p>随即点击“进入 Activity1 ”回到主界面，与上面情况类似，是先暂停 Activity2，而后<code>创建</code>Activity1，在保存 Activity2 的状态信息。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNr1P.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity2: onPause</span><br><span class="line">E/Activity1: onCreate</span><br><span class="line">E/Activity1: onStart</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity2: onStop</span><br><span class="line">E/Activity2: onSaveInstanceState</span><br></pre></td></tr></tbody></table></figure>
<p>但如果使用的是物理按键<span class="github-emoji" style="display:inline;vertical-align:middle"><span>◀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，则是<code>重启</code> Activity1，然后把 Activity2 <code>销毁</code>。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNocV.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity2: onPause</span><br><span class="line">E/Activity1: onRestart</span><br><span class="line">E/Activity1: onStart</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity2: onStop</span><br><span class="line">E/Activity2: onDestroy</span><br></pre></td></tr></tbody></table></figure>
<p>最后我们尝试一下点击“进入 Activity3 ”，会跳出一个对话框，此时 Activity1 还是可见的。</p>
<p>因此是没有 onStop() （停止 Activity）和 onSaveInstanceState() （保存 Activity 状态信息）这一步的。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNx91.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/24/4BUPBD.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity1: onPause</span><br><span class="line">E/Activity3: onCreate</span><br><span class="line">E/Activity3: onStart</span><br><span class="line">E/Activity3: onResume</span><br></pre></td></tr></tbody></table></figure>
<p>点击对话框外面关闭该对话框，是先暂停 Activity3，随即 Activity1 调用 onResume()，使得它可以与用户进行交互，最后停止并销毁 Activity3。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity3: onPause</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity3: onStop</span><br><span class="line">E/Activity3: onDestroy</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo使用自定义的CSS和JS</title>
    <url>/2021/08/26/Hexo%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84CSS%E5%92%8CJS/</url>
    <content><![CDATA[<h2 id="Hexo的执行逻辑"><a href="#Hexo的执行逻辑" class="headerlink" title="Hexo的执行逻辑"></a>Hexo的执行逻辑</h2><p>Hexo是根据用户写的md文件进行渲染，得到对应的html文件在网站上显示。但有的时候会需要自定义页面，当然Hexo也给我们预留了解决方案。</p>
<p>这里我要实现的效果就是新建一个游戏标签页，效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<p><br></p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>首先，要新建一个标签页面就需要在NexT的配置文件中添加标签以及对应路由。</p>
<p>其中<code>fa fa-gamepad</code>是<a href="http://www.fontawesome.com.cn">Font Awesome</a>提供的矢量图标。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  game: /game/ || fa fa-gamepad</span><br></pre></td></tr></tbody></table></figure>
<p>如果不想要英文的标签的话，以中文举例，可以到<code>themes/next/languages/zh-CN.yml</code>下添加game对应的中文。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br><span class="line">  game: 游戏</span><br></pre></td></tr></tbody></table></figure>
<p>然后使用git命令<code>hexo new page game</code>，创建/game对应md文件。</p>
<p>注：如需更改一些全局样式，可到Next配置文件的<code>custom_file_path</code>中修改</p>
<span id="more"></span>
<p><br></p>
<h2 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h2><p>自定义渲染分为两种，一种是主题内渲染，一种是完全页面渲染。</p>
<h4 id="1-主题内渲染"><a href="#1-主题内渲染" class="headerlink" title="1.主题内渲染"></a>1.主题内渲染</h4><p><code>layout: false</code>表示该md不会经过layout的渲染。</p>
<p>同时可以保存添加的模块，主题的头部信息，仅对主体部分进行自定义。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">title: game</span><br><span class="line">date: 2021-08-26 15:45:42</span><br><span class="line">layout: false</span><br></pre></td></tr></tbody></table></figure>
<p>这里头部的导航栏以及侧边的统计栏都是保存的。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<h4 id="2-完全页面渲染"><a href="#2-完全页面渲染" class="headerlink" title="2.完全页面渲染"></a>2.完全页面渲染</h4><p>在Hexo的配置文件中，<code>skip_render</code>用来配置跳过渲染的文件。</p>
<p>例：<code>skip_render: game/*</code>，指game/下的文件不会被渲染。</p>
<p>若是<code>game/**</code>则代表目录递归，包含子目录中的文件。</p>
<p>或是指定某个文件：<code>game/index.md</code></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># Directory</span></span><br><span class="line">source<span class="emphasis">_dir: source</span></span><br><span class="line"><span class="emphasis">public_</span>dir: public</span><br><span class="line">tag<span class="emphasis">_dir: tags</span></span><br><span class="line"><span class="emphasis">archive_</span>dir: archives</span><br><span class="line">category<span class="emphasis">_dir: categories</span></span><br><span class="line"><span class="emphasis">code_</span>dir: downloads/code</span><br><span class="line">i18n<span class="emphasis">_dir: :lang</span></span><br><span class="line"><span class="emphasis">skip_</span>render: game/<span class="emphasis">*</span></span><br></pre></td></tr></tbody></table></figure>
<p>完全页面渲染正如其名，不会包含主题模块等信息，全权由自己来设计。</p>
<p>这里我还没有添加CSS和JS。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1fQ1.png" alt="example2"></p>
<p><br></p>
<h2 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h2><p>主题内渲染由于头部信息是主题给定的，因此CSS不能直接使用html的<code>&lt;style&gt;</code>导入CSS，JS同理。</p>
<p>所以需要直接给NexT添加我们需要的CSS文件。</p>
<p>在<code>themes/next/source/css</code>中，首先创建CSS文件的目录，为了与主题自带的CSS区分开，我们新建一个文件夹<code>_mycss</code>，然后创建<code>game.styl</code>，代码如下。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">.game_img *,.game_img *:after,.game_img *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }</span><br><span class="line">body .game_img, html .game_img { font-size: 100%; padding: 0; margin: 0;}</span><br><span class="line">body .game_img{</span><br><span class="line">	font-family: 'Lato', Calibri, Arial, sans-serif;</span><br><span class="line">	color: #b3b9bf;</span><br><span class="line">	background: #f9f9f9;</span><br><span class="line">}</span><br><span class="line">.game_img a {</span><br><span class="line">	color: #888;</span><br><span class="line">	text-decoration: none;</span><br><span class="line">}</span><br><span class="line">.game_img a:hover,.game_img a:active {</span><br><span class="line">	color: #333;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">	padding: 20px 20px 100px 20px;</span><br><span class="line">	max-width: 1300px;</span><br><span class="line">	margin: 0 auto;</span><br><span class="line">	list-style: none;</span><br><span class="line">	text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid li {</span><br><span class="line">	display: inline-block;</span><br><span class="line">	width: 350px;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure {</span><br><span class="line">	margin: 0;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure img {</span><br><span class="line">	max-width: 100%;</span><br><span class="line">	display: block;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption {</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 0;</span><br><span class="line">	left: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	background: #2c3f52;</span><br><span class="line">	color: #ed4e6e;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption h3 {</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption span:before {</span><br><span class="line">	content: 'by ';</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption a {</span><br><span class="line">	text-align: center;</span><br><span class="line">	padding: 5px 10px;</span><br><span class="line">	border-radius: 2px;</span><br><span class="line">	display: inline-block;</span><br><span class="line">	background: #ed4e6e;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">/* 说明文字样式 1 */</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption {</span><br><span class="line">	height: 100%;</span><br><span class="line">	width: 100%;</span><br><span class="line">	opacity: 0;</span><br><span class="line">	text-align: center;</span><br><span class="line">	-webkit-backface-visibility: hidden;</span><br><span class="line">	-moz-backface-visibility: hidden;</span><br><span class="line">	backface-visibility: hidden;</span><br><span class="line">	-webkit-transition: -webkit-transform 0.3s, opacity 0.3s;</span><br><span class="line">	-moz-transition: -moz-transform 0.3s, opacity 0.3s;</span><br><span class="line">	transition: transform 0.3s, opacity 0.3s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.no-touch .cs-style-1 figure:hover figcaption,</span><br><span class="line">.cs-style-1 figure.cs-hover figcaption {</span><br><span class="line">	opacity: 1;</span><br><span class="line">	-webkit-transform: translate(15px, 15px);</span><br><span class="line">	-moz-transform: translate(15px, 15px);</span><br><span class="line">	-ms-transform: translate(15px, 15px);</span><br><span class="line">	transform: translate(15px, 15px);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption h3 {</span><br><span class="line">	margin-top: 35px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption span {</span><br><span class="line">	display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption a {</span><br><span class="line">	margin-top: 20px;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>
<p>然后返回上一级目录，现在在<code>themes/next/source/css</code>中，打开<code>main.styl</code>在尾部添加如下代码，将我们的CSS导入进来就好了！</p>
<p>一定要加注释！不然过几天都不知道这一段CSS是干什么用的。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">//Games</span><br><span class="line">@import "<span class="emphasis">_mycss/game";</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="自定义JS"><a href="#自定义JS" class="headerlink" title="自定义JS"></a>自定义JS</h2><p>同CSS一样，来到<code>themes/next/source/js</code>下，先创建一个我们自己的JS文件夹<code>game</code>，然后将我们预先下载好的<code>modernizr.custom.js</code>放在该目录下，准备工作就完毕了。</p>
<p>然后就需要导入JS文件，我们打开<code>themes/next/layout/_layout.swig</code>，在<code>&lt;head&gt;</code>标签下，添加JS路径，就大功告成了！</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/game/modernizr.custom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><p>最后附上我的HTML代码，目前只有一个框架，游戏还没有写<span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"game_img"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"grid cs-style-1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/2022/02/28/KMP/</url>
    <content><![CDATA[<p>一个人能走得多远并不取决于他顺境时能走的多块，而在于他逆境时能多快找回曾经的自己。——KMP</p>
<p>上面这句话还是蛮能概括KMP算法的精髓，不过貌似动态规划都能这么解释…</p>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>KMP 是由 Knuth、Morris 和 Pratt 所发明的字符串匹配算法，其核心就是当遇到字符不匹配时由于已经知道此前匹配过的字符，因此没有必要重头开始匹配！只要从<code>某个</code>已知字符起匹配即可。</p>
<p>具体做法就是先生成一个前后缀最长相等长度的数组，至于有什么用往下看就行了。</p>
<h4 id="前后缀最长相等长度"><a href="#前后缀最长相等长度" class="headerlink" title="前后缀最长相等长度"></a>前后缀最长相等长度</h4><p>这个一长串的名词是什么意思呢，举个例子，str = “123123”，那么它的前后缀最长相等长度就是 3（123 = 123），注意前后缀不能相等。</p>
<p>我们需要生成一个数组，这个数组存放着以 0 开头，以 <code>i-1</code> 结尾的子串的前后缀最长相等长度。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKCUnf.png" alt="image"></p>
<p>arr[0] 因为不存在在 0 之前的子串，因此没有意义，一律填 -1，而 arr[1] 也是固定填0（前后缀不能相等）。</p>
<p>后面需要经由状态转移变化而来，即该位前一位字符和之前的前后缀最长长度上的字符是否相等。</p>
<p>举个特殊的例子，<strong>abcabcb</strong>。<strong>c</strong> 前一位是 <strong>b</strong>，而 <strong>b</strong> 上的前后缀长度为 0，则需要判断 0 位置上的字符和 <strong>c</strong> 前一位的字符是否相等，a != c，所以填 0。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKFObV.png" alt="image"></p>
<p>一直直到下标 5，也就是字符 <strong>b</strong> 所在位置，此时 <strong>b</strong> 的前一位 <strong>a</strong> 和该 <strong>a</strong> 所对前后缀长度为 0 的下标上的 <strong>a</strong> 相等，这里填 0 + 1 = 1。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKkGa8.png" alt="image"></p>
<p>这里再详细讲一下最后一位是如何填的，下标为 6 的 b，前一位是下标为 5 的 a，而前后缀数组下标 5 上对应的是 2。</p>
<p>这个 2 则代表了蓝色区域等于绿色区域，<strong>因此我们只需要判断蓝色区域的下一个和绿色区域的下一个是否相同即可</strong>，这就是前后缀数组的强大之处了，这个2不仅代表了最长的前后缀，<strong>还代表了蓝色区域的下一位的下标</strong>，因为数组下标是从0开始计算的。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKA6mt.png" alt="image"></p>
<p>很自然地，我们判断了蓝色和绿色的下一位相等，那么该位上的前后缀长度就为上一位前后缀长度+1。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKkTIO.png" alt="image"></p>
<p>很明显，9 上的 <strong>b</strong> 不等于 4 上的 <strong>x</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKKToR.png" alt="image"></p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKMYm4.png" alt="image"></p>
<p>而下标 4 上的前后缀长度为 1，表明了下标 0 和 3 上字符相等，也就可以得到 0，3，5，8上的字符都相等，因此如果我们得到了下标 1 和下标 9 字符相等的话，不就仍然可以得到该位置之前的前后缀长度了吗，为前后缀数组下标为1的数值+1。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKMXhq.png" alt="image"></p>
<p>而如果我们一直迭代，到了0位置上的 -1也仍然没有发现匹配的字符，那么就填入-1 + 1 = 0，表示前后缀长度为 0。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getPrefix(<span class="keyword">char</span>[] pattern) {</span><br><span class="line">    <span class="keyword">int</span>[] prefix = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length];</span><br><span class="line">    prefix[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; pattern.length; i++) {</span><br><span class="line">        <span class="keyword">int</span> t = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (t != <span class="number">0</span> &amp;&amp; pattern[i - <span class="number">1</span>] != pattern[prefix[t]]) {</span><br><span class="line">            t = prefix[t];</span><br><span class="line">        }</span><br><span class="line">        prefix[i] = prefix[t] + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>==以上前后缀数组是求的 pattern 匹配子串的==</p>
<h4 id="子串匹配"><a href="#子串匹配" class="headerlink" title="子串匹配"></a>子串匹配</h4><p>母串：<strong>abcabcabcb</strong>（指针<strong>i</strong>）</p>
<p>子串：<strong>abcabcb</strong>（指针<strong>j</strong>）</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bK8iM6.png" alt="image"></p>
<p>前面都没有问题，直到 <strong>i</strong> 和 <strong>j</strong> 指向下标 6，a != b，但由于我们是知道前面六个字符是 <code>abcabc</code> 的（==体现在该位置的前后缀长度为 3，具体是什么字符不重要==），没有必要再从头继续匹配。</p>
<p><img src="https://s4.ax1x.com/2022/02/28/bK8Xlt.png" alt="image"></p>
<p>只需要将 <strong>j</strong> 退回到 3 即可，蓝色为已匹配，红色为待匹配。</p>
<p><strong>若 j 指向0，仍然匹配不成功，i++。</strong></p>
<p><img src="https://s4.ax1x.com/2022/02/28/bKYWSs.png" alt="image"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str1, String str2)</span> </span>{</span><br><span class="line">    <span class="keyword">char</span>[] chars1 = str1.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] chars2 = str2.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (chars2.length == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span>[] prefix = getPrefix(chars2);</span><br><span class="line">    <span class="keyword">int</span> l1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 &lt; chars1.length &amp;&amp; l2 &lt; chars2.length) {</span><br><span class="line">        <span class="keyword">if</span> (chars1[l1] == chars2[l2]) {</span><br><span class="line">            l1++;</span><br><span class="line">            l2++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (l2 == <span class="number">0</span>) {</span><br><span class="line">                l1++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                l2 = prefix[l2];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l2 == chars2.length ? l1 - l2 : -<span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：O（n）</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>串</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN算法</title>
    <url>/2021/09/12/KNN%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>KNN算法需要先给定一组带有标签的数据，需要预测的数据只需和现有的数据测出“距离”，选出最近的K个。</p>
<p>如果是分类问题就选择多数的那个样本类别，是回归问题就取平均值即可。</p>
<p>因此K的选择一般都是奇数，不会出现平票的情况。</p>
<p>注：KNN全称K-Nearest Neighbor，也叫作K近邻算法。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">x1 = np.random.random(<span class="number">100</span>) * <span class="number">10</span></span><br><span class="line">x2 = np.random.random(<span class="number">100</span>) * <span class="number">10</span></span><br><span class="line">y = (x1 &lt; <span class="number">5</span>) &amp; (x2 &lt; <span class="number">5</span>)</span><br><span class="line">y.dtype = np.int8</span><br><span class="line"></span><br><span class="line">plt.scatter(x1[y], x2[y], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x1[~y], x2[~y], color = <span class="string">"blue"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这里我随机创建了一组数据</p>
<p><img src="https://z3.ax1x.com/2021/09/12/4SxwnK.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">z_x1 = np.random.random() * <span class="number">10</span></span><br><span class="line">z_x2 = np.random.random() * <span class="number">10</span></span><br><span class="line">y = y.dtype.int8</span><br><span class="line"></span><br><span class="line">distance = np.sqrt(np.square(x1 - z_x1) + np.square(x2 - z_x2))</span><br><span class="line">distance_nearest = np.argsort(distance)</span><br><span class="line"></span><br><span class="line"><span class="string">''' distance_nearest</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62, 63, 51, 81, 60, 85, 73, 84, 70, 25, 59, 90,</span></span><br><span class="line"><span class="string">       29, 82, 46, 35, 38, 71, 61, 66, 49, 22, 76,  0, 68, 58,  6, 13,  8,</span></span><br><span class="line"><span class="string">       54, 98, 56, 80, 48, 78, 86, 10, 50, 44, 93, 16, 67, 92, 64, 41, 95,</span></span><br><span class="line"><span class="string">       91, 79, 83, 53,  9, 88,  1, 24, 45, 87, 89, 21, 34, 32, 33, 28, 72,</span></span><br><span class="line"><span class="string">       17, 69, 77, 40, 27, 39,  2,  7, 96, 65, 42, 14, 31,  4, 47, 97, 18,</span></span><br><span class="line"><span class="string">        3, 57, 36, 30, 37, 15, 43,  5, 26, 12, 74, 55, 99, 75, 19],</span></span><br><span class="line"><span class="string">      dtype=int64)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x1[y], x2[y], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x1[~y], x2[~y], color = <span class="string">"blue"</span>)</span><br><span class="line">plt.scatter(z_x1, z_x2, color = <span class="string">"cyan"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4p1ai4.png" alt=""></p>
<p>这里我随机生成了一个浅蓝色的点，显而易见，他应该是属于蓝色这一类的。</p>
<p>然后我们去求它和现有数据的欧拉距离$d = \sqrt{(x - x_1)^2 +(x-x_2)^2}$，当然曼哈顿距离或是闵可夫斯基距离。</p>
<p>取出前K个进行投票即可。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">distance = np.sqrt(np.square(x1 - z_x1) + np.square(x2 - z_x2))</span><br><span class="line">distance_nearest = np.argsort(distance)</span><br><span class="line"></span><br><span class="line"><span class="string">""" distance_nearest</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62, 63, 51, 81, 60, 85, 73, 84, 70, 25, 59, 90,</span></span><br><span class="line"><span class="string">       29, 82, 46, 35, 38, 71, 61, 66, 49, 22, 76,  0, 68, 58,  6, 13,  8,</span></span><br><span class="line"><span class="string">       54, 98, 56, 80, 48, 78, 86, 10, 50, 44, 93, 16, 67, 92, 64, 41, 95,</span></span><br><span class="line"><span class="string">       91, 79, 83, 53,  9, 88,  1, 24, 45, 87, 89, 21, 34, 32, 33, 28, 72,</span></span><br><span class="line"><span class="string">       17, 69, 77, 40, 27, 39,  2,  7, 96, 65, 42, 14, 31,  4, 47, 97, 18,</span></span><br><span class="line"><span class="string">        3, 57, 36, 30, 37, 15, 43,  5, 26, 12, 74, 55, 99, 75, 19],</span></span><br><span class="line"><span class="string">      dtype=int64)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" distance_nearest[:6]</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62], dtype=int64)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">counter = Counter(y[distance_nearest[:<span class="number">6</span>]])		<span class="comment"># Counter({0: 6})</span></span><br><span class="line">counter.most_common(<span class="number">1</span>)							<span class="comment"># [(0, 6)]</span></span><br><span class="line">counter.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]					<span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNN</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, neighbour</span>):</span></span><br><span class="line">        self.neighbour = neighbour</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.data = X</span><br><span class="line">        self.label = y</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X_test</span>):</span></span><br><span class="line">        distance = [np.square(x - x1) <span class="keyword">for</span> X_data <span class="keyword">in</span> self.data </span><br><span class="line">                    				  <span class="keyword">for</span> x,x1 <span class="keyword">in</span> <span class="built_in">zip</span>(X_data,X_test)]</span><br><span class="line">        distance = np.sqrt(np.<span class="built_in">sum</span>(distance))</span><br><span class="line">        distance_sorted_idx = np.argsort(distance)</span><br><span class="line">        distance_sorted_idx_top_k = distance_sorted_idx[:self.neighbour]</span><br><span class="line">        counter = Counter(self.label[distance_sorted_idx_top_k])</span><br><span class="line">        <span class="keyword">return</span> counter.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>数据使用我们之前随机出来的数据，测试结果与原结果一致</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># [100, 2]</span></span><br><span class="line">X = np.vstack([x1, x2])</span><br><span class="line">Z = np.vstack([z_x1, z_x2])</span><br><span class="line"><span class="comment"># [2, 100]</span></span><br><span class="line">X = np.transpose(X)</span><br><span class="line">Z = np.transpose(Z)</span><br><span class="line"></span><br><span class="line">knn_clf = KNN(<span class="number">3</span>)</span><br><span class="line">knn_clf.fit(X,y)</span><br><span class="line">knn_clf.transform(Z)			<span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2022/03/02/Manacher/</url>
    <content><![CDATA[<h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p><strong>Manacher</strong> 俗称“马拉车”，可以以 $O(n)$ 的代价求出以每一个位置为回文中心时的回文半径。</p>
<p>比较常见的暴力算法，即枚举以每一个点为回文中心向外拓展，直至不满足回文条件，时间复杂度为 $O(n^2)$。</p>
<p>那 <strong>Manacher</strong> 又是通过什么样的方式将复杂度降到了线性阶呢？</p>
<h4 id="1-预处理数组"><a href="#1-预处理数组" class="headerlink" title="1. 预处理数组"></a>1. 预处理数组</h4><p>众所周知，回文串可以看成是一个对称的字符串，即正着念倒着念都一样，但这就会引发一个问题，回文串长度为奇数和偶数时，其回文中心可能会落在某个<strong>字符</strong>上（奇数时），也可能落在两个<strong>字符中间</strong>（偶数时），诚然分类讨论可以解决，但代码量就是两倍，比较冗长。</p>
<p>这时便出现了预处理数组，具体的预处理手段说来也很简单，以一个==不会出现在字符串的字符==来分隔原字符串。</p>
<p><img src="https://s4.ax1x.com/2022/03/02/b8roVO.png" alt="image"></p>
<p>这样就不会出现回文半径在两个字符之间的情况了，能够很好地将奇偶情况结合起来，最后将预处理数组求出来的 <strong>回文半径/2</strong> 就是原来字符串的回文半径。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 在预处理字符串的头和尾插入不同的字符可以不用额外判断越界</span></span><br><span class="line"><span class="comment">// 当然插入头尾的这两个字符也不能是字符串中出现过的</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"$#"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">    sb.append(s.charAt(i) + <span class="string">"#"</span>);</span><br><span class="line">}</span><br><span class="line">len = sb.length();</span><br><span class="line">sb.append(<span class="string">"?"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-求回文半径"><a href="#2-求回文半径" class="headerlink" title="2. 求回文半径"></a>2. 求回文半径</h4><p>在求回文半径之前，要引入两个新的变量，一个是 <strong>right</strong> （拓展到过的最右下标），一个是 <strong>center</strong> （最右下标对应的回文中心）。</p>
<p>对于任何一个字符（下标为 <strong>i</strong>），必然满足以下两种情况。</p>
<ul>
<li><p><strong>i</strong> &gt; <strong>right</strong>，没有办法优化，只能暴力拓展。</p>
</li>
<li><p><strong>i</strong> &lt;= <strong>right</strong>，设 <strong>i’</strong> 为该点关于 <strong>center</strong> 对称的点，<strong>radius</strong> 为其最大回文半径。</p>
<ul>
<li><p>以 <strong>i’</strong> 为回文中心的回文串在 <strong>right</strong> 内，即 <strong>i + radius &lt; right</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/03/02/b8RQJO.png" alt="image"></p>
<p><strong>显然，此时 i 的最大回文半径等于 i’ 的最大回文半径，即 radius。</strong></p>
</li>
<li><p>以 <strong>i’</strong> 为回文中心的回文串在 <strong>right</strong> 外，即 <strong>i + radius &gt; right</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/03/02/b8RjfO.png" alt="image"></p>
<p><strong>此时，i 的最小回文半径为 right - i，至于多大，需要向外暴力拓展</strong>。</p>
</li>
<li><p>以 <strong>i’</strong> 为回文中心的回文串在 <strong>right</strong> 上 ，即 <strong>i + radius = right</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/03/02/b8W5UP.png" alt="image"></p>
<p><strong>此时，i 的最小回文半径为 radius，至于多大，需要向外暴力拓展。</strong></p>
</li>
</ul>
</li>
</ul>
<p>对于上述四种情况，我们可以统一一种写法。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// i &gt; right，最小回文半径为1，即它自己</span></span><br><span class="line"><span class="comment">// i &lt;= right:</span></span><br><span class="line"><span class="comment">// 如果以i'为回文中心的回文串在right内，radius[center - (i - center)] 会是最小的</span></span><br><span class="line"><span class="comment">// 如果以i'为回文中心的回文串在right外，right - i 会是最小的</span></span><br><span class="line"><span class="comment">// 如果以i'为回文中心的回文串在right上，两者相同</span></span><br><span class="line">radius[i] = i &lt;= right ? Math.min(radius[center - (i - center)], right - i) : <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>对四种情况都进行暴力拓展，虽然情况 <strong>2.1</strong> 不需要向外拓展，但即使拓展了也只会拓展一次，失败就退出了，而好处却可以缩短代码。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] radius = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span> center = -<span class="number">1</span>, right = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) {</span><br><span class="line">    radius[i] = i &lt;= right ? Math.min(radius[center - (i - center)], right - i) : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果未在首尾添加额外字符，这里需要判断越界</span></span><br><span class="line">    <span class="keyword">while</span> (sb.charAt(i + radius[i]) == sb.charAt(i - radius[i])){</span><br><span class="line">        radius[i]++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果新拓展的位置超过了原来的右边界，更新</span></span><br><span class="line">    <span class="keyword">if</span> (i + radius[i] - <span class="number">1</span> &gt; right){</span><br><span class="line">        right = i + radius[i] - <span class="number">1</span>;</span><br><span class="line">        center = i;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>回文串</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown入门</title>
    <url>/2021/08/20/MarkDown%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="MarkDown入门"><a href="#MarkDown入门" class="headerlink" title="MarkDown入门"></a>MarkDown入门</h1><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">```python</span><br><span class="line">    </span><br><span class="line">`行内代码块`</span><br></pre></td></tr></tbody></table></figure>
<p><strong>python代码</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><code>行内代码块</code></p>
<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最多支持六级标题</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><span id="more"></span>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">~~删除~~					<span class="comment"># 删除线</span></span><br><span class="line">**加粗**					<span class="comment"># 加粗</span></span><br><span class="line">*斜体*					<span class="comment"># 斜体</span></span><br><span class="line">***加粗+斜体***					<span class="comment"># 粗斜体</span></span><br><span class="line">&lt;code&gt;高亮&lt;/code&gt;					<span class="comment"># 高亮</span></span><br><span class="line">`$H_2O_2$`					<span class="comment"># 下标</span></span><br><span class="line">`$X^{a^<span class="number">2</span>}$`					<span class="comment"># 平方</span></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;					<span class="comment"># 下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斜体、加粗中*和_效果相同</span></span><br><span class="line"><span class="comment"># HTML语法可以在Markdown中使用</span></span><br></pre></td></tr></tbody></table></figure>
<p><del>删除</del>            </p>
<p><strong>加粗</strong>            </p>
<p><em>斜体</em>            </p>
<p><strong><em>加粗+斜体</em></strong>  </p>
<p><code>高亮</code></p>
<script type="math/tex; mode=display">H_2O_2</script><script type="math/tex; mode=display">X^{a^2}</script><p><u>下划线</u>        </p>
<h2 id="4-表情符号"><a href="#4-表情符号" class="headerlink" title="4.表情符号"></a>4.表情符号</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">:smile_cat: :smile: :laughing: :dizzy_face: :sob: :weary:</span><br></pre></td></tr></tbody></table></figure>
<p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name | price</span><br><span class="line">:---  | ---:			<span class="comment"># :在左边表示该列左对齐；在右边表示右对齐；左右都有居中对齐</span></span><br><span class="line">fried chicken | <span class="number">19</span></span><br><span class="line">cola | <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表格语法较为繁琐，建议右键插入表格</span></span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th style="text-align:right">price</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">fried chicken</td>
<td style="text-align:right">19</td>
</tr>
<tr>
<td style="text-align:left">cola</td>
<td style="text-align:right">5</td>
</tr>
</tbody>
</table>
</div>
<h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>三级引用</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以此类推</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h4 id="7-1无序列表"><a href="#7-1无序列表" class="headerlink" title="7.1无序列表"></a>7.1无序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">* 无序列表<span class="number">1</span></span><br><span class="line">+ 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上三种方式均可</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>无序列表1</li>
</ul>
<ul>
<li>无序列表2</li>
</ul>
<ul>
<li>无序列表3</li>
</ul>
<h4 id="7-2有序列表"><a href="#7-2有序列表" class="headerlink" title="7.2有序列表"></a>7.2有序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 有序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 数字\.来取消显示列表（用反斜杠进行转义）</span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一行中使用三个及以上的*即可</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h2 id="9-跳转"><a href="#9-跳转" class="headerlink" title="9.跳转"></a>9.跳转</h2><h4 id="9-1外部跳转"><a href="#9-1外部跳转" class="headerlink" title="9.1外部跳转"></a>9.1外部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[紫梦沁香的博客](https://紫梦沁香.com)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">紫梦沁香的博客</a></p>
<h4 id="9-2内部跳转"><a href="#9-2内部跳转" class="headerlink" title="9.2内部跳转"></a>9.2内部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[跳转至<span class="number">1.</span>代码块](<span class="comment">#1-代码块)</span></span><br><span class="line">    </span><br><span class="line">[跳转至Connor](<span class="comment">#Connor)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 空格用-代替，特殊字符直接删掉</span></span><br><span class="line"><span class="comment"># 也可以使用HTML标签中的id来进行跳转</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="#1-代码块">跳转至1.代码块</a></p>
<p><a href="#Connor">跳转至康娜酱</a></p>
<h4 id="9-3自动链接"><a href="#9-3自动链接" class="headerlink" title="9.3自动链接"></a>9.3自动链接</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&lt;https://紫梦沁香.com&gt;</span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 协议也写全，不然会有bug</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">https://紫梦沁香.com</a><br><a href="https://www.baidu.com">https://www.baidu.com</a></p>
<h2 id="10-图片"><a href="#10-图片" class="headerlink" title="10.图片"></a>10.图片</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">![康娜酱](Connor.jpg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径在source/_posts/同名文件夹</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" alt="康娜酱"></p>
<h2 id="11-内置标签"><a href="#11-内置标签" class="headerlink" title="11.内置标签"></a>11.内置标签</h2><h4 id="11-1文本居中"><a href="#11-1文本居中" class="headerlink" title="11.1文本居中"></a>11.1文本居中</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="blockquote-center"是必要的</span></span><br><span class="line">&lt;blockquote <span class="class"><span class="keyword">class</span>="<span class="title">blockquote</span>-<span class="title">center</span>"&gt;<span class="title">HTML</span>居中&lt;/<span class="title">blockquote</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签</span></span><br><span class="line"><span class="class">{% <span class="title">centerquote</span> %}标签居中{% <span class="title">endcenterquote</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签别名</span></span><br><span class="line"><span class="class">{% <span class="title">cq</span> %}标签别名居中{% <span class="title">endcq</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中</span></span><br><span class="line"><span class="class"># 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote class="blockquote-center">HTML居中</blockquote>

<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签别名居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<h4 id="11-2图片越界"><a href="#11-2图片越界" class="headerlink" title="11.2图片越界"></a>11.2图片越界</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="full-image"是必要的</span></span><br><span class="line">&lt;img src=<span class="string">"Connor.jpg"</span> <span class="class"><span class="keyword">class</span>="<span class="title">full</span>-<span class="title">image</span>" /&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签的方式失效了，可能换了其它的标签名</span></span><br><span class="line"><span class="class"># 看起来没啥效果</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" class="full-image" id="Connor"></p>
<h4 id="11-3Bootstrap-Callout"><a href="#11-3Bootstrap-Callout" class="headerlink" title="11.3Bootstrap Callout"></a>11.3Bootstrap Callout</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">{% note class_name %} Content (md partial supported) {% endnote %}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中class_name可以是以下值</span></span><br><span class="line"><span class="comment"># danger primary success info warning default</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>It’s danger </p>
          </div>
<div class="note primary">
            <p>It’s primary </p>
          </div>
<div class="note success">
            <p>It’s success </p>
          </div>
<div class="note info">
            <p>It’s info </p>
          </div>
<div class="note warning">
            <p>It’s warning </p>
          </div>
<div class="note default">
            <p>It’s default </p>
          </div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Navigation</title>
    <url>/2021/09/25/Navigation/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>一个APP不可能只有一个页面吧，这时候就需要 Navigation 和 Fragment 来帮助我们切换页面。效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4shGLT.gif" alt=""></p>
<p>Fragment 生命周期如下图所示。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yVf4U.png" alt=""></p>
<span id="more"></span>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>MainActivity 部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.navigation1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.NavController;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.fragment.NavHostFragment;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.NavigationUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);</span><br><span class="line">        NavController controller = navHostFragment.getNavController();</span><br><span class="line">        <span class="comment">// 显示导航栏上方返回按钮</span></span><br><span class="line">        NavigationUI.setupActionBarWithNavController(<span class="keyword">this</span>, controller);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 导航栏上方返回按钮事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span> </span>{</span><br><span class="line">        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);</span><br><span class="line">        NavController controller = navHostFragment.getNavController();</span><br><span class="line">        <span class="keyword">return</span> controller.navigateUp();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Navigation.xml 中可以写出各个 Fragment 的思维导图（具体跳转代码写在 java 文件中），也可以指定切换动画。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4s4SXV.png" alt=""></p>
<p>创建 Fragment 自动生成的代码就略去了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">// 跳转页面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        Button button = getView().findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(Navigation.createNavigateOnClickListener(R.id.action_secondFragment_to_firstFragment));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><p>（1） 使用Bundle</p>
<p>有时界面会伴随着数据一起跳转，这个时候就可以使用 Bundle 这个键值对存储数据进行传送了。</p>
<p>效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4ypemD.gif" alt=""></p>
<p>发送方 Fragment</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        Button button = getView().findViewById(R.id.button);</span><br><span class="line">        EditText editText = getView().findViewById(R.id.editTextTextPersonName);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                String text = editText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(TextUtils.isEmpty(text)){</span><br><span class="line">                    Toast.makeText(getActivity(), <span class="string">"请输入姓名"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putString(<span class="string">"name"</span>, text);</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_firstFragment_to_secondFragment, bundle);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>接收方 Fragment</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        TextView textView = getView().findViewById(R.id.textView);</span><br><span class="line">        textView.setText(getArguments().getString(<span class="string">"name"</span>));</span><br><span class="line">        Button button = getView().findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(Navigation.createNavigateOnClickListener(R.id.action_secondFragment_to_firstFragment));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 使用 ViewModel，效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/26/4yrL6g.gif" alt=""></p>
<p>FirstFragment部分。</p>
<p>要注意 onCreateView 是创建的时候调用，onViewCreated 是在 onCreateView 后被触发的事件，前后关系。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        MyViewModel myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br><span class="line">        FragmentFirstBinding binding = DataBindingUtil.inflate(inflater, R.layout.fragment_first, container, <span class="keyword">false</span>);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(getActivity());</span><br><span class="line">        binding.buttonNext.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_firstFragment_to_secondFragment);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        binding.seekBar.setProgress(myViewModel.getNumber().getValue());</span><br><span class="line">        binding.seekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">                myViewModel.getNumber().setValue(binding.seekBar.getProgress());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span>  binding.getRoot();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>SecondFragment部分。</p>
<p>两边获取 ViewModelProvider 都是使用的 <code>getActivity()</code> 而不是 <code>this</code>，因此请求的 ViewModel 是一个对象，这就是 Singleton 的含义，故能数据共享。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        FragmentSecondBinding binding = DataBindingUtil.inflate(inflater, R.layout.fragment_second, container, <span class="keyword">false</span>);</span><br><span class="line">        MyViewModel myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(getActivity());</span><br><span class="line">        binding.buttonBack.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_secondFragment_to_firstFragment);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> binding.getRoot();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="动画补间"><a href="#动画补间" class="headerlink" title="动画补间"></a>动画补间</h2><p>各个 Fragment 之间的切换动作。效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yCqfA.gif" alt=""></p>
<p>Slide_From_Left 进入动画。</p>
<p>fromXDelta：起始位置。（0% 表示 Fragment 中的位置）</p>
<p>toXDelta：结束位置。</p>
<p>duration：持续时间。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"-100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Slide_To_Right 移出动画。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>也可以定制其它花里胡哨的动画。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yPzg1.gif" alt=""></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"-100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>ViewModelSavedState（即使进程在后台被系统杀死数据也能保存下来）</title>
    <url>/2021/09/24/ViewModelSavedState%EF%BC%88%E5%8D%B3%E4%BD%BF%E8%BF%9B%E7%A8%8B%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%A2%AB%E7%B3%BB%E7%BB%9F%E6%9D%80%E6%AD%BB%E6%95%B0%E6%8D%AE%E4%B9%9F%E8%83%BD%E4%BF%9D%E5%AD%98%E4%B8%8B%E6%9D%A5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>正常情况下，如果一个进程被移到后台，且当前系统内存不足时，会有一定概率会将该进程杀死来释放内存资源，而被系统杀死时，ViewModel也会被删除，UI的数据就会遭到丢失。</p>
<p><img src="https://z3.ax1x.com/2021/09/24/4DxeOJ.png" alt=""></p>
<p>如下图所示，一旦切出后台进程被系统杀死数据就会丢失。</p>
<p>不过好在系统杀死进程时，会调用 onSaveInstanceState() 方法，顾名思义就是保存实例状态的，我们重写这个方法来保存我们的数据。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4Dzc8K.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/24/4Dz6C6.png" height="400px" width="230px" style="margin: 50px;">
</div>

<span id="more"></span>
<p><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="1-onSaveInstanceState"><a href="#1-onSaveInstanceState" class="headerlink" title="1. onSaveInstanceState"></a>1. onSaveInstanceState</h4><p>ViewModel部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="keyword">null</span>){</span><br><span class="line">            number = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            number.setValue(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        number.setValue(number.getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>MainActivity，21 - 23行是载入 savedInstanceState，28 - 32是写入 savedInstanceState。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.example.viewmodelsavedstate.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    MyViewModel myViewModel;</span><br><span class="line">    ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SAVED_KEY_NAME = <span class="string">"number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        <span class="keyword">if</span>(savedInstanceState != <span class="keyword">null</span>){</span><br><span class="line">            myViewModel.getNumber().setValue(savedInstanceState.getInt(SAVED_KEY_NAME));</span><br><span class="line">        }</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(<span class="meta">@NonNull</span> Bundle outState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        outState.putInt(SAVED_KEY_NAME, myViewModel.getNumber().getValue());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-SavedStateHandle"><a href="#2-SavedStateHandle" class="headerlink" title="2. SavedStateHandle"></a>2. SavedStateHandle</h4><p>ViewModel部分，使用 SavedStateHandle 来代替 MutableLiveData 存储数据，同时在创建 ViewModel 时将SavedStateHandle 传入供后续使用。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateHandle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> SavedStateHandle handle;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span><span class="params">(SavedStateHandle handle)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.handle = handle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!handle.contains(MainActivity.SAVED_KEY_NAME)){</span><br><span class="line">            handle.set(MainActivity.SAVED_KEY_NAME, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> handle.getLiveData(MainActivity.SAVED_KEY_NAME);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        getNumber().setValue(getNumber().getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>MainActivity部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.viewmodelsavedstate.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    MyViewModel myViewModel;</span><br><span class="line">    ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SAVED_KEY_NAME = <span class="string">"number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2021/12/15/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算是程序设计中对位模式按位或二进制数的一元和二元操作。</p>
<p>一般情况下，位运算和加减运算的运算速度相当，且极大程度上快于乘除运算（10倍）。</p>
<p>很多编程语言都有位运算符，Java语言也不例外。在Java语言中，提供了7种位运算符，分别是 <code>&amp;</code>（与）、<code>|</code>（或）、<code>^</code>（异或）、<code>\~</code>（非）、<code>&lt;&lt;</code>（左移）、<code>&gt;&gt;</code>（带符号右移）和<code>&gt;&gt;&gt;</code>（无符号右移）。这些运算符当中，仅有 <strong>~</strong> 是单目运算符，其他运算符均为双目运算符。</p>
<div class="note danger">
            <p>位运算只能对 <strong>long</strong>、<strong>int</strong>、<strong>short</strong>、<strong>byte</strong> 和 <strong>char</strong> 这五个整型类型数据进行运算，不能用于 double、float、boolean 以及其他 引用类型。</p>
          </div>
<h3 id="一、按位与运算"><a href="#一、按位与运算" class="headerlink" title="一、按位与运算"></a>一、按位与运算</h3><p>按位与运算符的写法是一个 <strong>&amp;</strong> 符号，规则如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSCBYn.png" alt="image"></p>
<p>运算规则总结成一句话就是：如果两个二进制位上的数都是1，那么运算结果为1，其他情况运算结果均为0。下面举例说明按位与运算符的运算过程，我们用数字5和6进行按位与运算。这个过程可以用下图表示：</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSCL0e.png" alt="image"></p>
<p>可以使用与运算来判断一个数是否是奇数。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    System.out.println((<span class="number">788</span> &amp; <span class="number">1</span>) == <span class="number">1</span>);	<span class="comment">// false</span></span><br><span class="line">    System.out.println((<span class="number">789</span> &amp; <span class="number">1</span>) == <span class="number">1</span>);	<span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="二、按位或运算"><a href="#二、按位或运算" class="headerlink" title="二、按位或运算"></a>二、按位或运算</h3><p>按位或运算符的写法是一个 <strong>|</strong> 符号，规则如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSPF0g.png" alt="image"></p>
<p>运算规则概括成比较好记的一句话就是：两个二进制位上的数字如果都为0，那么运算结果为0，否则运算结果是1。同按位与运算一样，符号位也要参与运算。下面我们还是用5和6为例来讲解一下按位或的运算过程，如下图所示：</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSC5f1.png" alt="image"></p>
<p><br></p>
<h3 id="三、按位异或运算【重点】"><a href="#三、按位异或运算【重点】" class="headerlink" title="三、按位异或运算【重点】"></a>三、按位异或运算【重点】</h3><p>按位或运算符的写法是一个 <strong>^</strong> 符号，规则如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSPBHe.png" alt="image"></p>
<p>如上图，运算规则为：两个二进制位上的数字如果相同，则运算结果为0，如果两个二进制位上的数字不相同，则运算结果为1。下面我们还是用5和6为例来讲解一下异或的运算过程，如下图：</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSPc9I.png" alt="image"></p>
<h4 id="异或运算的性质"><a href="#异或运算的性质" class="headerlink" title="异或运算的性质"></a>异或运算的性质</h4><p><strong>$I$、异或运算满足交换律。</strong></p>
<p>也就是说，a \^ b 与 b \^ a是等价的，虽然 a 和 b 交换了位置，但还是会运算出相同的结果。这个规律还可以推广到 N 个操作数，也就是说，如果有N个变量都参与了异或运算，那么它们的位置无论如何交换，运算的结果都是相同的。</p>
<p><strong>$II$、任何两个相同的数字进行异或运算，所得到的结果为 0。</strong></p>
<p>因为两个相同的数字，换算成补码后，每个二进制位上的数也都相同，这样在进行异或运算时，按照运算规则，每个二进制位上得到的运算结果也都是 0，这 N 个 0 所组成的二进制串就是数字 0 的补码。</p>
<ul>
<li>可以判断两数是否相等：a \^ b = 0  -&gt;  a = b。</li>
<li>快速清零：a ^= a。</li>
</ul>
<p><strong>$III$、对于任意一个二进制位来说，这个位上的数与 0 进行异或运算，运算结果不变。</strong></p>
<p>0 ^ 1 = 1，0 ^ 0 = 0，结果不变。</p>
<p><strong>$IV$、对于任意一个二进制位来说，这个位上的数与 1 进行异或运算，运算结果取反。</strong></p>
<p>1 ^ 0 = 1，1 ^ 1 = 0，结果取反。</p>
<p><strong>$V$、对于任意两个整数 a 和 b，a \^ b \^ a = b 。</strong></p>
<p>a ^ b ^ a = a ^ a ^ b = 0 ^ b = b。</p>
<p>这个特性在加密运算方面有着很普遍的应用。我们可以把 a 当作要加密的数据，而把 b 当作密钥。a 异或 b 就是把 a 用密钥 b 进行了加密操作，当需要解密时，仍然以 b 作为密钥，再进行一次异或就实现了解密。</p>
<p><br></p>
<h3 id="四、按位取反运算"><a href="#四、按位取反运算" class="headerlink" title="四、按位取反运算"></a>四、按位取反运算</h3><p>按位或运算符的写法是一个 <strong>~</strong> 符号，规则如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSAdGd.png" alt="image"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> b = ~a;</span><br><span class="line">        System.out.println(a);  <span class="comment">// 5</span></span><br><span class="line">        System.out.println(b);  <span class="comment">// -6</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>首先把数字5转换成补码形式，之后把每个二进制位上的数字进行取反，如果是0就变成1，如果1就变成0，经过取反后得到的二进制串就是运算结果，这个运算结果被还原为十进制数是-6。</p>
<p><br></p>
<h3 id="五、左移运算符"><a href="#五、左移运算符" class="headerlink" title="五、左移运算符"></a>五、左移运算符</h3><p>按位或运算符的写法是一个 <strong>&lt;&lt;</strong> 符号，规则如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSER0K.png" alt="image"></p>
<p>左移运算有乘以2的N次方的效果。一个数向左移动1位，就相当于乘以2的1次方，移动两位就相当于乘以2的2次方，也就是乘以4。<strong>位移操作在实际运算时远远快于乘法操作</strong>，所以在某些对运算速度要求非常高的场合，可以考虑用左移代替乘以2的N次方的乘法操作。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 可实际测试下来两者的速度几乎一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        <span class="keyword">int</span> a = i * <span class="number">1024</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(System.currentTimeMillis() - start);	<span class="comment">// 1031</span></span><br><span class="line"></span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        <span class="keyword">int</span> a = i &lt;&lt; <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    System.out.println(System.currentTimeMillis() - start);	<span class="comment">// 1022</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>但当位移的位数很多时，导致最左边的符号位发生变化，就不再具有乘以2的N次方的效果了。比如十进制的5转换为补码形式是：前面29个0最后3位是101，如果移动29位，那么最前面的符号位就变成了1，<strong>此时运算的结果就成为了一个负数</strong>，不再是5乘以2的29次方的乘法结果。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    System.out.println(a &lt;&lt; <span class="number">29</span>);	<span class="comment">// -1610612736</span></span><br><span class="line">    a = -<span class="number">5</span>;</span><br><span class="line">    System.out.println(a &lt;&lt; <span class="number">29</span>);	<span class="comment">// 1610612736</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于 <strong>byte/short/int</strong> 三种类型的数据，Java 语言最多支持31位的位移运算（包括下面的右移运算）。如果位移数超过31，则虚拟机会对位移数按连续减去32，<strong>直到得到一个小于32并且大于等于0的数</strong>，然后以这个数作为最终的位移数。</p>
<p>例如对 int 型变量进行位移97位的操作，虚拟机会首先对97连续减去3个32，最终得到数字1，实际进行位移运算时只对变量位移1位。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a &lt;&lt; <span class="number">97</span>);	<span class="comment">// 4</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>而对于 long 类型的数据而言，最多支持63位的位移运算，如果位移数超过63，则连续减去64，以最终得到的小于64并且大于等于0的数作为位移数。小伙伴们可以试一下数字5左移32位是什么结果。</p>
<p><br></p>
<h3 id="六、带符号右移运算符"><a href="#六、带符号右移运算符" class="headerlink" title="六、带符号右移运算符"></a>六、带符号右移运算符</h3><p>右移运算分为两种，分别是带符号右移和无符号右移。首先我们来说说带符号右移运算符。带符号右移运算符的写法是 <strong>&gt;&gt;</strong>，与左移运算符的方向恰好相反。</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSZ3Mn.png" alt="image"></p>
<p>带符号右移运算和左移运算类似，具有 <strong>/2</strong> 的功能，小数会被舍弃。</p>
<p><strong>但是对于负数而言，带符号右移的效果分为两种情况，我们分别来讨论。</strong></p>
<p>如果这个负数是“2的N次方”的整数倍，那么带符号右移N位的效果也等于除以2的N次方。举个例子：我们还是把N的值设为3，如果对于“-16”来说，它是“2的3次方”的整数倍，那么带符号右移3位的结果是-2，这个结果相当于“-16除以2的3次方”。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = -<span class="number">16</span>;</span><br><span class="line">    System.out.println(a &gt;&gt; <span class="number">3</span>);	<span class="comment">// -2</span></span><br><span class="line">    System.out.println(a / <span class="number">8</span>);	<span class="comment">// -2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>而如果这个负数不是“2的N次方”的整数倍，那么右移N位之后，是在除以2的N次方的结果之上还要减去1。比如，对于-15来说，它不是“2的3次方”的整数倍，那么带符号右移3位的结果是-2，这个运算结果其实就是“-15被2的3次方整除再减去1”（减1是因为右移的时候丢弃了位数是 1 的位）。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> a = -<span class="number">15</span>;</span><br><span class="line">    System.out.println(a &gt;&gt; <span class="number">3</span>);	<span class="comment">// -2</span></span><br><span class="line">    System.out.println(a / <span class="number">8</span>);	<span class="comment">// -1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>带符号右移的操作可以保证移动之前和移动之后数字的正负属性不变，原来是正数，不管移动多少位，移动之后还是正数，原来是负数，移动之后还是负数。</p>
<p><strong>对于任何 一个byte、short 或者 int 类型的数据而言，带符号右移31位之后，得到的必然是 0 或者是 -1。对于 long 类型的数据而言，带符号右移 63 位之后，得到的也必然是 0 或者是 -1。</strong></p>
<p><br></p>
<h3 id="七、无符号右移运算符"><a href="#七、无符号右移运算符" class="headerlink" title="七、无符号右移运算符"></a>七、无符号右移运算符</h3><p>无符号右移运算符的写法是 <strong>&gt;&gt;&gt;</strong>，带符号右移的运算规则与无符号右移的运算规则差别就在于：无符号右移在二进制串移动之后，空位由0来补充，与符号位是0还是1毫无关系，如下图：</p>
<p><img src="https://s4.ax1x.com/2021/12/15/TSmzV0.png" alt="image"></p>
<div class="note danger">
            <p>进行位运算的时候，最左边的符号位也是要参与运算的。</p>
          </div>
]]></content>
  </entry>
  <entry>
    <title>制作俄罗斯方块</title>
    <url>/2021/08/29/%E5%88%B6%E4%BD%9C%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前游戏标签下只是大致做了个目录，游戏实质内容并没有实现，最近又超级不想学<code>Deep Learning</code>，就来把这个俄罗斯方块给写了吧，后续的游戏等有空再写（下次一定）。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG3GOx.jpg" alt="empty"></p>
<span id="more"></span>
<p><br></p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>写游戏嘛，肯定要先把大致的框架和要实现的功能想好。于是我就画了个比较简略的图，不过应该还是挺清楚的，还附加了尺寸，没提到的部分就自由发挥吧，怎么舒服怎么来。</p>
<p>其中每个俄罗斯方块都是由四个小方块组成，每个小方块都是32px * 32px的，一共19行，12列。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGVaT.jpg" alt="design"></p>
<p>实际HTML实现效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGQMR.jpg" alt="efficiency"></p>
<p>然后设计每一个俄罗斯方块，由于考虑到旋转的问题，这里将他们都用一个大的矩形框起来。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGBD3V.jpg" alt="tetrisCube"></p>
<p>平移就不用多说了，我就着重说下旋转吧！</p>
<p>下面是L型的旋转图示，从左至右，从上至下，我把对应方块的X，Y坐标也写在旁边了。</p>
<p>仔细观察的话可以发现，旋转之后图形的Y就是旋转之前图形的X，而旋转之后图形的X就是旋转之前的（3 - Y）。</p>
<p>不过需要注意的是，旋转也会越界，需做一定的判断。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGzkdO.jpg" alt="rotate"></p>
<p><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>设计好实现的框架后，再添加亿点代码就完事了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>这里就不把代码贴出来了，没怎么写注释，让我再看一遍也费劲，相信聪明的人看了上面的设计图就会有思路了。</p>
<p>从昨天下午写到今天下午，一半的时间都在改bug，不是很会用JS的debug。</p>
<p><img src="https://z3.ax1x.com/2021/08/30/htyG1s.gif" alt="code"></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
  <entry>
    <title>制作贪吃蛇</title>
    <url>/2021/09/10/%E5%88%B6%E4%BD%9C%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>直接步入正题，由于游戏本身游玩以及操作比较简单，因此这次的游戏界面会有点简陋，实在是不知道该加啥东西了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>游戏主体部分是宽为650px，高为450px，而小蛇的每一格身体都是25 * 25的，因此整个游戏界面有18行，26列。</p>
<p>这一次我会尽量把每一个功能的代码都记录下来，一是因为这个贪吃蛇代码肯定比俄罗斯方块要少，二是因为，不写代码的话，我这篇博客已经结束了，这也太短了吧喂！</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjBnGF.jpg" alt=""></p>
<span id="more"></span>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>HTML代码如下，布局都是采用position：absolute的方式，因为部件比较少，这样代码也不会很繁琐，而且很简单。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./snake.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">#000000</span> <span class="number">3.5px</span> solid;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.container</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">570px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">707px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin-top</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.gameDiv</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">650px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">p</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.length</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.score</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">h2</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">305px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.deflory</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.snakeCube</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"length"</span>&gt;</span></span><br><span class="line">				长度：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span></span><br><span class="line">				分数：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gameDiv"</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/Deflory.png"</span> <span class="attr">class</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-移动贪吃蛇"><a href="#1-移动贪吃蛇" class="headerlink" title="1. 移动贪吃蛇"></a>1. 移动贪吃蛇</h4><p>（1） 键盘监听</p>
<p>首先需要让小蛇动起来，因此就会需要键盘监听事件。</p>
<p>凡事都不能一口吃成一个大胖子，不要急着写移动的功能，先看看能否监听到键盘。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ROWS = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> COLS = <span class="number">26</span></span><br><span class="line"><span class="keyword">var</span> SNAKE_SIZE = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">	onKeyDown();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// A 和 ←</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// S 和 ↓</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// D 和 →</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>稍微按了几下，浏览器的输出也正常，接下来就开始写移动的函数了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjfPHg.jpg" alt="console"></p>
<p>但在此之前，还有一件事。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjIFs0.png" alt="havesomethingmore"></p>
<p>（2） 创建小蛇</p>
<p>我们没有东西去移动啊！所以要写一个小蛇初始化的函数。</p>
<p>此处snakeCube类我只写了个position：absolute，不然每次写挺麻烦的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建初始的贪吃蛇</span></span><br><span class="line"><span class="function">function <span class="title">createSnake</span><span class="params">()</span></span>{</span><br><span class="line">	game_div = document.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 蛇头</span></span><br><span class="line">	snakeHead = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">	snakeHead.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/right.png"</span>)</span><br><span class="line">	snakeHead.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	game_div.appendChild(snakeHead);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 蛇身×3</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</span><br><span class="line">		snakeBody = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">		snakeBody.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>)</span><br><span class="line">		snakeBody.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">		game_div.appendChild(snakeBody);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果单单只是创建元素，而不给它“定位”，也就是设定top和left值，他显示是会叠在一起的。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjozgs.jpg" alt="error"></p>
<p>（3） 定位</p>
<p>综上所述，还有一件事，再写一个定位的函数。不要忘了在createSnake的末尾加上这个定位函数。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjogHK.jpg" alt=""></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="keyword">var</span> snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">var</span> len = snakes.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjbUM9.jpg" alt=""></p>
<p>（4） 移动</p>
<p>好了，历经千辛万苦，终于可以准备让这个小蛇动起来了。</p>
<p>先来解释下这里的逻辑吧，想想贪吃蛇是怎么移动的呢？</p>
<p>是不是头先动，然后紧接着第一节身体移动到原先头的位置，第二节身体移动到原先第一节身体的位置。因此我们只需要把snakeLocation数组从后往前覆盖就行了（不能从先往后噢，想想就明白了）。</p>
<p>此外这里x，y都是单位长度，因此还要乘以蛇的大小。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 贪吃蛇移动，x为横向，y为纵向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">x, y</span>)</span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=snakeLen-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--){</span><br><span class="line">		snakeLocation[i][<span class="number">0</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">		snakeLocation[i][<span class="number">1</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	}</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = snakeLocation[<span class="number">0</span>][<span class="number">0</span>] + SNAKE_SIZE * x;</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = snakeLocation[<span class="number">0</span>][<span class="number">1</span>] + SNAKE_SIZE * y;</span><br><span class="line">	snakeLocate();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>好像略微有些惊悚嘛，不过没关系，修改一下移动时头部的方向就行。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjO7RO.png" alt=""></p>
<p>只需要在移动前修改方向变量，定位时判断方向即可，这里代码太多就放出来一部分。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line"><span class="comment">// 键盘监听事件，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">				move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;snakeLen;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			snakes[<span class="number">0</span>].setAttribute(<span class="string">"src"</span>,<span class="string">"./img/up.png"</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjzREj.gif" alt=""></p>
<h4 id="2-碰撞判定"><a href="#2-碰撞判定" class="headerlink" title="2. 碰撞判定"></a>2. 碰撞判定</h4><p>（1） 自身碰撞判定</p>
<p>贪吃蛇碰到自己身体就应该结束游戏了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSKsS.png" alt=""></p>
<p>自身碰撞判定无非就是判断头和身体有没有碰撞，一个for-loop就行了。</p>
<p>当然，我们还需要一个flag，来判断当前是否已经结束，默认是false。</p>
<p>函数实现起来比较轻松，注意每次move都需判断，而且得在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 自身碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchItself</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;snakeLen;i++){</span><br><span class="line">		<span class="keyword">if</span>(left == snakeLocation[i][<span class="number">0</span>] &amp;&amp; top == snakeLocation[i][<span class="number">1</span>]){</span><br><span class="line">			gameover = <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后还得修改一下键盘监听事件，只有gameover = false时才监听移动事件。</p>
<p>这里我多添加了两个方法，一会儿实现。</p>
<p>一个是gameover = true时的restart()；一个是gameover = false时的pause()。</p>
<p>前者用于重新开始，后者用于游戏暂停</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">if</span>(!gameover){</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// W 和 ↑</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// A 和 ←</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"left"</span>;</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// S 和 ↓</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"down"</span>;</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// D 和 →</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					pause();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					restart();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 边框碰撞判定</p>
<p>贪吃蛇是不能穿越这个游戏的边框的，至于碰到边框是会死，还是从另一边出来可以自由发挥。</p>
<p>我这里实现的是从另一头出来的方式。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSWLD.png" alt=""></p>
<p>类似自身碰撞判定，也是要在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 边界碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crashBoundary</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(left &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">625</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(left &gt; <span class="number">625</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">425</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &gt; <span class="number">425</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvwSEV.gif" alt=""></p>
<h4 id="3-游戏结束"><a href="#3-游戏结束" class="headerlink" title="3.游戏结束"></a>3.游戏结束</h4><p>（1） 计时器</p>
<p>首先，我们的小蛇不能自己动，需要设置一个计时器。</p>
<p>因为需要暂停和继续游戏，所以我们在方法中判断，如果当前有计时器就取消它，没有则设置一个。</p>
<p>记得在初始化的时候调用一下。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 暂停/继续游戏</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>暂停的时候，屏幕上空荡荡的也不大好，给人有一种没有暂停的错觉。所以加一个div，美化下暂停的界面。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.paused</span>{</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"paused"</span>&gt;</span></span><br><span class="line">    按下 SPACE 继续游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvWBxx.png" alt=""></p>
<p>在修改下上面pause方法，暂停的时候显示提示，继续时隐去提示。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"block"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 游戏结束</p>
<p>在此之前，我又写了个div，可以先看看效果。同暂停类似，只需要将它的display值默认设为none，待到游戏结束时在改成block即可。</p>
<p>处于美观，我将游戏背景颜色改成了深灰色。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.gameover</span>{</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"gameover"</span>&gt;</span></span><br><span class="line">    游戏结束</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    按下 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#ee3000"</span>&gt;</span>SPACE<span class="tag">&lt;/<span class="name">font</span>&gt;</span> 重新开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">final</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvgmVJ.png" alt=""></p>
<p>（3） 重新开始</p>
<p>重新开始需要把所有的变量都重置，然后删除游戏中的贪吃蛇，再把游戏结束的提示隐去，然后和init()一样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 重新开始</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params"></span>)</span>{</span><br><span class="line">	snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line">	snakeLen = <span class="number">4</span>;</span><br><span class="line">	snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">	gameover = <span class="literal">false</span>;</span><br><span class="line">	timer = <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> children = gameDiv.children;</span><br><span class="line">	<span class="keyword">var</span> childrenLen = children.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=childrenLen-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">		gameDiv.removeChild(children[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>; </span><br><span class="line">	createSnake();</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-分数系统"><a href="#4-分数系统" class="headerlink" title="4. 分数系统"></a>4. 分数系统</h4><p>最后就是小蛇蛇吃的食物啦。</p>
<p>（1） 食物是在屏幕中随机出现，而且吃完一个就会出现下一个。</p>
<p>创建食物同创建小蛇类似，只是多了个random函数，要确保食物随机在游戏界面中。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	foodLeft = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * COLS);</span><br><span class="line">	foodTop = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * ROWS);</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> food = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	food.className = <span class="string">"foodCube"</span>;</span><br><span class="line">	food.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/food.png"</span>);</span><br><span class="line">	food.style.top = foodTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	food.style.left = foodLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	gameDiv.appendChild(food);</span><br><span class="line">	updateData();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 吃一个长度+1，分数+10，且小蛇的身体+1。</p>
<p>蛇头碰到食物即吃掉，删除该img，然后生成新的食物；</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 吃掉食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(foodLeft == left &amp;&amp; foodTop == top){</span><br><span class="line">		snakeLen++;</span><br><span class="line">		score += <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">var</span> food = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"foodCube"</span>)[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">		gameDiv.removeChild(food);</span><br><span class="line">		createFood();</span><br><span class="line">		grow();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 长身体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grow</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> body = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	body.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	body.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当前最后一个身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> lastTop = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">var</span> lastLeft = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 新的身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> bodyTop = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> bodyLeft = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			bodyTop = lastTop + <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">			bodyTop = lastTop - <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	body.style.top = bodyTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	body.style.left = bodyLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	snakeLocation[snakeLen-<span class="number">1</span>] = [bodyLeft, bodyTop];</span><br><span class="line">	gameDiv.appendChild(body);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>之后更新界面分数</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 更新界面中分数和长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> scoreH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"score"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> lengthH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"length"</span>)[<span class="number">0</span>];</span><br><span class="line">	scoreH1.innerHTML = <span class="string">"分数："</span> + score;</span><br><span class="line">	lengthH1.innerHTML = <span class="string">"长度："</span> + snakeLen;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（3） 分数越高，小蛇移动速度越快。</p>
<p>三句代码即可，记得添加到适当的位置，这里就不给出来了。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">speed += score / <span class="number">10</span> * <span class="number">0.05</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}, <span class="number">100</span> / speed);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-游戏性"><a href="#5-游戏性" class="headerlink" title="5. 游戏性"></a>5. 游戏性</h4><p>至此，贪吃蛇的代码已全部写完，之后可以按自己的想法添加一些游戏的规则，例如可以添加一个红色果实的设定，效果是绿色果实的三倍，出现概率10%。我就不实现了，现在已经凌晨了，累了。</p>
<p>游戏运行画面如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/11/hvLwJf.gif" alt=""></p>
<p>以后写小游戏就不写这么详细了，这也太累了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/2022/03/04/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>单调栈，顾名思义，在栈中维持了一个单调性，再配合其特有的先进后出的性质，可以很容易求出<strong>在某个数的左边和右边离它最近的大于（或小于）它的数</strong>。</p>
<h4 id="递增栈"><a href="#递增栈" class="headerlink" title="递增栈"></a>递增栈</h4><p>这里使用递增的栈作为例子，递减同理。</p>
<p>有数组 <strong>arr = [3, 5, 6, 2, 9, 4, 1]</strong>，现在要求出距离每个点左边和右边最近的小于它的数的下标。</p>
<p>开始时，<strong>栈空</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/03/04/ba2lN9.png" alt="image"></p>
<p>秉承着递增的规则，只要当前数大于栈顶元素，直接入栈。</p>
<p>==PS：说是这么说，但实际上都是放入该数的下标，因为下标所蕴含的信息可比单单一个数多，下标只需要通过原数组就能转换为其中的元素了。==</p>
<p>当遍历到 <strong>2</strong> 的时候，栈顶元素为 <strong>6（arr[2]）</strong> ，此时若将 <strong>2</strong> 入栈则不满足单调递增，也就是说，这个 <strong>2</strong> 是栈顶元素 <strong>6</strong> 的右边离他最近且比他小的数。</p>
<p><img src="https://s4.ax1x.com/2022/03/04/ba2fEQ.png" alt="image"></p>
<p>将栈顶元素弹出，并在 <strong>right</strong> 数组中记录 <strong>right[2] = 3</strong>，因为我们是依据递增性入栈，栈顶元素最大，在其被弹出后，新的栈顶成为了最大的元素，也就是老栈顶左边的离它最近且小于它的元素，记 <strong>left[2] = 1</strong>。</p>
<p><img src="https://s4.ax1x.com/2022/03/05/bdgHaQ.png" alt="image"></p>
<p>之后新上位的 <strong>5</strong> 接着和 <strong>2</strong> 作比较，循环往复，直至可以将 <strong>2</strong> 入栈且能维持递增性。</p>
<p>==注意：当栈顶元素弹出后，栈空，说明左边没有比其更小的数了，用 -1 表示。==</p>
<p><img src="https://s4.ax1x.com/2022/03/05/bd21JA.png" alt="image"></p>
<p><strong>right[i] </strong>很好理解，毕竟只要遇见降序就会被记录下来，可 <strong>left[i]</strong> 要怎么理解呢？怎么能保证次栈顶是栈顶左侧离它最近且小于它的数呢？</p>
<p>可以看一下下面的图，绿线处代表出现<strong>递减</strong>，在其左侧且高于绿线的点会被弹出，并记录答案，而低于绿线的点因为还没有发现右侧离它最近且小于它的点，按兵不动。</p>
<p><img src="https://s4.ax1x.com/2022/03/05/bdWcaF.png" alt="image"></p>
<p>将该点从栈中弹出后并不会对后续答案产生纰漏，<strong>因为在该点以前的点都比该点小（该点以前的点不会拿该点当 right），且在该点后面位置出现了比该点更小的数（该点以后的点不会拿该点当 left），而该点也找到了其左右答案。</strong></p>
<p><img src="C:\Users\11499\AppData\Roaming\Typora\typora-user-images\image-20220305110114472.png" alt="image-20220305110114472"></p>
<p>后续同理。</p>
<p><img src="https://s4.ax1x.com/2022/03/05/bd4sqP.png" alt="image"></p>
<p>最后当数组遍历完成，而栈中还有元素时，说明此时栈中的元素右侧都没有比它小的数了，左侧比它小的数就是被其压在下面的数。</p>
<p><img src="https://s4.ax1x.com/2022/03/05/bd5Ue0.png" alt="image"></p>
<p><strong>==同理，递减栈可用于求出距离每个元素最近且大于其的元素。==</strong></p>
]]></content>
  </entry>
  <entry>
    <title>多项式回归</title>
    <url>/2021/09/27/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>如果你的数据比直线更复杂怎么办？例如抛物线。显然 <a href="/2021/09/13/线性回归">线性回归</a> 无法胜任这个工作，但我们只需要稍加修改，将每个特征的幂次方作为一个新特征即可，大致与<code>线性回归</code>类似，不过是多元一次和多元多次的区别。</p>
<p>线性回归假设目标拟合曲线函数为$y = w_1x_1 + w_2x_2 + w_3x_3 + … + b$，其中 $w_n$ 为系数 $x_n$ 为特征。</p>
<p>而多项式回归假设目标拟合曲线为$y = w_1x_1^n + w_2x_1^{n-1}x_2 + w_3x_1^{n-2}x_2^2 + … + w_nx_2^n$，这里出于简便只写了两个未知数的情况。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里我用的是三次函数的图像外加了点噪声，用<code>线性回归</code>肯定是拟合不了的。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">2.6</span> * x ** <span class="number">3</span> - <span class="number">3.14</span> * x ** <span class="number">2</span> - <span class="number">8.8</span> * x + np.random.normal(<span class="number">0</span>, <span class="number">700</span>, (<span class="number">200</span>, ))</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/27/4RC9un.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = x.reshape([-<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">X = np.hstack([X ** <span class="number">3</span>, X ** <span class="number">2</span>, X])</span><br><span class="line">X_b = np.hstack([np.ones([<span class="built_in">len</span>(y), <span class="number">1</span>]), X])</span><br><span class="line"><span class="comment"># X [200, 3]</span></span><br><span class="line"><span class="built_in">print</span>(X.shape)</span><br></pre></td></tr></tbody></table></figure>
<p>如算法思想所述，梯度下降的代码是没有改变的，只是添加了特征的幂指数作为额外的特征值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">    <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X_b, y, theta, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">        gradient = DJ(X_b, y, theta)</span><br><span class="line">        last_theta = theta</span><br><span class="line">        theta = theta - eta * gradient</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i_iter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">initial_theta = np.zeros(X_b.shape[<span class="number">1</span>])</span><br><span class="line">theta = gradient_descent(X_b, y, initial_theta, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>得出 theta = array([-12.65120346,   2.89719563,  -3.12234806, -15.72650818])</p>
<p>也基本对应了我预设的函数系数[2.6, -3.14, -8.8]</p>
<p>注：theta 每一项分别对应了截距，$x^3$ 的系数，$x^2$ 的系数，$x$ 的系数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pred_y = theta[<span class="number">1</span>] * x ** <span class="number">3</span> + theta[<span class="number">2</span>] * x ** <span class="number">2</span> + theta[<span class="number">3</span>] * x + theta[<span class="number">0</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/27/4RPGd0.png" alt=""></p>
<p><br></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>需要注意的是多项式化是成<code>阶乘式</code>的增长，比指数爆炸更可怕！</p>
<p>$\frac{(n + d)!}{d!n!}$，其中 n 为原本特征数，d 为最高次数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolynomialRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, degree</span>):</span></span><br><span class="line">        self.degree = degree</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">        self.X = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        </span><br><span class="line">        initial_theta = np.zeros([self.X.shape[<span class="number">1</span>]])</span><br><span class="line">        theta = self._gradient_descent(self.X, y, initial_theta, eta, n_iters, epsilon)</span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.coefficient = theta[<span class="number">1</span>:]</span><br><span class="line">        self.intercept = theta[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多项式化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPolynomialFeatures</span>(<span class="params">self, X, start, col_val, degree</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">X, result, start, col_val, degree</span>):</span></span><br><span class="line">            result.append(col_val)</span><br><span class="line">            <span class="keyword">if</span>(degree == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, X.shape[<span class="number">1</span>]):</span><br><span class="line">                dfs(X, result, start, col_val * X[:, i].reshape([-<span class="number">1</span>, <span class="number">1</span>]), degree - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        dfs(X, result, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), degree)</span><br><span class="line">        <span class="keyword">return</span> np.squeeze(np.array(result), -<span class="number">1</span>).T</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X_b = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        y_pred = X_b.dot(self.theta)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = self.predict(X)</span><br><span class="line">        <span class="keyword">return</span> np.mean((y - y_pred) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gradient_descent</span>(<span class="params">self, X_b, y, theta, eta, n_iters, epsilon</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line">        </span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            gradient = DJ(X_b, y, theta)</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * gradient</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">poly_reg = PolynomialRegression(<span class="number">3</span>)</span><br><span class="line">poly_reg.fit(x.reshape([-<span class="number">1</span>, <span class="number">1</span>]), y, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span>)</span><br><span class="line"></span><br><span class="line">theta = poly_reg.theta</span><br><span class="line">pred_y = theta[<span class="number">3</span>] * x ** <span class="number">3</span> + theta[<span class="number">2</span>] * x ** <span class="number">2</span> + theta[<span class="number">1</span>] * x + theta[<span class="number">0</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>结果如出一辙。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fChIP.png" alt=""></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>数据归一化</title>
    <url>/2021/09/14/%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>观察下图，可以发现每个特征之间的量纲不同，没有办法放在一起比较，学习出来的模型可解释性比较差。而且对于KNN算法来说，样本之间的距离极大部分会由发现时间（天）来引导，肿瘤大小（厘米）几乎可以忽略不计。</p>
<p><img src="https://z3.ax1x.com/2021/09/14/4k3M9K.png" alt=""></p>
<p>为此我们就需要采用归一化，把有量纲的表达式改成<code>无量纲</code>的表达式，将数据的所有特征都映射到一个统一的尺度下。（对于其它算法如线性回归则不会影响分类或预测结果）</p>
<p>而且归一化后可以加速训练，左侧因为进行了归一化，因此等高线几乎是正圆，等高线上的法线指向圆心，因此能快速收敛到最小值，而右图没有进行归一化则需进行多次迭代。</p>
<p>没有进行归一化，学习率也得按照特征取值范围最小的那个维度来取，不然很容易出现nan。</p>
<p>注：由于进行了归一化，我们的模型都是按照归一化的数据进行训练的，因此测试数据也要进行归一化，否则没有意义了。</p>
<p><img src="https://z3.ax1x.com/2021/09/14/4kxFRU.png" alt=""></p>
<p>（1） 均值方差归一化（standardization）</p>
<script type="math/tex; mode=display">
X_{scale} = \frac{X - X_{mean}}{X_{std}}</script><p>经过该标准化处理的数据，均值为0，方差为1，符合正态分布。</p>
<p>适用于数据分布没有明显的边界，有可能存在极端的数据值。</p>
<p>正好学了概率论，就来简单推导下吧。</p>
<script type="math/tex; mode=display">
设经过均值方差归一化后X^*的数学期望和方差分别为E^*X, D^*X \qquad (X^* = \frac{X - EX}{\sqrt{DX}})
\\
E^*X = E(\frac{X - EX}{\sqrt{DX}}) = \frac{1}{\sqrt{DX}} * (EX - EX) = 0
\\
D^*X = D(\frac{X - EX}{\sqrt{DX}}) = \frac{1}{DX} * D(X - EX) = \frac{1}{DX} * DX = 1</script><p>（2）最值归一化（Normalization）</p>
<script type="math/tex; mode=display">
X_{scale} = \frac{X - X_{min}}{X_{max} - X_{min}}</script><p>经过该标准化处理的数据，数据分布在(0, 1)。</p>
<p>适用于分布有明显边界的情况，受 outliner影响较大。</p>
<p>例如像素范围（0 ~ 255），学生成绩（0 ~ 100）。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>（1） 最值归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinMaxScaler</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.<span class="built_in">max</span> = np.<span class="built_in">max</span>(X, axis = <span class="number">0</span>)</span><br><span class="line">        self.<span class="built_in">min</span> = np.<span class="built_in">min</span>(X, axis = <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (X - self.<span class="built_in">min</span>) / (self.<span class="built_in">max</span> - self.<span class="built_in">min</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>原始数据均值为46.995，标准差为27.97007284581147。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(np.mean(X))			<span class="comment"># 46.995</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X))			<span class="comment"># 27.97007284581147</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kODbt.png" alt=""></p>
<p>经过最值归一化后，均值为0.4721085858585859，标准差为0.2863025514861211。</p>
<p>所有值都被映射到（0， 1）之间</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">minMaxScaler = MinMaxScaler()</span><br><span class="line">minMaxScaler.fit(X)</span><br><span class="line">X1 = minMaxScaler.transform(X)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(X1))			<span class="comment"># 0.4721085858585859</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X1))			<span class="comment"># 0.2863025514861211</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X1[:, <span class="number">0</span>], X1[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kXqTP.png" alt=""></p>
<p>（2） 均值方差归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardScaler</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.mean = np.mean(X, axis = <span class="number">0</span>)</span><br><span class="line">        self.std = np.std(X, axis = <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (X - self.mean) / self.std</span><br></pre></td></tr></tbody></table></figure>
<p>经过均值方差归一化后，均值几乎为0，标准差也几乎为1，但数据范围不一定在（0， 1）中。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">standardScaler = StandardScaler()</span><br><span class="line">standardScaler.fit(X)</span><br><span class="line">X1 = standardScaler.transform(X)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(X1))				<span class="comment"># -2.7755575615628914e-17</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X1))				<span class="comment"># 0.9999999999999998</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X1[:, <span class="number">0</span>], X1[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kXEMd.png" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先介绍一下 <code>train test split</code>，正如它的字面意思。将一份数据集分成训练数据集和测试数据集，这样在使用 score 函数时，使用的都是训练时没有见过的数据集，得出来的准确率也就更可靠。</p>
<p>首先数据集需要打乱，因为有些数据集是根据类别来分类的，例如前 k 个都是类别1，后 k 个都是类别2，这样 train 和test中的类别分布差距很大，会导致泛化效果不好。</p>
<p>np.random.seed(seed) 使用同一个种子为了能更好的比较使用归一化和不使用归一化的区别。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_test_split</span>(<span class="params">X, y, split_rate, seed</span>):</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    length = <span class="built_in">int</span>(<span class="built_in">len</span>(X) * split_rate)</span><br><span class="line">    p = np.random.permutation(<span class="built_in">len</span>(X))</span><br><span class="line">    <span class="keyword">return</span> X[p[length:]], X[p[:length]], y[p[length:]], y[p[:length]]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>（1） 不使用归一化进行学习</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data			<span class="comment"># (506, 13)</span></span><br><span class="line">y=boston.target			<span class="comment"># (506, )</span></span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-6</p>
<p>score = 31.348463775149956</p>
<p>（2） 使用最值归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">minMaxScaler = MinMaxScaler()</span><br><span class="line">minMaxScaler.fit(X)</span><br><span class="line">X = minMaxScaler.transform(X)</span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-2</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-2</p>
<p>score = 25.209485526542817</p>
<p>（3） 使用均值方差归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">standardScaler = StandardScaler()</span><br><span class="line">standardScaler.fit(X)</span><br><span class="line">X = standardScaler.transform(X)</span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-2</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-2</p>
<p>score = 18.92473923096906</p>
<p>经过对比，使用同样的训练次数，经过了归一化的预测率明显比没有经过归一化的预测率更高，而且eta取1e-2就行，不用多次尝试。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>树莓派的安装</title>
    <url>/2021/12/05/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ol>
<li><p>一张 TF 卡（class10）</p>
</li>
<li><p>Raspberry Pi OS：<a href="https://www.raspberrypi.com/software/operating-systems">https://www.raspberrypi.com/software/operating-systems</a></p>
</li>
<li>分区软件：DiskGenius</li>
<li>烧写系统软件：Win32DiskImager</li>
</ol>
<h3 id="2-远程连接"><a href="#2-远程连接" class="headerlink" title="2. 远程连接"></a>2. 远程连接</h3><h4 id="2-1-烧写系统"><a href="#2-1-烧写系统" class="headerlink" title="2.1 烧写系统"></a>2.1 烧写系统</h4><p>如果原本 TF 卡中有分区，可以用 <strong>DiskGenius</strong> 格式化在创建一个新分区。</p>
<p><img src="https://s4.ax1x.com/2021/12/05/oBSSDs.png" alt="image"></p>
<p>然后启动 <strong>Win32DiskImager</strong> 选择之前在官网上下载的镜像文件烧写到 TF 卡中。</p>
<p><img src="https://s4.ax1x.com/2021/12/05/oBSE2F.png" alt="image"></p>
<p>注意，Raspberry 默认是不开启 SSH 服务的，需要在 TF 卡中创建一个名为 <code>SSH</code> 的文件，就能开启了！</p>
<p><img src="https://s4.ax1x.com/2021/12/05/oBSYKH.md.png" alt="image"></p>
<p>之后将 TF 卡插到树莓派上就能正常开机了，但因为没有画面，我们先要给树莓派连上以太网，然后查询 IP，这样通过刚刚开启的 SSH 服务远程连接我们的树莓派了！</p>
<h4 id="2-2-配置数据源"><a href="#2-2-配置数据源" class="headerlink" title="2.2 配置数据源"></a>2.2 配置数据源</h4><p>连接后先配置数据源，改为清华源（国外的源很慢）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span><br><span class="line"></span><br><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line"></span><br><span class="line"><span class="comment"># CTRL+O 保存 -&gt; ENTER 确认 -&gt; CTRL+X 退出</span></span><br></pre></td></tr></tbody></table></figure>
<p>更新数据源。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></tbody></table></figure>
<p>安装 xrdp 实现 Windows 远程访问。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-网络配置"><a href="#3-网络配置" class="headerlink" title="3. 网络配置"></a>3. 网络配置</h3><h4 id="3-1-ping-通树莓派"><a href="#3-1-ping-通树莓派" class="headerlink" title="3.1 ping 通树莓派"></a>3.1 ping 通树莓派</h4><p>在不知道树莓派 ip 的情况下，在 windows 的 cmd 窗口中输入</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ping raspberrypi.local</span><br></pre></td></tr></tbody></table></figure>
<p>即可得到树莓派的 ip 地址。</p>
<p>(实际上在 XShell 的 ip 地址上直接输入 raspberrypi.local 就能连接上树莓派)</p>
<h4 id="3-2-配置网卡"><a href="#3-2-配置网卡" class="headerlink" title="3.2 配置网卡"></a>3.2 配置网卡</h4><p>修改 <code>/etc/dhcpcd.conf</code>，修改之前先备份！！！</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 其中eth0是有线网卡，wlan0是无线网卡。</span></span><br><span class="line">interface eth0</span><br><span class="line">static ip_address=192.168.1.88/24</span><br><span class="line">static routers=192.168.1.1</span><br><span class="line">static domain_name_servers=114.114.114.114</span><br><span class="line"></span><br><span class="line">interface wlan0</span><br><span class="line">static ip_address=192.168.1.89/24</span><br><span class="line">static routers=192.168.1.1</span><br><span class="line">static domain_name_dervers=114.114.114.114</span><br></pre></td></tr></tbody></table></figure>
<p>通过这个文件将有线网卡和无线网卡都配置上了静态ip。</p>
<p>但这样还不够，还要修改/etc/network/interfaces文件，在这个文件后面添加如下几行。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 自动开启loopback</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动开启eth0</span></span><br><span class="line">iface eth0 inet manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动开启wlan0</span></span><br><span class="line">auto wlan0</span><br><span class="line">allow-hotplug wlan0</span><br><span class="line"></span><br><span class="line">iface wlan0 inet static</span><br><span class="line">wpa-ssid <span class="string">"wifi_name"</span></span><br><span class="line">wpa-psk <span class="string">"password"</span></span><br><span class="line">address 192.168.1.89</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line">network 192.168.1.1</span><br><span class="line">iface default inet dhcp</span><br></pre></td></tr></tbody></table></figure>
<p>然后重启树莓派即可。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure>
<p>修改完静态 ip 后，就可以使用 XShell 通过新设置的静态 ip 连接树莓派了。</p>
]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
  </entry>
  <entry>
    <title>梯度下降法</title>
    <url>/2021/09/12/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>梯度下降法是一种非常通用的优化算法，能够为大范围的问题找到最优解。梯度下降的中心思想就是迭代地调整参数从而使成本函数最小化。（PS：梯度上升法解决最大化问题）</p>
<p><img src="https://z3.ax1x.com/2021/09/12/4p2RAS.png" alt=""></p>
<p>斜率为正，代表单调递增，说明极值点在左边；</p>
<p>斜率为负，代表单调递减，说明极值点在右边。</p>
<p>因此我们可以通过减去导数来找到最值点（假如极值点只有一个），因此被称为梯度下降法。</p>
<p>不过由于每个点上的导数是固定的，例如接近笔直的直线斜率就几乎是无穷大，如果我们直接减去导数，显然就不大合适。</p>
<p>所以就引申出了eta，也被称作学习率（learning rate）。现在我们只需减去eta * gradient就可以了，通过调整eta的大小来改变拟合的速度</p>
<p>eta过大可能导致无法拟合，eta过小则会拟合过慢，下面会有实例展示。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这是eta适中的情况，只花了26步就找到了最小值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 26 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pIdbR.png" alt=""></p>
<p>这里eta就偏小了，虽然也能找到最小值，但运行了875次，是上面的五十多倍。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 875 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pTA1S.png" alt=""></p>
<p>这里eta也算是适中的情况，只不过图像会比较特殊，左右反复横跳，因此我也拿出来当个样例。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 21 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pTtB9.png" alt=""></p>
<p>这是最差的情况，eta过大，导致y越来越大，已经无法取得最小值了。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta, max_len = <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4p7FER.png" alt=""></p>
<p><br></p>
<p>当然也会有存在多个极值点的情况，下图中如果选择左边作为起始点，基本就找不到全局最优解了，只能找到局部最优解。</p>
<p>不过幸好，一般使用MSE(Mean Square Error)作为成本函数，而MSE恰好是个凸函数，这就意味着连接曲线上任意两点的线段永远也不会跟曲线相交。也就是说不存在局部最小值，只有一个全局最小值。它同时也是一个连续函数，所以斜率不会产生陡峭的变化。</p>
<p>这两点保证的结论是：即便是乱走，梯度下降也可以趋近到全局最小值（只要等待时间足够长，学习率也不是太高）。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4CjCQI.png" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * x ** <span class="number">2</span> + <span class="number">3.5</span> * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标导函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制导数轨迹曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gradient_tracks</span>(<span class="params">start, epsilon, eta, max_len = <span class="number">1e4</span></span>):</span></span><br><span class="line">    a = start</span><br><span class="line"></span><br><span class="line">    historys = []</span><br><span class="line">    <span class="keyword">while</span>(max_len &gt; <span class="number">0</span>):</span><br><span class="line">        last = J(a)</span><br><span class="line">        historys.append([a, J(a)])</span><br><span class="line">        a = a - eta * DJ(a)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(last - J(a)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        max_len -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    historys = np.array(historys)</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    plt.plot(historys[:, <span class="number">0</span>], historys[:, <span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span>(historys.shape[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> historys[-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)		<span class="comment"># array([-3.5000062, -4.125])</span></span><br></pre></td></tr></tbody></table></figure>
<p>将目标函数配方得，$\frac{1}{2}x^2 + \frac{7}{2}x + 2 = \frac{1}{2}[(x + \frac{7}{2})^2 + \frac{33}{4}]$</p>
<p>可以得出在$x = -\frac{7}{2}$处，取得最小值$y = \frac{33}{8}$</p>
<p>与测试结果基本一致。</p>
<p>注：计算结果不可能与理论值相等。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>概率论</title>
    <url>/2021/09/16/%E6%A6%82%E7%8E%87%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="一-公式"><a href="#一-公式" class="headerlink" title="一. 公式"></a>一. 公式</h1><h2 id="1-排列组合"><a href="#1-排列组合" class="headerlink" title="1. 排列组合"></a>1. 排列组合</h2><p><strong>（1） 排列</strong></p>
<p>$P_m^n = m(m - 1)(m - 2)···(m - n + 1)$</p>
<p>$P_m^n = \frac{m!}{(m - n)!}$</p>
<p><strong>（2） 组合</strong></p>
<p>$C_m^n = \frac{P_m^n}{n!} = \frac{m(m - 1)(m - 2)···(m - n + 1)}{n!}$</p>
<p>$C_m^n = \frac{m!}{n!(m - n)!}$</p>
<p>$C_m^n = C_m^{m-n}$</p>
<p>$C^n_{m+1} = \frac{(m+1)m(m-1)···(m-n+2)}{n!} = \frac{[(m - n + 1) + n]m(m-1)···(m-n+2)}{n!} = \frac{m(m-1)···(m-n+1)}{n!} + \frac{m(m-1)···(m-n+2)}{(n-1)!} = C_m^n + C_m^{n-1}$</p>
<h2 id="2-条件概率"><a href="#2-条件概率" class="headerlink" title="2.条件概率"></a>2.条件概率</h2><p>（1） 条件概率</p>
<p>$P(B|A) = \frac{P(AB)}{P(A)}$，                P(A) &gt; 0</p>
<p>（2） 乘法公式</p>
<p>$$</p>
<p>（3） 完备事件组</p>
<p>（4） 全概率公式</p>
<p>（5） 贝叶斯公式</p>
]]></content>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2021/10/14/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h2><h4 id="1-1、-内置注解"><a href="#1-1、-内置注解" class="headerlink" title="1.1、 内置注解"></a>1.1、 内置注解</h4><ul>
<li><p>@Deprecated</p>
<p>被注解的元素是不鼓励使用的程序元素，通常是因为它是<code>危险</code>的，或者因为存在更好的替代方法。</p>
</li>
<li><p>@Override</p>
<p>表示重写父类方法。</p>
</li>
<li><p>@SuppressWarning</p>
<p>抑制警告。</p>
</li>
<li><p>@FunctionaInterface</p>
<p>指定接口必须为函数式接口。</p>
</li>
</ul>
<h4 id="1-2、元注解"><a href="#1-2、元注解" class="headerlink" title="1.2、元注解"></a>1.2、元注解</h4><p>元注解的作用就是负责<code>注解</code>其它注解。</p>
<ul>
<li><p>@Target</p>
<p>用于描述注解的使用范围。</p>
</li>
<li><p>@Retention</p>
<p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期。</p>
<ul>
<li>SOURCE &lt; CLASS &lt; RUNTIME</li>
</ul>
</li>
<li><p>@Document</p>
<p>说明该注解将被包含在 javadoc 中。</p>
</li>
<li><p>@Inherited</p>
<p>说明子类可以<code>继承</code>父类中的该注释。</p>
</li>
</ul>
<h2 id="1-3、自定义注解"><a href="#1-3、自定义注解" class="headerlink" title="1.3、自定义注解"></a>1.3、自定义注解</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    String[] hobby() <span class="keyword">default</span> {<span class="string">"dance"</span>, <span class="string">"sing"</span>};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2{</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注解中的参数一定要加<code>()</code>！</p>
<p>当注解只有一个参数时，参数名可以定义为 <code>value</code>，在调用的时候直接赋值就行。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>{</span><br><span class="line">    <span class="meta">@MyAnnotation1(age = 12)</span></span><br><span class="line">    <span class="meta">@MyAnnotation2("value")</span></span><br><span class="line">    String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h2><p>Java 反射就是在<code>运行</code>状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性，并且能改变它的属性。</p>
<h4 id="2-1、获取-Class-类的实例"><a href="#2-1、获取-Class-类的实例" class="headerlink" title="2.1、获取 Class 类的实例"></a>2.1、获取 Class 类的实例</h4><ul>
<li><p>通过类的 class 属性获取，安全可靠，性能最高。</p>
<p><code>Class clz = Person.class;</code></p>
</li>
<li><p>调用实例的 getClass() 方法。</p>
<p><code>Class clz = person.getClass();</code></p>
</li>
<li><p>通过 Class.forName() 获取。</p>
<p><code>Class clz = Class.forName("com.yqx.Person");</code></p>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">    Class clz1 = Person.class;</span><br><span class="line">    Class clz2 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line">    Class clz3 = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">    System.out.println(clz1 == clz2);	<span class="comment">// true</span></span><br><span class="line">    System.out.println(clz2 == clz3);	<span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2、拥有-Class-对象的类型"><a href="#2-2、拥有-Class-对象的类型" class="headerlink" title="2.2、拥有 Class 对象的类型"></a>2.2、拥有 Class 对象的类型</h4><ul>
<li>class：外部类，成员，局部内部类，匿名内部类。</li>
<li>interface：接口</li>
<li>[]：数组</li>
<li>enum：枚举</li>
<li>annotation：注解 @interface</li>
<li>primitive type：基本数据类型</li>
<li>void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    Class clz1 = Object.class;</span><br><span class="line">    Class clz2 = Comparable.class;</span><br><span class="line">    Class clz3 = String[].class;</span><br><span class="line">    Class clz4 = String[][].class;</span><br><span class="line">    Class clz5 = Override.class;</span><br><span class="line">    Class clz6 = ElementType.class;</span><br><span class="line">    Class clz7 = Integer.class;</span><br><span class="line">    Class clz8 = <span class="keyword">void</span>.class;</span><br><span class="line">    Class clz9 = Class.class;</span><br><span class="line"></span><br><span class="line">    System.out.println(clz1);</span><br><span class="line">    System.out.println(clz2);</span><br><span class="line">    System.out.println(clz3);</span><br><span class="line">    System.out.println(clz4);</span><br><span class="line">    System.out.println(clz5);</span><br><span class="line">    System.out.println(clz6);</span><br><span class="line">    System.out.println(clz7);</span><br><span class="line">    System.out.println(clz8);</span><br><span class="line">    System.out.println(clz9);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">    System.out.println(a.getClass() == b.getClass());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印输出 (数组即使长度不同，其 Class 类也都是相同的)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> [<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> [[<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Override</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">ElementType</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Class</span></span></span><br><span class="line"><span class="class"><span class="title">true</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3、类的加载"><a href="#2-3、类的加载" class="headerlink" title="2.3、类的加载"></a>2.3、类的加载</h4><p><img src="https://z3.ax1x.com/2021/10/14/5QnMng.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/14/5QnIUA.png" alt=""></p>
<h4 id="2-4、获取类的属性及方法"><a href="#2-4、获取类的属性及方法" class="headerlink" title="2.4、获取类的属性及方法"></a>2.4、获取类的属性及方法</h4><p>反射机制允许程序在运行时取得任何一个已知名称的 class 的内部信息，包括包括其modifiers (修饰符)，fields (属性)，methods (方法)等，并可于运行时改变 fields 内容或调用 methods。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">// 获取 Class 对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象(无参)</span></span><br><span class="line">        Person person1 = (Person) c1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        Person person2 = (Person) constructor.newInstance(<span class="string">"yqx"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射调用方法</span></span><br><span class="line">        Method method1 = c1.getDeclaredMethod(<span class="string">"getName"</span>);</span><br><span class="line">        Method method2 = c1.getDeclaredMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line">        String name1 = (String) method1.invoke(person1);</span><br><span class="line">        method2.invoke(person1, <span class="string">"deflory"</span>);</span><br><span class="line">        String name2 = (String) method1.invoke(person1);</span><br><span class="line">        System.out.println(<span class="string">"Before: "</span> + name1);</span><br><span class="line">        System.out.println(<span class="string">"After: "</span> + name2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射操作属性</span></span><br><span class="line">        Field field = c1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  <span class="comment">// 设置可访问的</span></span><br><span class="line">        field.set(person1, <span class="number">18</span>);</span><br><span class="line">        System.out.println(person1.getAge());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Person{name=<span class="string">'null'</span>, age=<span class="number">0</span>}</span><br><span class="line">Person{name=<span class="string">'yqx'</span>, age=<span class="number">20</span>}</span><br><span class="line">Before: <span class="keyword">null</span></span><br><span class="line">After: deflory</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-5、性能测试"><a href="#2-5、性能测试" class="headerlink" title="2.5、性能测试"></a>2.5、性能测试</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>{</span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        person.getAge();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"普通方法用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射(检测开启)</span></span><br><span class="line">    Method method = Person.class.getDeclaredMethod(<span class="string">"getAge"</span>);</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        method.invoke(person);</span><br><span class="line">    }</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"反射(检测开启)用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射(检测关闭)</span></span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        method.invoke(person);</span><br><span class="line">    }</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"反射(检测关闭)用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">普通方法用时：1379ms</span><br><span class="line">反射(检测开启)用时：1863ms</span><br><span class="line">反射(检测关闭)用时：1591ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-6、反射操作泛型"><a href="#2-6、反射操作泛型" class="headerlink" title="2.6、反射操作泛型"></a>2.6、反射操作泛型</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>{</span><br><span class="line">    Method test01 = Person.class.getDeclaredMethod(<span class="string">"test01"</span>, Map.class, List.class);</span><br><span class="line">    Method test02 = Person.class.getDeclaredMethod(<span class="string">"test02"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"test01(参数泛型)"</span>);</span><br><span class="line">    Type[] genericParameterTypes = test01.getGenericParameterTypes();</span><br><span class="line">    <span class="keyword">for</span>(Type genericParameterType : genericParameterTypes){</span><br><span class="line">        System.out.println(genericParameterType);</span><br><span class="line">        <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType){</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span>(Type actualTypeArgument : actualTypeArguments){</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\ntest02(返回值泛型)"</span>);</span><br><span class="line">    Type getGenericReturnType = test02.getGenericReturnType();</span><br><span class="line">    System.out.println(getGenericReturnType);</span><br><span class="line">    <span class="keyword">if</span> (getGenericReturnType <span class="keyword">instanceof</span> ParameterizedType){</span><br><span class="line">        Type[] actualTypeArguments = ((ParameterizedType) getGenericReturnType).getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span>(Type actualTypeArgument : actualTypeArguments){</span><br><span class="line">            System.out.println(actualTypeArgument);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">test01(参数泛型)</span><br><span class="line">java.util.Map&lt;java.lang.String, java.lang.Integer&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Character</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Character</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">test02</span>(返回值泛型)</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">Map</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>, <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> </span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
  </entry>
  <entry>
    <title>模型的训练</title>
    <url>/2021/10/08/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<h2 id="1、网格搜索"><a href="#1、网格搜索" class="headerlink" title="1、网格搜索"></a>1、网格搜索</h2><h4 id="1-1、什么是网格搜索？"><a href="#1-1、什么是网格搜索？" class="headerlink" title="1.1、什么是网格搜索？"></a>1.1、什么是网格搜索？</h4><p>在 <a href="/2021/09/28/过拟合和欠拟合/">过拟合和欠拟合</a> 中，我们是手动调整超参数 <code>degree</code> ，经由人工一一比对来获取最好的值，效率比较低下。因此我们引入网格搜索这个概念，不要被这个看起来很高大上的名词吓唬住了，其实逻辑十分简单，具体请看下述代码。</p>
<p>使用 sklearn 中自带的波士顿房产数据作为我们的测试数据。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line">boston = datasets.load_boston()</span><br><span class="line">X = boston.data</span><br><span class="line">y = boston.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br></pre></td></tr></tbody></table></figure>
<p>这里我们要网格搜索的参数即为 p，neighbor， weight。</p>
<p>可以看到所谓 <code>网格搜索</code> 就是使用 for-loop 像网格一样将你预设的可能的值都遍历一遍，依次寻求 score 最高的超参数组合。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">KNN中的超参数：</span><br><span class="line"><span class="bullet">  -</span> weights：含有 <span class="code">`uniform`</span> 和 <span class="code">`distance`</span> 两种模式</span><br><span class="line"><span class="code">             uniform 是正常的模式</span></span><br><span class="line"><span class="code">             distance 给 k 个相邻的点按照距离远近都赋予一个权重，离预测样本点距离远的权重就低一些，距离近的权重就高一些，</span></span><br><span class="line"><span class="code">             </span></span><br><span class="line"><span class="code">  - p：闵可夫斯基距离参数</span></span><br><span class="line"><span class="code">       p = 1 时，等价于曼哈顿距离</span></span><br><span class="line"><span class="code">       p = 2 时，等价于欧拉距离</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">weights = [<span class="string">"uniform"</span>, <span class="string">"distance"</span>]</span><br><span class="line">best_score = -<span class="number">1</span></span><br><span class="line">best_p = <span class="number">0</span></span><br><span class="line">best_neighbor = <span class="number">0</span></span><br><span class="line">best_weight = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weight <span class="keyword">in</span> weights:</span><br><span class="line">    <span class="keyword">for</span> neighbor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            reg = KNeighborsRegressor(n_neighbors=neighbor,</span><br><span class="line">                                      weights = weight,</span><br><span class="line">                                      p = p,</span><br><span class="line">                                      n_jobs = -<span class="number">1</span>)</span><br><span class="line">            reg.fit(X_train, y_train)</span><br><span class="line">            score = reg.score(X_test, y_test)</span><br><span class="line">            <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">                best_score = score</span><br><span class="line">                best_neighbor = neighbor</span><br><span class="line">                best_p = p</span><br><span class="line">                best_weight = weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_weight ="</span>, best_weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_p ="</span>, best_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_neighbor ="</span>, best_neighbor)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_score ="</span>, best_score)</span><br></pre></td></tr></tbody></table></figure>
<p>输出结果如下。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">best_weight = distance</span><br><span class="line">best_p = <span class="number">1</span></span><br><span class="line">best_neighbor = <span class="number">3</span></span><br><span class="line">best_score = <span class="number">0.7420720968121362</span></span><br></pre></td></tr></tbody></table></figure>
<p>注：KNeighborsRegressor 和 KNeighborsClassifier 思想相同。</p>
<p>KNeighborsClassifier 是找到附近 <code>k</code> 个数据，找到最多那个类别作为预测的<code>类别</code>，用于解决分类问题。</p>
<p>而 KNeighborsRegressor 是找到附近 <code>k</code> 个数据，然后取平均值作为预测的<code>数值</code>，用于解决回归问题。</p>
<p><br></p>
<h4 id="1-2、scikit-中的实现"><a href="#1-2、scikit-中的实现" class="headerlink" title="1.2、scikit 中的实现"></a>1.2、scikit 中的实现</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">params = {</span><br><span class="line">    <span class="string">"weights"</span> : [<span class="string">"uniform"</span>, <span class="string">"distance"</span>],</span><br><span class="line">    <span class="string">"p"</span> : [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)],</span><br><span class="line">    <span class="string">"n_neighbors"</span> : [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">knn_reg = KNeighborsRegressor()</span><br><span class="line">grid_search=GridSearchCV(knn_reg, params)</span><br><span class="line">%time grid_search.fit(X_train,y_train)</span><br></pre></td></tr></tbody></table></figure>
<p>GridSearchCV 使用交叉验证来训练数据，即 train-validation-test。因此best_score_可能会比较低。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">grid_search.best_params_ = {<span class="string">'n_neighbors'</span>: <span class="number">5</span>, <span class="string">'p'</span>: <span class="number">1</span>, <span class="string">'weights'</span>: <span class="string">'distance'</span>}</span><br><span class="line">grid_search.best_score_ = <span class="number">0.6091159004372775</span></span><br><span class="line">grid_search.best_estimator_.score(X_test, y_test) = <span class="number">0.7276418519232821</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="2、交叉验证"><a href="#2、交叉验证" class="headerlink" title="2、交叉验证"></a>2、交叉验证</h2><p>在之前模型的训练中，我们都是以测试数据集的 score 来衡量模型的好坏，换言之就是根据 <code>test_score</code> 来调整超参数，并从所有的模型中挑出 <code>test_score</code> 最高的作为我们的预测模型。但这样也会暴露出一个问题，在模型训练期间，我们的模型就已经<code>见过</code>了测试数据集，因此可能会<code>过拟合</code>测试数据集！</p>
<p>这样肯定是不对的，要模拟真正的生产环境，那么测试数据集就不能参与到模型的训练当中。我们只需要再引入一个验证数据集来<code>代替</code>之前测试数据集的作用就行了。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5kvEY4.png" alt=""></p>
<p>但其实这样也会有<code>过拟合</code>验证数据集的问题，因此就有了<code>交叉验证</code>。具体则是将训练数据集分成 K 份，从这 K 份当中选择一份作为验证数据集，其余 K-1 份作为训练数据集。一共有 $C^1_K = K$ 种分法，因此我们可以得到 K 个模型，因此这也被称为 <code>K-folds Cross  Validation</code>（K折交叉验证），最后取他们在验证数据集上的均值作为判断模型好坏的依据。</p>
<p>这里提一句，在 scikit-learn 的网格搜索中，默认使用的是 cv = 5 的交叉验证，也就是五折交叉验证。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5kvFTU.png" alt=""></p>
<p>当交叉验证的 K = n_samples 时，会产生 n_samples 个模型，这时训练出来的模型完全不受随机的影响，将最接近模型真正的性能指标，代价就是训练时间会扩大 n_samples 倍，这就是 <code>LOO-CV</code>（Leave One Out Cross Validtion），也就是留一法。</p>
<h4 id="2-2、代码实现"><a href="#2-2、代码实现" class="headerlink" title="2.2、代码实现"></a>2.2、代码实现</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将第i份作为验证集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_k_fold_data</span>(<span class="params">k, i, X, y</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> k &gt; <span class="number">1</span></span><br><span class="line">    fold_size = X.shape[<span class="number">0</span>] // k</span><br><span class="line">    X_train, y_train = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        idx = <span class="built_in">slice</span>(j * fold_size, (j+<span class="number">1</span>) * fold_size)</span><br><span class="line">        X_part, y_part = X[idx, :], y[idx]</span><br><span class="line">        <span class="comment"># 第i份即为验证集</span></span><br><span class="line">        <span class="keyword">if</span> j == i:</span><br><span class="line">            X_valid, y_valid = X_part, y_part</span><br><span class="line">        <span class="comment"># 除第i份以外的第一份作为train的开头</span></span><br><span class="line">        <span class="keyword">elif</span> X_train <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            X_train, y_train = X_part, y_part</span><br><span class="line">        <span class="comment"># 其余拼接到后面</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            X_train = tf.concat([X_train, X_part], <span class="number">0</span>)</span><br><span class="line">            y_train = tf.concat([y_train, y_part], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> X_train, y_train, X_valid, y_valid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">k_fold</span>(<span class="params">k, X_train, y_train, num_epochs, learning_rate, weight_decay, batch_size</span>):</span></span><br><span class="line">    train_loss_sum, valid_loss_sum = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        data = get_k_fold_data(k, i, X_train, y_train)</span><br><span class="line">        net = get_net()</span><br><span class="line">        train_loss, valid_loss = train(net, *data, num_epochs, learning_rate, weight_decay, batch_size)</span><br><span class="line">        train_loss_sum += train_loss[-<span class="number">1</span>]</span><br><span class="line">        valid_loss_sum += valid_loss[-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'fold <span class="subst">{i + <span class="number">1</span>}</span>, train log rmse <span class="subst">{<span class="built_in">float</span>(train_loss[-<span class="number">1</span>]):f}</span>, '</span></span><br><span class="line">              <span class="string">f'valid log rmse <span class="subst">{<span class="built_in">float</span>(valid_loss[-<span class="number">1</span>]):f}</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> train_loss_sum / k, valid_loss_sum / k</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>神经网络权重的初始化</title>
    <url>/2021/10/16/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9D%83%E9%87%8D%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<p>当我们在训练一个神经网络的时候，参数的随机初始化是非常重要的，对于逻辑回归来说，可以将权重初始化为0。而对于神经网络而言，这样做将会导致梯度下降算法无法起作用。</p>
<h2 id="1-为什么使用于逻辑回归？"><a href="#1-为什么使用于逻辑回归？" class="headerlink" title="1. 为什么使用于逻辑回归？"></a>1. 为什么使用于逻辑回归？</h2><p>如下图所示，其中$X_1$ 和 $X_2$ 是特征值。</p>
<p><img src="https://z3.ax1x.com/2021/10/16/5JSZ2F.png" alt=""></p>
<p><strong>前向传播</strong>：</p>
<p>$a_1 = sigmoid(X_1 <em> W_1 + X_2 </em> W_2 + b)$</p>
<p>$loss = -ylog(a_1) - (1 - y)log(1 - a_1)$</p>
<p><strong>反向传播</strong>：</p>
<p>$da_1 = -\frac{y}{a_1} + \frac{1 - y}{1 - a_1}$</p>
<p>$dw_1 = da_1 <em> a’_1 </em> X_1 = (a_1 - y) * X_1$</p>
<p>$dw_2 = da_1 <em> a’_1 </em> X_2 = (a_1 - y) * X_2$</p>
<p>$db = da_1 <em> a’_1 </em> 1 = a_1 - y$</p>
<p><strong>参数更新</strong>：</p>
<p>$W_1 = w_1 - η * dw_1$</p>
<p>$W_2 = w_2 - η * dw_2$</p>
<p>$b = b - η * db$</p>
<p>可以看到， $W_1$ 和 $W_2$  并不影响 $dw_1$ 和 $dw_2$ 的值，而是根据 $X_1$ 和 $X_2$ 的不同而改变，且不为0，模型的权重能够得到更新。因此即使我们将 $W_1$ 和 $W_2$ 初始化为0也无所谓。参数 同理。</p>
<h2 id="2-为什么不适用于神经网络"><a href="#2-为什么不适用于神经网络" class="headerlink" title="2. 为什么不适用于神经网络?"></a>2. 为什么不适用于神经网络?</h2><p>神经网络结构图如下。</p>
<p><img src="https://z3.ax1x.com/2021/10/16/5J9qER.png" alt=""></p>
<p><strong>前向传播</strong>：</p>
<p>$a_1 = f(X_1 <em> W_{11} + X_2 </em> W_{21} + b_1)$</p>
<p>$a_2 = f(X_1 <em> W_{12} + X_2 </em> W_{22} + b_2)$</p>
<p>$a_3 = sigmoid(a_1 <em> W_{13} + a_2 </em> W_{23} + b_3)$</p>
<p>$loss = -ylog(a_3) - (1 - y)log(1 - a_3)$</p>
<p><strong>反向传播</strong>：</p>
<p>$da_3 = -\frac{y}{a_3} + \frac{1 - y}{1 - a_3}$</p>
<p>$dw_{13} = da_3 <em> a’_3 </em> a_1 = (a_3 - y) * a_1$</p>
<p>$dw_{23} = da_3 <em> a’_3 </em> a_2 = (a_3 - y) * a_2$</p>
<p>$db_{3} = da_3 <em> a’_3 </em> 1 = a_3 - y$</p>
<p>$da_1 = da_3 <em> a’_3 </em> W_{13} = (a_3 - y) * W_{13}$</p>
<p>$da_2 = da_3 <em> a’_3 </em> W_{23} = (a_3 - y) * W_{23}$</p>
<p>$dw_{12} = da_2 <em> a’_2 </em> X_1$</p>
<p>$dw_{22} = da_2 <em> a’_2 </em> X_2$</p>
<p>$db_{2} = da_2 * a’_2$</p>
<p>$dw_{11} = da_1 <em> a’_1 </em> X_1$</p>
<p>$dw_{21} = da_1 <em> a’_1 </em> X_2$</p>
<p>$db_{1} = da_1 * a’_1$</p>
<p><strong>参数更新</strong>：</p>
<p>$W_1 = w_1 - η * dw_1$</p>
<p>$W_2 = w_2 - η * dw_2$</p>
<p>$b = b - η * db$</p>
<p>根据上述的详细公式，我们分析一下3种情况：</p>
<ul>
<li>模型所有权重 W 初始化为0，所有偏置 b 初始化为0</li>
<li>模型所有权重 W 初始化为0，所有偏置 b 随机初始化</li>
<li>模型所有的权重 W 随机初始化，所有偏置 b 初始化为0</li>
</ul>
<h4 id="2-1-模型所有权重-W-初始化为0，所有偏置-b-初始化为0"><a href="#2-1-模型所有权重-W-初始化为0，所有偏置-b-初始化为0" class="headerlink" title="2.1 模型所有权重 W 初始化为0，所有偏置 b 初始化为0"></a>2.1 模型所有权重 W 初始化为0，所有偏置 b 初始化为0</h4><p>在此情况下， 第一个 batch 的前向传播过程时，$a_1 = f(0), a_2 = f(0), a_3 = sigmoid(0)$。在反向传播进行参数更新的时候，会发现 $a_1 = a_2 = f(0) \ \  =&gt;\ \  dw_{13} = dw_{23}$，$W_{13} = W_{23} = 0 \ \  =&gt; \ \ da_1 = da_2 = 0$。也就是说，在第一个 batch 中，只有 $W_{13}$ 和 ${W_{23}}$ 进行了更新并且<code>相等</code>，而其它参数均没有更新。</p>
<p>而当第二个 batch 传给神经网络时，$W_{13} = W_{23} \neq 0 \ \  =&gt;\ \  da_1 = da_2 \ \ =&gt; dw_{21} = dw_{22},\ dw_{11} = dw_{12}$。</p>
<p>以此类推，无论训练多少次，无论隐藏层神经元有多少个，由于权重的<code>对称性</code>，隐藏层神经单元的输出始终不变(权重相等)。我们希望不同的神经元能够有不同的输出，这样的神经网络才有意义。</p>
<p><strong>总结：将权重 W 初始化为0，会导致同一隐藏层的所有神经元输出都一致。对于后期不同的 batch，每一隐藏层的权重都能得到更新，但是每一隐藏层神经元的权重都是一致的，多个隐藏神经元的作用就如同1个神经元。</strong></p>
<h4 id="2-2-模型所有权重-W-初始化为0，所有偏置-b-随机初始化"><a href="#2-2-模型所有权重-W-初始化为0，所有偏置-b-随机初始化" class="headerlink" title="2.2 模型所有权重 W 初始化为0，所有偏置 b 随机初始化"></a>2.2 模型所有权重 W 初始化为0，所有偏置 b 随机初始化</h4><p>在此情况下，第一个 batch 的前向传播过程时，$a_1 = f(b_1), a_2 = f(b_2), a_3 = sigmoid(b_3)$，在反向传播过程时，$da_1 = da_2 = 0 \ \ =&gt; \ \ dw_{11} = dw_{12} = dw_{21} = dw_{22} = 0$，因此第一个 batch 中只有 $W_{13}, W_{23}$ 和 $B_{3}$ 能得到更新。</p>
<p>同理，在第二个 batch 反向传播的过程中，由于 $W_{13}$ 和 $W_{23}$ 不为0，因此所有的参数都能得到更新。<strong>这种方式存在更新较慢、梯度消失、梯度爆炸等问题，在实践中，通常不会选择该方法。</strong></p>
<h4 id="2-3-模型所有的权重-W-随机初始化，所有偏置-b-初始化为0"><a href="#2-3-模型所有的权重-W-随机初始化，所有偏置-b-初始化为0" class="headerlink" title="2.3 模型所有的权重 W 随机初始化，所有偏置 b 初始化为0"></a>2.3 模型所有的权重 W 随机初始化，所有偏置 b 初始化为0</h4><p>在此情况下，第一个 batch 的前向传播过程时，由于 $W_{13}$ 和 $W_{23}$ 不为0，因此所有的参数可以直接得到更新。</p>
<h2 id="结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！"><a href="#结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！" class="headerlink" title="结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！"></a><strong>结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！</strong></h2>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>线性回归</title>
    <url>/2021/09/13/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>用于解决回归问题，做法就是找一条最能拟合测试数据的直线，求该拟合直线的斜率和截距就是最值问题，可以通过梯度下降法解决。预测数据也比较简单，将数据代入直线中求出结果即可。</p>
<p><img src="https://z3.ax1x.com/2021/10/15/51Iy7R.png" alt=""></p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在举例之前，先介绍几种求误差的方法。</p>
<ol>
<li><p>MSE (Mean Square Error) 均方误差</p>
<p>$\frac{1}{m}\sum\limits_{n=1}^{m} (y - y_n)^2$</p>
</li>
<li><p>RMSE (Root Mean Square Error) 均方根误差</p>
<p>$\sqrt{\frac{1}{m}\sum\limits_{n=1}^m (y - y_n)^2}$</p>
</li>
<li><p>MAE (Mean Absolute Error) 平均绝对误差</p>
<p>$\frac{1}{m}\sum\limits_{n=1}^{m} |y - y_n|$</p>
<p>上述三种中，均方误差和均方根误差只是差了个根号，本质是一样的，都是求预测值与真实值的平方差。</p>
<p>因为是平方差，会对极度偏颇的数据特别敏感，因此会着重去拟合这部分数据。</p>
<p>而绝对值对所有的数据都是一样的，没有侧重点。</p>
</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.2</span>).reshape([<span class="number">100</span>,<span class="number">1</span>])</span><br><span class="line">y = <span class="number">3.5</span> * x + np.random.normal(<span class="number">0</span>, <span class="number">20</span>, <span class="number">100</span>).reshape([<span class="number">100</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">55</span>, <span class="number">55</span>], color = <span class="string">"red"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4PSGuR.png" alt=""></p>
<p>如上图所示，蓝色的离散点就是我们的测试数据，红色是要求的拟合曲线，方程为$y = ax + b$。</p>
<p>我们需要让这条直线的预测值和真实值的误差尽可能小，因此成本函数为</p>
<p>$cost = \frac{1}{m}\sum\limits_{n=1}^{m} (ax_n + b - y_n)^2$     （MSE）</p>
<p>此处$x_n$和$y_n$都是已知的数据，a和b才是我们要求的未知数。</p>
<p>该成本函数的偏导函数为</p>
<p>$\frac{dcost}{da} = \frac{2}{m}\sum\limits_{n=1}^{m} x_n(ax_n + b - y_n)$</p>
<p>$\frac{dcost}{db} = \frac{2}{m}\sum\limits_{n=1}^{m} (ax_n + b - y_n)$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((a * x + b - y) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ_a</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>(x * (a * x + b - y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ_b</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>(a * x + b - y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">a, b, eta, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        last_a = a</span><br><span class="line">        last_b = b</span><br><span class="line">        a = a - eta * DJ_a(a, b, x, y)</span><br><span class="line">        b = b - eta * DJ_b(a, b, x, y)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(last_a, last_b, x, y) - J(a, b, x, y)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> a, b</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">eta = <span class="number">0.02</span></span><br><span class="line">epsilon = <span class="number">1e-6</span></span><br><span class="line"></span><br><span class="line">a, b = gradient_descent(a, b, eta, epsilon)</span><br><span class="line"></span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">10</span> * a + b, <span class="number">10</span> * a + b], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4PfaGT.png" alt=""></p>
<p>效果也是挺不错的，不过这是一元的情况，可以写两个DJ_a和DJ_b，但如果是百元呢？</p>
<p>下面将会实现一种通用的梯度下降法。</p>
<p><br></p>
<p>先更改一下我们的成本函数，其中θ是系数矩阵，对于一元函数，它的shape就是(2, )，x需要再添一列（数值为1），这样x <em> a + 1 </em> b就正好是我们的直线方程预测值。</p>
<p>$cost = \frac{1}{m}\sum (x.dot(θ) - y)^2$     （MSE）</p>
<p>导函数</p>
<p>$\frac{dcost}{dθ} = \frac{2}{m} x.t.dot((x.dot(θ) - y))$</p>
<p>推导过程</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iWVJK.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iRJKJ.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">theta, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((x.dot(theta) - y) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">theta, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * (x.T.dot(x.dot(theta) - y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">theta, x, y, eta, n_iters = <span class="number">2e5</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">        last_theta = theta</span><br><span class="line">        theta = theta - eta * DJ(theta, x, y)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(last_theta, x, y) - J(theta, x, y)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i_iter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>然后我们来拟合刚刚随机的数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = np.hstack([x, np.ones([<span class="number">100</span>, <span class="number">1</span>])])</span><br><span class="line"></span><br><span class="line">theta = np.zeros([<span class="number">2</span>])</span><br><span class="line">eta = <span class="number">0.02</span></span><br><span class="line">y = y.reshape([<span class="number">100</span>])</span><br><span class="line">theta = gradient_descent(theta, x, y, eta)</span><br><span class="line"></span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">10</span> * theta[<span class="number">0</span>] + theta[<span class="number">1</span>], <span class="number">10</span> * theta[<span class="number">0</span>] + theta[<span class="number">1</span>]], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>],y.reshape([<span class="number">100</span>, <span class="number">1</span>]))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">theta 		<span class="comment"># array([3.4686148, -1.06100372])</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4ifDnH.png" alt=""></p>
<p>显然，这条直线还是能较好拟合这个测试数据的。</p>
<p>theta[0] = 3.4686148 ≈ 3.5，也和我们预设的基本一致。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">        self.y = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.y = y</span><br><span class="line">        self.<span class="built_in">len</span> = <span class="built_in">len</span>(X)</span><br><span class="line">        self.X_b = np.hstack([self.X, np.ones([self.<span class="built_in">len</span>, <span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">self, theta</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>((self.y - self.X_b.dot(theta)) ** <span class="number">2</span>) / self.<span class="built_in">len</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">self, theta</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.X_b.T.dot(self.X_b.dot(theta) - y) * <span class="number">2</span> / self.<span class="built_in">len</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e5</span>, epsilon = <span class="number">1e-8</span></span>):</span></span><br><span class="line">        <span class="keyword">assert</span> self.X_b <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, \</span><br><span class="line">        <span class="string">"must fit before transform"</span></span><br><span class="line">        </span><br><span class="line">        theta = np.zeros(self.X.shape[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * self.DJ(theta)</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(self.J(theta) - self.J(last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.intercept = self.theta[-<span class="number">1</span>]</span><br><span class="line">        self.coefficient = self.theta[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> theta</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> X.dot(self.coefficient) + self.intercept</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = X.dot(self.coefficient) + self.intercept</span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>((y_pred - y) ** <span class="number">2</span>) / <span class="built_in">len</span>(X)</span><br></pre></td></tr></tbody></table></figure>
<p>需要注意的是，第28行中<code>theta = theta - eta * self.DJ(theta)</code>，不能写成<code>theta -= eta * self.DJ(theta)</code>，这是因为现在last_theta和theta都指向同一块内存单元，-=是原地操作，在更改了theta的同时，last_theta也被更改了，而=则是重新开辟一块新的内存空间，然后再让theta指向它。</p>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X, y)</span><br><span class="line">lr.transform(eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"""lr.coefficient</span></span><br><span class="line"><span class="string">array([-0.09218218,  0.06825598, -0.00529991,  0.46137796,  0.17983213,</span></span><br><span class="line"><span class="string">        4.30941577,  0.02543425, -0.70440603,  0.17038895, -0.00977886,</span></span><br><span class="line"><span class="string">       -0.09173025,  0.01804173, -0.55937148])</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">   lr.intercept 	</span></span><br><span class="line"><span class="string">   0.4361364266724813</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>
<p>因为数据是13维的，没有办法可视化，我们只能使用MSE指标来衡量，其中lr.score(X, y) = 26.11494。</p>
<p>为了能看得清楚点，我们只使用其中一维来进行预测。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = X[:, <span class="number">5</span>]</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这里上面有一排数值都为50，这是因为在做调查的时候，最高一个档就是50（大于50W都只能填50W），因此这部分数据我们当做无效数据，直接丢弃掉。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iztpD.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = X[y &lt; <span class="number">50</span>]</span><br><span class="line">y = y[y &lt; <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>做一下筛选，只选y&lt;50的数据就行了。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iz00I.png" alt=""></p>
<p>然后开始整体，进行预测。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">X = X.reshape([-<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">lr.fit(X, y)</span><br><span class="line">theta = lr.transform(eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(X, lr.predict(X), color=<span class="string">"red"</span>)</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4izc9S.png" alt=""></p>
<p>lr.score(X, y) = 42.28978618974813</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>降低过拟合</title>
    <url>/2021/10/17/%E9%99%8D%E4%BD%8E%E8%BF%87%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<p>在训练模型的过程中，过拟合几乎是不可避免的。因此可以这么说，深度学习就是训练一个庞大的模型，在此基础上我们来降低过拟合的程度。相较之下，如果模型欠拟合了，貌似除了扩大模型就没有任何方法了。</p>
<p>下面介绍几个常用的降低过拟合的方法。</p>
<h2 id="一、正则化"><a href="#一、正则化" class="headerlink" title="一、正则化"></a>一、正则化</h2><h4 id="1-什么是正则化？"><a href="#1-什么是正则化？" class="headerlink" title="1. 什么是正则化？"></a>1. 什么是正则化？</h4><p>正则化的思想，即通过<code>限制</code>参数值的选择范围来控制模型容量。而正则化又分为岭回归（权重衰退）、LASSO 回归和弹性网络等。下面我着重说明的是岭回归。</p>
<p>首先，先来看一张极度过拟合的图像。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tSi5t.png" alt=""></p>
<p>这是上述图像的部分权重，无一例外，每个 $W_i$ 都极其的大，这也导致了图像十分的<code>陡峭</code>。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">array([-<span class="number">4.09493627e+11</span>,  <span class="number">5.76349998e+12</span>,  <span class="number">1.71369179e+11</span>, -<span class="number">9.99031499e+12</span>,</span><br><span class="line">        <span class="number">9.23500127e+11</span>,  <span class="number">9.26094018e+12</span>, -<span class="number">1.94635409e+12</span>, -<span class="number">5.40895631e+10</span>,</span><br><span class="line">        <span class="number">7.94601628e+11</span>, -<span class="number">7.85418293e+12</span>,  <span class="number">1.63904594e+12</span>,  <span class="number">1.67984971e+12</span>,</span><br><span class="line">       -<span class="number">9.87156668e+11</span>,  <span class="number">6.88721582e+12</span>, -<span class="number">1.64914180e+12</span>,  <span class="number">3.50775793e+11</span>,</span><br><span class="line">        <span class="number">2.60751888e+11</span>, -<span class="number">5.87372086e+12</span>,  <span class="number">1.66748622e+12</span>, -<span class="number">3.77434047e+12</span>,</span><br><span class="line">        <span class="number">1.00605169e+12</span>,  <span class="number">2.34190394e+12</span>, -<span class="number">8.57867266e+11</span>,  <span class="number">5.39077331e+12</span>,</span><br><span class="line">       -<span class="number">1.60621032e+12</span>,  <span class="number">2.95930952e+12</span>, -<span class="number">9.52432067e+11</span>, -<span class="number">1.74889800e+12</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>因此很自然而然地就能想到，那我限制 $W_i$ 的选择范围就行了嘛。从模型的角度来说，参数数量不变，但参数的选择范围小了，那模型自然也变小了。</p>
<p>于是就有了使用均方范数作为<code>硬性</code>限制，小的 θ 意味着更强的正则项。</p>
<p>需要注意的是，偏置 <strong>b</strong> 并没有加入到正则化中来，毕竟我们的目标是让曲线更加的<code>平缓</code>，跟偏置 <strong>b</strong> 没有什么关系。</p>
<p>$min l(w,b) \quad subject\ to \quad ||W||^2 \le θ,\quad\quad ||W||^2 = \sum W^2$</p>
<p>但硬性限制优化求导比较麻烦，结果也会比较<code>硬</code>，一般使用均方范数作为<code>柔性</code>限制。</p>
<p>$loss = l(w, b) + \frac{λ}{2}||W||^2$</p>
<p>其中超参数 λ 控制了正则项的重要程度</p>
<ul>
<li>λ = 0，即无正则化，和普通的损失函数没有区别。</li>
<li>λ → $\infty$，此时 W → <strong>0</strong></li>
</ul>
<h4 id="2-如何影响损失函数？"><a href="#2-如何影响损失函数？" class="headerlink" title="2. 如何影响损失函数？"></a>2. 如何影响损失函数？</h4><p>可以看到，原先的极值点 $\widetilde{W}^*$ 在绿色椭圆的圆心，但在加入正则化项之后，极值点在两者之间做了一个权衡，取在了切点。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tFpqS.png" alt=""></p>
<h4 id="3-参数更新法则"><a href="#3-参数更新法则" class="headerlink" title="3. 参数更新法则"></a>3. 参数更新法则</h4><ul>
<li><p>计算梯度</p>
<p>$\frac{\partial}{\partial W}(l(W, b) + \frac{λ}{2}||W||^2) = \frac{\partial l(W, b)}{\partial W} + λW$</p>
</li>
<li><p>更新参数</p>
<p>$W’ = W - η(\frac{\partial l(W, b)}{\partial W} + λW) = (1 - ηλ)W - η\frac{\partial l(W, b)}{\partial W}$</p>
</li>
</ul>
<p>通常 ηλ &lt; 1，因此每次在参数更新时，都会对 W 进行<code>缩小</code>，也就是权重衰退这个名字的由来。</p>
<h4 id="4-岭回归"><a href="#4-岭回归" class="headerlink" title="4. 岭回归"></a>4. 岭回归</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RidgeRegression</span>(<span class="params">degree,alpha</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"ridge_reg"</span>,Ridge(alpha=alpha))</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure>
<p>alpha = 0，即普通多项式回归。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UMrqJ.png" alt=""></p>
<p>alpha = 1e-4，曲线一下子就柔和了。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQeL4.png" alt=""></p>
<p>alpha = 100，有点像二次曲线了。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQJyD.png" alt=""></p>
<p>alpha → $\infty$，为了控制损失函数，只能将权重设为0。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQhYq.png" alt=""></p>
<h4 id="5-Tensorflow-岭回归实现"><a href="#5-Tensorflow-岭回归实现" class="headerlink" title="5. Tensorflow 岭回归实现"></a>5. Tensorflow 岭回归实现</h4><p>为了能够过拟合，只设置了20个训练样本，每个样本有 200 个特征。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">n_train = <span class="number">20</span></span><br><span class="line">n_test = <span class="number">100</span></span><br><span class="line">num_inputs = <span class="number">200</span></span><br><span class="line">batch_size = <span class="number">5</span></span><br><span class="line">num_outputs = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">true_w, true_b = tf.ones([num_inputs, <span class="number">1</span>]) * <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">train_data = d2l.synthetic_data(true_w, true_b, n_train)</span><br><span class="line">test_data = d2l.synthetic_data(true_w, true_b, n_test)</span><br><span class="line">train_iter = d2l.load_array(train_data, batch_size)</span><br><span class="line">test_iter = d2l.load_array(test_data, batch_size, is_train=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>参数初始化，线性模型没那么多讲究，初始化为0也行。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_params</span>(<span class="params">num_inputs, num_outputs</span>):</span></span><br><span class="line">    W = tf.Variable(tf.random.normal(mean=<span class="number">1</span>, shape=(num_inputs, <span class="number">1</span>)))</span><br><span class="line">    b = tf.Variable(tf.zeros(num_outputs))</span><br><span class="line">    <span class="keyword">return</span> [W, b]</span><br><span class="line"></span><br><span class="line">W, b = init_params(num_inputs, num_outputs)</span><br></pre></td></tr></tbody></table></figure>
<p>网络模型</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 线性模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span>(<span class="params">X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> X @ W + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># L2正则化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l2_penalty</span>(<span class="params">W</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_sum(tf.<span class="built_in">pow</span>(W, <span class="number">2</span>)) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MSE损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">y, y_hat</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.square(y - y_hat))</span><br></pre></td></tr></tbody></table></figure>
<p>训练函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">lambd, epochs = <span class="number">100</span>, lr = <span class="number">0.003</span></span>):</span></span><br><span class="line">    animator = d2l.Animator(xlabel=<span class="string">'epochs'</span>, ylabel=<span class="string">'loss'</span>, yscale=<span class="string">'log'</span>,</span><br><span class="line">                            xlim=[<span class="number">5</span>, epochs], legend=[<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                <span class="comment"># 最终损失函数添加正则化项</span></span><br><span class="line">                l = loss(y, net(X)) + lambd * l2_penalty(W)</span><br><span class="line">            grads = tape.gradient(l, [W, b])</span><br><span class="line">            <span class="keyword">for</span> param, grad <span class="keyword">in</span> <span class="built_in">zip</span>([W, b], grads):</span><br><span class="line">                param.assign_sub(grad * lr)</span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            animator.add(epoch +<span class="number">1</span>, (d2l.evaluate_loss(net, train_iter, loss),</span><br><span class="line">                                   (d2l.evaluate_loss(net, test_iter, loss))))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"W的L2范数是"</span>, tf.norm(W).numpy())</span><br></pre></td></tr></tbody></table></figure>
<p>train(lambd = 0)</p>
<p>模型没有泛化，光是训练误差减小，典型的过拟合。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5t4RR1.png" alt=""></p>
<p>train(lambd = 3)</p>
<p>训练和测试误差都在同步降低，且两者差距较上述过拟合之下减小了不少。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIZ9A.png" alt=""></p>
<p>train(lambd = 20)</p>
<p>同上，效果更好了。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIKnf.png" alt=""></p>
<p>train(lambd = 100)</p>
<p>虽然图形十分曲折，但总体趋势是在下降且损失更低了。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIJ9s.png" alt=""></p>
<h4 id="6-LASSO-回归"><a href="#6-LASSO-回归" class="headerlink" title="6. LASSO 回归"></a>6. LASSO 回归</h4><p>和岭回归类似，但正则项使用的是 L1 范数。但绝对值就意味着不可导，不好优化。</p>
<p>$loss = l(w, b) + λ||W||,\quad\quad ||W|| = \sum |W|$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LassoRegression</span>(<span class="params">degree,alpha</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"lasso_reg"</span>,Lasso(alpha=alpha))</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure>
<p>alpha = 0</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlPne.png" alt=""></p>
<p>alpha = 0.1</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlEtI.png" alt=""></p>
<p>alpha = 1</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5Ulm1f.png" alt=""></p>
<p>alpha = 10</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlMng.png" alt=""></p>
<p>通过对比，可以发现一个比较有意思的事情。Ridge 回归在增大 alpha 时，曲线还是<code>弯曲的</code>，但没那么陡峭，因为权重都比较小。而 LASSO 回归在增大 alpha 时，并没有那么多弯曲的地方，因此它的权重大部分都是0。</p>
<p>至于为什么会这样呢？这也和他们正则化项的式子有关。</p>
<h4 id="7-Ridge-和-LASSO-区别"><a href="#7-Ridge-和-LASSO-区别" class="headerlink" title="7. Ridge 和 LASSO 区别"></a>7. Ridge 和 LASSO 区别</h4><p><strong>Ridge 回归</strong> 的梯度是会随着离极值点越近而渐渐<code>变小</code>的，因此所有的参数是同步在更新，从图像上来看就是沿着梯度慢慢想极值点靠拢，因此不会有很多权重被设为0。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlxEj.png" alt=""></p>
<p><strong>LASSO 回归</strong> 的梯度是一个定值，只能由 η 来控制大小，这样就会造成部分权重会早早停在零点，这可以起到一定的特征筛选的作用，虽然也有可能将有用的特征也筛选掉。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5U3pee.png" alt=""></p>
<h4 id="8-弹性网络"><a href="#8-弹性网络" class="headerlink" title="8. 弹性网络"></a>8. 弹性网络</h4><p>顾名思义，是个弹性(折中)的网络，它结合岭回归和 LASSO 回归的思想。</p>
<p>$loss = l(w, b) + γλ||W|| + \frac{(1-γ)}{2}λ||W||^2,\quad\quad γ∈[0,1]$</p>
<p>γ 代表一种比率，取值为 0% ~ 100%，当γ = 0时，该弹性网络为岭回归；当γ = 1时，该弹性网络为 LASSO 回归。</p>
<h2 id="二、丢弃法"><a href="#二、丢弃法" class="headerlink" title="二、丢弃法"></a>二、丢弃法</h2><h4 id="1-什么是丢弃法？"><a href="#1-什么是丢弃法？" class="headerlink" title="1. 什么是丢弃法？"></a>1. 什么是丢弃法？</h4><p>丢弃法，又称 <strong>DropOut</strong>，具体做法是在每一层输出后，随机将一定量的输出置为0。那么这么做的目的是为什么呢？</p>
<p>一个好的模型需要对输入数据的扰动<strong>鲁棒</strong>。</p>
<ul>
<li>使用有噪音的数据等价于正则化。</li>
<li>丢弃法则是在层之间加入噪音，同时也降低了模型的容量。</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/10/18/5admbq.png" alt=""></p>
<p>诶，那么这时有人要问了，你这随机置为0，对x的期望都变掉了。为了防止这样的情况，我们不单单是对数据置0，对另一部分的数据也要改动，保证期望不变。</p>
<p>注：p 是一个概率值，将神经元置为0的比率，$p∈[0,1]$。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5awNlQ.png" alt=""></p>
<script type="math/tex; mode=display">
Ex_i' = p * X_i * 0 + (1-p) \frac{x_i}{1-p} = x_i</script><p>左边没有 Dropout，右边有 Dropout。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5a0N4K.png" alt=""></p>
<h4 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h4><ul>
<li>丢弃法将一些输出项随机置0来控制模型复杂度。</li>
<li>常作用在多层感知机的隐藏层输出上。</li>
<li>丢弃概率是控制模型复杂度的超参数。</li>
</ul>
<h4 id="3-Tensorflow-实现"><a href="#3-Tensorflow-实现" class="headerlink" title="3. Tensorflow 实现"></a>3. Tensorflow 实现</h4><p>dropout层</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout_layer</span>(<span class="params">X, dropout</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= dropout &lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> dropout == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tf.zeros_like(X)</span><br><span class="line">    <span class="keyword">if</span> dropout == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># uniform 均匀分布</span></span><br><span class="line">    mask = tf.random.uniform(X.shape, minval = <span class="number">0</span>, maxval = <span class="number">1</span>) &lt; (<span class="number">1</span> - dropout)</span><br><span class="line">    <span class="comment"># 不用 X[mask] 是因为乘法运算比匹配运算快</span></span><br><span class="line">    <span class="keyword">return</span> tf.cast(mask, dtype=tf.float32) * X / (<span class="number">1.0</span> - dropout)</span><br></pre></td></tr></tbody></table></figure>
<p>测试 dropout</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 测试 Dropout</span></span><br><span class="line">X = tf.reshape(tf.<span class="built_in">range</span>(<span class="number">16</span>, dtype=tf.float32), [<span class="number">2</span>,<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(dropout_layer(X, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(dropout_layer(X, <span class="number">0.5</span>))</span><br><span class="line"><span class="built_in">print</span>(dropout_layer(X, <span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure>
<p>模型定义</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line">num_hidden1 = <span class="number">256</span></span><br><span class="line">num_hidden2 = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">dropout1 = <span class="number">0.5</span></span><br><span class="line">dropout2 = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_outputs, num_hidden1, num_hidden2</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.input_layer = keras.layers.Flatten()</span><br><span class="line">        self.hidden1 = keras.layers.Dense(num_hidden1, activation = <span class="string">"relu"</span>)</span><br><span class="line">        self.hidden2 = keras.layers.Dense(num_hidden2, activation = <span class="string">"relu"</span>)</span><br><span class="line">        self.output_layer = keras.layers.Dense(num_outputs, activation = <span class="string">"softmax"</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs, training=<span class="literal">None</span></span>):</span></span><br><span class="line">        X = self.input_layer(inputs)</span><br><span class="line">        X = self.hidden1(X)</span><br><span class="line">        <span class="keyword">if</span> training:</span><br><span class="line">            X = dropout_layer(X, dropout1)</span><br><span class="line">        X = self.hidden2(X)</span><br><span class="line">        <span class="keyword">if</span> training:</span><br><span class="line">            X = dropout_layer(X, dropout2)</span><br><span class="line">        X = self.output_layer(X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line">    </span><br><span class="line">net = Net(num_outputs, num_hidden1, num_hidden2)</span><br></pre></td></tr></tbody></table></figure>
<p>训练</p>
<p>这里说明一下损失函数的使用情况，我之前也一直没有注意过。</p>
<ul>
<li>SparseCategoricalCrossentropy 会给 label 做一个 one-hot 编码。</li>
<li>CategoricalCrossentropy 不会给 label做 one-hot 编码。</li>
<li>from_logits = True 用于最后输出层没有经过 softmax 的情况，会给结果补做一个 softmax。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">epochs = <span class="number">10</span></span><br><span class="line">lr = <span class="number">0.5</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line"><span class="comment"># 若输出没有经过 softmax,需使用 keras.losses.SparseCategoricalCrossentropy(from_logits=True)</span></span><br><span class="line">loss = keras.losses.SparseCategoricalCrossentropy()</span><br><span class="line">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class="line">trainer = keras.optimizers.SGD(learning_rate = lr)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, epochs, trainer)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/10/19/5woMBn.png" alt=""></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>过拟合和欠拟合</title>
    <url>/2021/09/28/%E8%BF%87%E6%8B%9F%E5%90%88%E5%92%8C%E6%AC%A0%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>继之前的<a href="/2021/09/27/多项式回归/">多项式回归</a>，如果 <code>degree</code> 设置过大或者过小会出现什么样的问题呢？</p>
<p>在此之前，先来说明一下 <a href="/2021/09/14/数据归一化/">归一化</a> 的必要性。多项式回归采用了特征组合的方式，当 <code>degree</code> 为100时，最高次就是100次，而最低次只是常数级，各个维度数值之间的跨度非常大，这就导致 <code>eta</code> 必须设置得非常小，否则稍大一点，就会无法拟合，变成 <code>nan</code> 。</p>
<p>当 degree 为10时， eta就必须设置成$10^{-19}$，很不利于我们训练模型，所以在数据与距离阶段除了要多项式化还得归一化！</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4feNrT.png" alt=""></p>
<p>根据上述要求，改进了一下多项式回归的类。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolynomialRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, degree</span>):</span></span><br><span class="line">        self.degree = degree</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">        self.X = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        self.X = self.standardization(self.X)</span><br><span class="line">        </span><br><span class="line">        initial_theta = np.zeros([self.X.shape[<span class="number">1</span>]])</span><br><span class="line">        theta = self._gradient_descent(self.X, y, initial_theta, eta, n_iters, epsilon)</span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.coefficient = theta[<span class="number">1</span>:]</span><br><span class="line">        self.intercept = theta[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    <span class="comment"># 第一列全为1方差为0要单独处理，改成第一列全为0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">standardization</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.hstack([np.zeros([<span class="built_in">len</span>(X), <span class="number">1</span>]), (X[:, <span class="number">1</span>:] - np.mean(X[:, <span class="number">1</span>:], axis = <span class="number">0</span>)) / np.std(X[:, <span class="number">1</span>:], axis = <span class="number">0</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多项式化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPolynomialFeatures</span>(<span class="params">self, X, start, col_val, degree</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">X, result, start, col_val, degree</span>):</span></span><br><span class="line">            result.append(col_val)</span><br><span class="line">            <span class="keyword">if</span>(degree == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, X.shape[<span class="number">1</span>]):</span><br><span class="line">                dfs(X, result, start, col_val * X[:, i].reshape([-<span class="number">1</span>, <span class="number">1</span>]), degree - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        dfs(X, result, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), degree)</span><br><span class="line">        <span class="keyword">return</span> np.squeeze(np.array(result), -<span class="number">1</span>).T</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测也要多项式化和归一化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X_b = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        X_b = self.standardization(X_b)</span><br><span class="line">        y_pred = X_b.dot(self.theta)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># MSE</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = self.predict(X)</span><br><span class="line">        <span class="keyword">return</span> np.mean((y - y_pred) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gradient_descent</span>(<span class="params">self, X_b, y, theta, eta, n_iters, epsilon</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line">        </span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            gradient = DJ(X_b, y, theta)</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * gradient</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p>当然直接使用 sklearn 中的 <code>Pipeline</code> 可以更加简便的实现这一切。</p>
<p><code>Pipeline</code> 具体运作机制就是逐行运行，上一行的输出就是下一行的输入，因此我们先进行多项式化，再归一化，最后放入线性回归中训练模型。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialRegression</span>(<span class="params">X,y,degree</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"lin_reg"</span>,LinearRegression())</span><br><span class="line">    ])</span><br><span class="line">    pipeline.fit(X,y)</span><br><span class="line">    <span class="keyword">return</span> pipeline.predict(X)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="数据拟合"><a href="#数据拟合" class="headerlink" title="数据拟合"></a>数据拟合</h2><p>先写一个绘制拟合曲线的函数便于我们观测结果。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_matching_curve</span>(<span class="params">X, y, degree, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span></span>):</span></span><br><span class="line">    poly_reg = PolynomialRegression(degree)</span><br><span class="line">    poly_reg.fit(X, y, eta, n_iters)</span><br><span class="line">    theta = poly_reg.theta</span><br><span class="line">    pred_y = poly_reg.X.dot(theta)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], y)</span><br><span class="line">    plt.plot(X[:, <span class="number">0</span>], pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> poly_reg</span><br></pre></td></tr></tbody></table></figure>
<p>当 degree 为0时，也就是最高次为0次，拟合曲线成一条直线，这就是欠拟合。</p>
<p>毕竟函数只有一个常数嘛，合理。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">plot_matching_curve(x.reshape([-<span class="number">1</span>, <span class="number">1</span>]), y, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/28/4fEsRP.png" alt=""></p>
<p>再来看看 degree 分别为1，2的情况，是不是越来越接近我们的拟合曲线了。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fVdyT.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fV50e.png" alt=""></p>
<p>当 degree 为3时，曲线终于拟合了我们的数据。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fZQ91.png" alt=""></p>
<p>那我们再看看 degree 为10，50，100，200的情况。</p>
<p>很容易可以观察出，曲线变得越来越复杂，也越来越能拟合我们的训练数据，这是因为随着 degree 的增大，参数数量的增长使得我们的模型可以将训练的数据给<code>记住</code>，但这真的是我们想要的吗？</p>
<p>不，我们想要的是<code>泛化</code>能力，是在测试数据乃至之后模型上线后的真实数据上也能有非常好的预测能力。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f1qaV.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f39q1.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f3ia6.png" alt=""></p>
<p>之前也说过了，多项式化是阶乘式地增长，一旦 <code>degree</code> 过大，直接就会导致栈溢出。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f3nsA.png" alt=""></p>
<p><br></p>
<h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><p>通过观察学习曲线，也可以帮助我们判断出模型是否有过拟合或欠拟合的情况。它是绘制模型在训练集和测试集上的性能函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_poly_reg</span>(<span class="params">degree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>, PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std"</span>, StandardScaler()),</span><br><span class="line">        (<span class="string">"reg"</span>, LinearRegression())</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">X, y, degree</span>):</span></span><br><span class="line">    train_mse = []</span><br><span class="line">    test_mse = []</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br><span class="line">    poly_reg = get_poly_reg(degree)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(X) + <span class="number">1</span>):</span><br><span class="line">        poly_reg.fit(X_train[:i], y_train[:i])</span><br><span class="line">        train_pred = poly_reg.predict(X_train[:i])</span><br><span class="line">        test_pred = poly_reg.predict(X_test)</span><br><span class="line">        train_mse.append(np.mean(np.square(train_pred - y_train[:i])))</span><br><span class="line">        test_mse.append(np.mean(np.square(test_pred - y_test)))</span><br><span class="line">        </span><br><span class="line">    plt.plot(np.arange(<span class="number">2</span>, <span class="built_in">len</span>(X)+<span class="number">1</span>), train_mse, label=<span class="string">"train"</span>)</span><br><span class="line">    plt.plot(np.arange(<span class="number">2</span>, <span class="built_in">len</span>(X)+<span class="number">1</span>), test_mse, label=<span class="string">"test"</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.axis([<span class="number">0</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">5</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这次我们把目标函数换成二次函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = np.random.uniform(-<span class="number">3</span>,<span class="number">3</span>,size=<span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y = <span class="number">0.5</span> * X**<span class="number">2</span> + X + <span class="number">4</span> + np.random.normal(<span class="number">0</span>,<span class="number">1</span>,size = <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>degree = 1</p>
<p>随着样本数量的增加 test 的误差在减小，train 的误差在增加，而当样本到了一定程度后，两者也没有保持在一个较小的程度上。这时说明模型欠拟合。</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5u1WSP.png" alt=""></p>
<p>degree = 2</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5uQx3V.png" alt=""></p>
<p>随着样本数量的增加 test 的误差在减小，train 的误差在增加，而当样本到了一定程度后，两者基本<code>持平</code>，保持在一个较小的程度上。这时模型已经拟合。</p>
<p>degree = 10</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5ul2KU.png" alt=""></p>
<p>随着样本的增加 test 的误差在减小，train 的误差在增加，但当样本到了一定程度后，在 train 上的误差要比在 test 上的误差小得多，这时就要注意是不是过拟合了。</p>
<p>degree = 100</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5ulxIA.png" alt=""></p>
<p>此时 test 上的误差已经飙到天上去了，妥妥的过拟合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在训练数据集上表现良好，却在测试数据集上表现差劲的就是<code>过拟合</code>，这时候要降低参数数量。</p>
<p>而在训练数据集上表现就不尽人意的有可能是<code>欠拟合</code>（也有可能是模型压根不对等问题），这时候可以试试增大模型，增加参数数量。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>软件测试考试复习</title>
    <url>/2021/12/25/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h2><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p><strong>产物</strong>：软件需求规格说明书,需要确定用户对软件的需求,要作到明确、无歧义。不涉及具体实现方法。用户能看得明白，开发人员也可据此进行下面的工作（概要设计）</p>
<h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><p><strong>产物</strong>：软件概要设计说明书，说明系统模块划分、选择的技术路线等，整体说明软件的实现思路。并且需要指出关键技术难点等。  </p>
<h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><p><strong>产物</strong>：软件详细设计说明书，对概要设计的进一步细化，一般由各部分的担当人员依据概要设计分别完成，然后在集成，是具体的实现细节。理论上要求可以照此编码。</p>
<p>一般说来，需求分析属于软件定义方面；而概要设计、详细设计属于软件开发的阶段</p>
<h2 id="软件测试级别"><a href="#软件测试级别" class="headerlink" title="软件测试级别"></a>软件测试级别</h2><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>单元测试是对程序中的某个接口或者模块进行测试，主要使用白盒测试，由编程人员（主导）和测试人员共同完成。</p>
<p>单元测试的目的是开发人员确定这段子程序做了它应该做的事。</p>
<h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>集成测试是单元测试的逻辑扩展。它的最简单的形式是：两个已经测试过的单元组合成一个组件，并且测试它们之间的接口。</p>
<p>集成测试的目的旨在测试各个组件间是否能互相配合，正常工作。</p>
<p>集成测试又分为一次性集成方式和渐增式集成方式。</p>
<ul>
<li><p><strong>一次性集成方式</strong></p>
<p>首先对各个单元分别进行测试，然后将所有单元组装在一起进行测试，最终得到要求的软件系统。</p>
</li>
<li><p><strong>渐增式集成方式</strong></p>
<p>首先对某两三个单元进行测试，然后将这些单元逐步组装成较大的系统。在组装的过程中，一边连接一边测试，以发现连接连接过程中产生的问题，最后完成所有单元的继承，构造为一个完整的软件系统。</p>
</li>
</ul>
<h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><p>系统功能测试需要在集成测试完成之后进行，采用黑盒测试，只检查程序功能是否按照需求规格说明书能够正常被使用。包含用户界面、各种操作、不同的数据输入输出和存储等的测试。</p>
<p>系统非功能测试是在实际运行环境或模拟实际运行环境，内容包括负载、性能、压力、灾难等测试。</p>
<h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><p>验收测试一般根据产品需求规格说明书严格检查产品，逐行逐字地对照说明书上对软件产品所做出的各方面要求，确保所开发的软件产品符合用户的各项要求。</p>
<p>验收测试方法有正式验收测试，alpha 测试和 beta 测试<strong>。</strong></p>
<ul>
<li><p>alpha 测试</p>
<p>软件开发公司内部人员在模拟实际操作环境下进行的测试。</p>
</li>
<li><p>beta 测试</p>
<p>在 alpha 测试之后，由软件的<strong>最终用户</strong>们进行试用，公司会要求用户报告异常情况，再对 beta 版本进行修正和完成，最终得到正式发布的版本。</p>
</li>
</ul>
<h4 id="软件测试步骤"><a href="#软件测试步骤" class="headerlink" title="软件测试步骤"></a>软件测试步骤</h4><p>软件测试要经过的步骤是：单元测试→集成测试→确认测试→系统测试。 </p>
<p><strong>单元测试</strong>：对源程序中每一个模块单元进行测试，检查各个模块是否正确实现规定的功能，从而发现模块在编码中或算法中的错误。该阶段涉及==编码和详细设计文档==。 </p>
<p><strong>集成测试</strong>：是为了检查软件体系结构的有关问题，也就是检查==概要设计==是否合理有效。 </p>
<p><strong>确认测试</strong>：主要是检查已实现的软件是否满足==需求规格说明书==中的各种需求。 </p>
<p><strong>系统测试</strong>：是把已确认的软件与其他系统元素（如硬件、其他支持软件、数据、人工等）结合在一起进行测试。以确定软件是否可以支付使用。</p>
<h2 id="逻辑覆盖"><a href="#逻辑覆盖" class="headerlink" title="逻辑覆盖"></a>逻辑覆盖</h2><p>逻辑覆盖率：语句覆盖 &lt; 条件覆盖 &lt; 判定覆盖 &lt; 条件判定覆盖 &lt; 条件组合覆盖 &lt; 路径覆盖</p>
<h4 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h4><p>使程序中每个==可执行语句==至少执行一次</p>
<p><img src="https://s4.ax1x.com/2021/12/25/TdQSLF.png" alt="image"></p>
<p>覆盖条件：</p>
<blockquote>
<p>条件1：T，条件3：T</p>
</blockquote>
<h4 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h4><p>使得程序中每一个==判断==至少取真一次取假一次</p>
<p><img src="https://s4.ax1x.com/2021/12/25/Td1taQ.png" alt="image"></p>
<p>覆盖条件：</p>
<blockquote>
<p>条件1：T，条件3：F<br>条件1：F，条件3：T</p>
</blockquote>
<h4 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h4><p>使每个的判断中==每个条件==的可能取值至少满足一次</p>
<p><img src="https://s4.ax1x.com/2021/12/25/Td3ylt.png" alt="image"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">判断表达式1：</span><br><span class="line">设条件 a&gt;0 为真 记T1</span><br><span class="line">			假 记F1</span><br><span class="line">条件 b&gt;0   为真 记T2</span><br><span class="line">			假 记F2 </span><br><span class="line">			</span><br><span class="line">判断表达式3：</span><br><span class="line">设条件 a&gt;1 为真 记T3</span><br><span class="line">			假 记F3</span><br><span class="line">条件 c&gt;1   为真 记T4</span><br><span class="line">			假 记F4		</span><br></pre></td></tr></tbody></table></figure>
<p>覆盖条件：</p>
<blockquote>
<p>T1，F2，T3，F4<br>F1，T2，F3，T4</p>
</blockquote>
<h4 id="条件判定覆盖"><a href="#条件判定覆盖" class="headerlink" title="条件判定覆盖"></a>条件判定覆盖</h4><p>使每个的判断中==每个条件==的可能取值至少满足一次的同时，还需要让==每个判定==各真假各一次，即条件覆盖 + 判定覆盖。</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TdGAK0.png" alt="image"></p>
<p>覆盖条件用例：</p>
<blockquote>
<p>T1,T2,T3,T4<br>F1,F2,F3,F4</p>
</blockquote>
<h4 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h4><p>使所有可能的==条件取值==组合至少执行一次</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TdGcdS.png" alt="image"></p>
<p>重点：<strong>所有条件取值的组合</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>编号</th>
<th>覆盖条件取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>T1，T2</td>
</tr>
<tr>
<td>2</td>
<td>T1，F2</td>
</tr>
<tr>
<td>3</td>
<td>F1，T2</td>
</tr>
<tr>
<td>4</td>
<td>F1，F2</td>
</tr>
<tr>
<td>5</td>
<td>T3，T4</td>
</tr>
<tr>
<td>6</td>
<td>T3，F4</td>
</tr>
<tr>
<td>7</td>
<td>F3，T4</td>
</tr>
<tr>
<td>8</td>
<td>F3，F4</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>覆盖条件</th>
<th>覆盖组合</th>
</tr>
</thead>
<tbody>
<tr>
<td>T1，T2 , T3 , T4</td>
<td>1,5</td>
</tr>
<tr>
<td>T1，F2 , T3 , F4</td>
<td>2,6</td>
</tr>
<tr>
<td>F1，T2 , F3 , T4</td>
<td>3,7</td>
</tr>
<tr>
<td>F1，F2 , F3 , F4</td>
<td>4,8</td>
</tr>
</tbody>
</table>
</div>
<h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h4><p>是程序中==所有可能==执行的路径都执行一遍</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TdGhzn.png" alt="image"></p>
<p>继上面的的条件取值表格</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>覆盖路径</th>
<th>覆盖组合</th>
</tr>
</thead>
<tbody>
<tr>
<td>1-2-4</td>
<td>1,5</td>
</tr>
<tr>
<td>1-2-5</td>
<td>1,8</td>
</tr>
<tr>
<td>1-3-4</td>
<td>4,7</td>
</tr>
<tr>
<td>1-3-5</td>
<td>4,8</td>
</tr>
</tbody>
</table>
</div>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h4 id="负载测试（Large-amount-of-users）"><a href="#负载测试（Large-amount-of-users）" class="headerlink" title="负载测试（Large amount of users）"></a>负载测试（Large amount of users）</h4><p>负载测试是一种性能测试，指数据在超负荷环境中运行，程序是否能够承担。 关注点：how much</p>
<h4 id="压力测试（Too-many-users-too-much-data-too-little-time-and-too-little-room）"><a href="#压力测试（Too-many-users-too-much-data-too-little-time-and-too-little-room）" class="headerlink" title="压力测试（Too many users, too much data, too little time and too little room）"></a>压力测试（Too many users, too much data, too little time and too little room）</h4><p>压力测试（又叫强度测试）也是一种性能测试，它在系统资源特别低的情况下软件系统运行情况，目的是找到系统在哪里失效以及如何失效的地方。</p>
<h4 id="容量测试-Large-amounts-of-data"><a href="#容量测试-Large-amounts-of-data" class="headerlink" title="容量测试(Large amounts of data)"></a>容量测试(Large amounts of data)</h4><p>确定系统可处理同时在线的最大用户数 关注点：how much（而不是how fast） 容量测试，通常和数据库有关，容量和负载的区别在于：容量关注的是大容量，而不需要关注使用中的实际表现。</p>
<p>其中，容量测试、负载测试、压力测试的英文解释为：<br> Volume Testing = Large amounts of data<br> Load Testing = Large amount of users<br> Stress Testing = Too many users, too much data, too little time and too little room</p>
<p><strong>负载测试和性能测试的主要区别在于负载测试时，系统负载是逐渐增加的，而不是一步到位，负载测试需要观察系统在各种不同的负载情况下是否都能够正常工作。</strong></p>
<h2 id="边界值测试"><a href="#边界值测试" class="headerlink" title="边界值测试"></a>边界值测试</h2><h4 id="基本边界值测试"><a href="#基本边界值测试" class="headerlink" title="基本边界值测试"></a>基本边界值测试</h4><p>测试用例数：4n + 1</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TwRIWd.png" alt="image"></p>
<h4 id="健壮边界值测试"><a href="#健壮边界值测试" class="headerlink" title="健壮边界值测试"></a>健壮边界值测试</h4><p>测试用例数：6n + 1</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TwRTSA.png" alt="image"></p>
<h4 id="最坏情况边界值测试"><a href="#最坏情况边界值测试" class="headerlink" title="最坏情况边界值测试"></a>最坏情况边界值测试</h4><p>测试用例数：$5^n$</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TwRHyt.png" alt="image"></p>
<h4 id="健壮最坏情况边界值测试"><a href="#健壮最坏情况边界值测试" class="headerlink" title="健壮最坏情况边界值测试"></a>健壮最坏情况边界值测试</h4><p>测试用例数：$7^n$</p>
<p><img src="https://s4.ax1x.com/2021/12/26/TwWpSs.png" alt="image"></p>
<h2 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h2><p><img src="https://s4.ax1x.com/2021/12/26/TwoefO.md.png" alt="image"></p>
<p><img src="https://s4.ax1x.com/2021/12/26/TwonpD.png" alt="image"></p>
]]></content>
      <categories>
        <category>exam</category>
      </categories>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/2021/11/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><p>可以看到在 mybatis-config.xml 中有一个标签叫做 <code>datasource</code>（数据源），其中的 <code>type</code> 为 <code>pooled</code>，即池化，引入了数据库连接池的概念。</p>
<h2 id="1、什么是连接池"><a href="#1、什么是连接池" class="headerlink" title="1、什么是连接池"></a>1、什么是连接池</h2><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。</p>
<h2 id="2、为什么要使用连接池"><a href="#2、为什么要使用连接池" class="headerlink" title="2、为什么要使用连接池"></a>2、为什么要使用连接池</h2><p>数据库连接是一种关键的<strong>有限</strong>的<strong>昂贵</strong>的资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，<strong>每次操作都打开一个物理连接，使用完都关闭连接</strong>，这样造成系统的<code>性能低下</code>。</p>
<p> 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的数据库联接对象)，由应用程序动态地对池中的连接进行申请、使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。 连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。 </p>
<h2 id="3、传统的连接机制与数据库连接池的运行机制区别"><a href="#3、传统的连接机制与数据库连接池的运行机制区别" class="headerlink" title="3、传统的连接机制与数据库连接池的运行机制区别"></a>3、传统的连接机制与数据库连接池的运行机制区别</h2><h4 id="3-1、不使用连接池执行一条-SQL-命令"><a href="#3-1、不使用连接池执行一条-SQL-命令" class="headerlink" title="3.1、不使用连接池执行一条 SQL 命令"></a>3.1、不使用连接池执行一条 SQL 命令</h4><p><img src="https://z3.ax1x.com/2021/11/21/IjEE0f.png" alt=""></p>
<ol>
<li>TCP建立连接的三次握手</li>
<li>MySQL认证的三次握手</li>
<li>真正的SQL执行</li>
<li>MySQL的关闭</li>
<li>TCP的四次挥手关闭</li>
</ol>
<p>可以看到，为了执行一条SQL，却多了非常多我们不关心的网络交互。</p>
<p>优点：</p>
<ul>
<li>实现简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>网络 IO 较多</li>
<li>数据库的负载较高</li>
<li>响应时间较长及 QPS 较低</li>
<li>应用频繁的创建连接和关闭连接，导致临时对象增多，GC 频繁</li>
<li>在关闭连接后，会出大量 TIME_WAIT 的 TCP 状态（在两个 MSL 之后关闭）</li>
</ul>
<h4 id="3-2、使用连接池执行一条-SQL-命令"><a href="#3-2、使用连接池执行一条-SQL-命令" class="headerlink" title="3.2、使用连接池执行一条 SQL 命令"></a>3.2、使用连接池执行一条 SQL 命令</h4><p><img src="https://z3.ax1x.com/2021/11/21/IjVCUU.png" alt=""></p>
<p>第一次访问的时候，需要建立连接。 但是之后的访问，均会<strong>复用</strong>之前创建的连接，直接执行SQL语句（图中黄色的部分）。</p>
<p><strong>优点：</strong></p>
<ul>
<li><p>较少了网络开销</p>
</li>
<li><p>系统的性能会有一个实质的提升</p>
</li>
<li><p>没了麻烦的TIME_WAIT状态</p>
</li>
</ul>
<h2 id="4、数据库连接池的工作原理"><a href="#4、数据库连接池的工作原理" class="headerlink" title="4、数据库连接池的工作原理"></a>4、数据库连接池的工作原理</h2><p>连接池的工作原理主要由三部分组成，分别为</p>
<ul>
<li><p>连接池的建立</p>
</li>
<li><p>连接池中连接的使用管理</p>
</li>
<li><p>连接池的关闭</p>
</li>
</ul>
<p> <strong>连接池的建立</strong>：</p>
<p>​        一般在系统初始化时，连接池会根据系统配置建立，并在池中创建了几个连接对象，以便使用时能从连接池中获取。连接池中的连接不能随意创建和关闭，这样避免了连接随意建立和关闭造成的系统开销。Java中提供了很多容器类可以方便的构建连接池，例如Vector、Stack等。</p>
<p><strong>连接池的管理</strong>：</p>
<p>​        连接池管理策略是<strong>连接池机制的核心</strong>，连接池内连接的分配和释放对系统的性能有很大的影响。其管理策略是：</p>
<p>​        当客户<strong>请求</strong>数据库连接时，首先查看连接池中是否有空闲连接，如果存在空闲连接，则将连接分配给客户使用；如果没有空闲连接，则查看当前所开的连接数是否已经达到最大连接数，如果没达到就重新创建一个连接给请求的客户；如果达到就按设定的最大等待时间进行等待，如果超出最大等待时间，则抛出异常给客户。</p>
<p>​        当客户<strong>释放</strong>数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过就从连接池中删除该连接，否则保留为其他客户服务。</p>
<p>​        该策略保证了数据库连接的有效复用，避免频繁的建立、释放连接所带来的系统资源开销。</p>
<p><strong>连接池的关闭</strong>：</p>
<p>当应用程序退出时，关闭连接池中所有的连接，释放连接池相关的资源，该过程正好与创建相反。</p>
<h2 id="5、连接池需要注意的点"><a href="#5、连接池需要注意的点" class="headerlink" title="5、连接池需要注意的点"></a>5、连接池需要注意的点</h2><h4 id="5-1、并发问题"><a href="#5-1、并发问题" class="headerlink" title="5.1、并发问题"></a>5.1、<strong><font size="5px">并发问题</font></strong></h4><p>　　为了使连接管理服务具有最大的通用性，必须考虑多线程环境，即并发问题。这个问题相对比较好解决，因为各个语言自身提供了对并发管理的支持像java,c#等等，使用synchronized(java)、lock(C#)关键字即可确保线程是同步的。</p>
<h4 id="5-2、事务处理"><a href="#5-2、事务处理" class="headerlink" title="5.2、事务处理"></a>5.2、<strong><font size="5px">事务处理</font></strong></h4><p>​        我们知道，事务具有原子性，此时要求对数据库的操作符合“ALL-OR-NOTHING”原则,即对于一组SQL语句要么全做，要么全不做。<br>　　我们知道当2个线程共用一个连接Connection对象，而且各自都有自己的事务要处理时候，对于连接池是一个很头疼的问题，因为即使Connection类提供了相应的事务支持，可是我们仍然不能确定那个数据库操作是对应那个事务的，这是由于我们有２个线程都在进行事务操作而引起的。为此我们可以使用每一个事务独占一个连接来实现，虽然这种方法有点浪费连接池资源但是可以大大降低事务管理的复杂性。 </p>
<h4 id="5-3连接池的分配与释放"><a href="#5-3连接池的分配与释放" class="headerlink" title="5.3连接池的分配与释放"></a>5.3<strong><font size="5px">连接池的分配与释放</font></strong></h4><p>​        连接池的分配与释放，对系统的性能有很大的影响。合理的分配与释放，可以提高连接的复用度，从而降低建立新连接的开销，同时还可以加快用户的访问速度。<br>　　对于连接的管理可使用一个List。即把已经创建的连接都放入List中去统一管理。每当用户请求一个连接时，系统检查这个List中有没有可以分配的连接。如果有就把那个最合适的连接分配给他；如果没有就抛出一个异常给用户，List中连接是否可以被分配由一个线程来专门管理。</p>
<h4 id="5-4、连接池的配置与维护"><a href="#5-4、连接池的配置与维护" class="headerlink" title="5.4、连接池的配置与维护"></a>5.4、<strong><font size="5px">连接池的配置与维护</font></strong></h4><p>​        连接池中到底应该放置多少连接，才能使系统的性能最佳？系统可采取设置最小连接数（minConnection）和最大连接数（maxConnection）等参数来控制连接池中的连接。比方说，最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。最大连接数是连接池中允许连接的最大数目，具体设置多少，要看系统的访问量，可通过软件需求上得到。<br>　　如何确保连接池中的最小连接数呢？有动态和静态两种策略。动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接，以保证连接池的正常运转。静态是发现空闲连接不够时再去检查。</p>
<h2 id="6、主流数据源对比"><a href="#6、主流数据源对比" class="headerlink" title="6、主流数据源对比"></a>6、主流数据源对比</h2><p>区分一个数据库连接池是属于第一代产品还是代二代产品有一个最重要的特征就是看它在架构和设计时采用的线程模型，因为这直接影响的是<strong>并发环境下存取数据库连接的性能</strong>。</p>
<p>一般来讲采用单线程同步的架构设计都属于第一代连接池，二采用<strong>多线程异步架构</strong>的则属于第二代。比较有代表性的就是Apache Commons DBCP，在1.x版本中，一直延续着单线程设计模式，到2.x才采用多线程模型。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>数据库连接池</strong></th>
<th><strong>最新版本</strong></th>
<th><strong>发布时间</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>C3P0</td>
<td>c3p0-0.9.5.2</td>
<td>on 9 Dec 2015</td>
</tr>
<tr>
<td>DBCP</td>
<td>2.2.0</td>
<td>27 December 2017</td>
</tr>
<tr>
<td>Druid</td>
<td>0.11.0</td>
<td>Dec 4 2017</td>
</tr>
<tr>
<td>HikariCP</td>
<td>2.7.6</td>
<td>2018-01-14</td>
</tr>
</tbody>
</table>
</div>
<p>从表中可以看出，C3P0已经很久没有更新了。DBCP更新速度很慢，基本处于不活跃状态，而Druid和HikariCP处于活跃状态的更新中，这就是我们说的二代产品了。</p>
<p>二代产品对一代产品的超越是颠覆性的，除了一些“历史原因”，你很难再找到第二条理由说服自己不选择二代产品，但任何成功都不是偶然的，二代产品的成功很大程度上得益于前代产品们打下的基础，站在巨人的肩膀上，新一代的连接池的设计师们将这一项“工具化”的产品，推向了极致。其中，最具代表性的两款产品是：</p>
<ul>
<li>HikariCP</li>
<li>Druid</li>
</ul>
<h4 id="6-1、彻底死掉的-C3P0"><a href="#6-1、彻底死掉的-C3P0" class="headerlink" title="6.1、彻底死掉的 C3P0"></a>6.1、<strong><font size="5px">彻底死掉的 C3P0</font></strong></h4><p>在很长一段时间内，C3P0 一直是Java领域内数据库连接池的代名词，当年盛极一时的Hibernate 都将其作为内置的数据库连接池，可以业内对它的稳定性还是认可的。C3P0 功能简单易用，稳定性好这是它的优点，<strong>但是性能上的缺点却让它彻底被打入冷宫</strong>。C3P0 的性能很差，差到即便是同时代的产品相比它也是垫底的，更不用和 Druid、HikariCP 等相比了。正常来讲，有问题很正常，改就是了，<strong>但c3p0最致命的问题就是架构设计过于复杂，让重构变成了一项不可能完成的任务</strong>。随着国内互联网大潮的涌起，性能有硬伤的c3p0彻底的退出了历史舞台，图表如下（左侧为响应时间，单位毫秒）。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/Ijm324.png" alt=""></p>
<h4 id="6-2、咸鱼翻身的-DBCP"><a href="#6-2、咸鱼翻身的-DBCP" class="headerlink" title="6.2、咸鱼翻身的 DBCP"></a>6.2、<strong><font size="5px">咸鱼翻身的 DBCP</font></strong></h4><p>DBCP（DataBase Connection Pool）属于 Apache 顶级项目 Commons 中的核心子项目（最早在Jakarta Commons里就有）,在 Apache 的生态圈中的影响里十分广泛，比如最为大家所熟知的 Tomcat 就在内部集成了 DBCP，实现 JPA 规范的 OpenJPA ，也是默认集成 DBCP 的。但 <strong>DBCP 并不是独立实现连接池功能的，它内部依赖于 Commons 中的另一个子项目 Pool，连接池最核心的“池”，就是由 Pool 组件提供的</strong>，因此，DBCP 的性能实际上就是 Pool 的性能，DBCP 和 Pool 的依赖关系如下表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Apache Commons DBCP</strong></th>
<th><strong>Apache Commons Pool</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>v1.2.2</td>
<td>v1.3</td>
</tr>
<tr>
<td>v1.3</td>
<td>v1.5.4</td>
</tr>
<tr>
<td>v1.4</td>
<td>v1.5.4</td>
</tr>
<tr>
<td>v2.0.x</td>
<td>v2.2</td>
</tr>
<tr>
<td>v2.1.x</td>
<td>v2.4.2</td>
</tr>
<tr>
<td>v2.2.x</td>
<td>v2.5.0</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到，因为核心功能依赖于 Pool，所以 DBCP 本身只能做小版本的更新，真正大版本的更迭则完全依托于 pool。有很长一段时间，pool 都还是停留在1.x版本，这直接导致 DBCP 也更新乏力。很多依赖 DBCP 的应用在遇到性能瓶颈之后，别无选择，只能将其替换掉，DBCP忠实的拥趸 tomcat 就在其 tomcat 7.0 版本中，自己重新设计开发出了一套连接池（Tomcat JDBC Pool）。好在，在2013年事情终于迎来转机，13年9月 Commons-Pool 2.0 版本发布，14年2月份，DBCP也终于迎来了自己的2.0版本，基于新的线程模型全新设计的“池”让 DBCP 重焕青春，虽然和新一代的连接池相比仍有一定差距，但差距并不大，DBCP2.x 版本已经稳稳达到了和新一代产品同级别的性能指标（见下图）。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IjmrxH.png" alt=""></p>
<p>DBCP 终于靠 Pool 咸鱼翻身，打了一个漂亮的翻身仗，但长时间的等待已经完全消磨了用户的耐心，与新一代的产品项目相比，DBCP 没有任何优势，试问，谁会在有选择的前提下，去选择那个并不优秀的呢？也许，现在还选择 DBCP2 的唯一理由，就是情怀吧。</p>
<h4 id="6-3、性能无敌的-HikariCP"><a href="#6-3、性能无敌的-HikariCP" class="headerlink" title="6.3、性能无敌的 HikariCP"></a>6.3、<strong><font size="5px">性能无敌的 HikariCP</font></strong></h4><p>HikariCP 号称“性能杀手”（It’s Faster），它的表现究竟如何呢，先来看下官网提供的数据：</p>
<p><img src="https://z3.ax1x.com/2021/11/21/Ijn9y9.png" alt=""></p>
<p>不光性能强劲，稳定性也不差：</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IjnKOA.png" alt=""></p>
<p>那它是怎么做到如此强劲的呢？官网给出的说明如下：</p>
<ul>
<li>字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；</li>
<li>优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；</li>
<li>自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；</li>
<li>自定义集合类型（ConcurrentBag）：提高并发读写的效率；</li>
<li>其他缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。</li>
</ul>
<p>可以看到，上述这几点优化，和现在能找到的资料来看，HakariCP 在性能上的优势应该是得到共识的，再加上它自身小巧的身形，在当前的“云时代、微服务”的背景下，HakariCP 一定会得到更多人的青睐。</p>
<h4 id="6-4、功能全面的-Druid"><a href="#6-4、功能全面的-Druid" class="headerlink" title="6.4、功能全面的 Druid"></a>6.4、<strong><font size="5px">功能全面的 Druid</font></strong></h4><p>近几年，阿里在开源项目上动作频频，除了有像fastJson、dubbo这类项目，更有像AliSQL这类的大型软件，今天说的Druid，就是阿里众多优秀开源项目中的一个。它除了提供性能卓越的连接池功能外，还集成了SQL监控，黑名单拦截等功能，用它自己的话说，Druid是“为监控而生”。借助于阿里这个平台的号召力，产品一经发布就赢得了大批用户的拥趸，从用户使用的反馈来看，Druid也确实没让用户失望。</p>
<p>相较于其他产品，Druid另一个比较大的优势，就是中文文档比较全面（毕竟是国人的项目么），在github的wiki页面，列举了日常使用中可能遇到的问题，对一个新用户来讲，上面提供的内容已经足够指导它完成产品的配置和使用了。</p>
<p>下图为Druid自己提供的性能测试数据：</p>
<p><img src="https://z3.ax1x.com/2021/11/21/Ijuph8.png" alt=""></p>
<p><strong>Druid 相对于其他数据库连接池的优点</strong></p>
<ul>
<li><p>强大的监控特性，通过Druid提供的监控功能，可以清楚知道连接池和SQL的工作情况。</p>
<ul>
<li>监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息；</li>
<li>SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0~1毫秒区间50次，1~10毫秒800次，10~100毫秒100次，100~1000毫秒30次，1~10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况；</li>
<li>监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。</li>
</ul>
</li>
<li><p>方便扩展。Druid提供了Filter-Chain模式的扩展API，可以自己编写Filter拦截JDBC中的任何方法，可以在上面做任何事情，比如说性能监控、SQL审计、用户名密码加密、日志等等。</p>
</li>
<li>Druid集合了开源和商业数据库连接池的优秀特性，并结合阿里巴巴大规模苛刻生产环境的使用经验进行优化。</li>
</ul>
<h2 id="7、小结"><a href="#7、小结" class="headerlink" title="7、小结"></a>7、小结</h2><p>时至今日，虽然每个应用（需要 RDBMS 的）都离不开连接池，但在实际使用的时候，连接池已经可以做到“隐形”了。也就是说在通常情况下，连接池完成项目初始化配置之后，就再不需要再做任何改动了。不论你是选择 Druid 或是 HikariCP，甚至是 DBCP，它们都足够稳定且高效！之前讨论了很多关于连接池的性能的问题，但这些性能上的差异，是相较于其他连接池而言的，对整个系统应用来说，第二代连接池在使用过程中体会到的差别是微乎其微的，基本上不存在因为连接池的自身的配饰和使用导致系统性能下降的情况，除非是在单点应用的数据库负载足够高的时候（压力测试的时候），但即便是如此，通用的优化的方式也是单点改集群，而不是在单点的连接池上死扣。</p>
]]></content>
      <categories>
        <category>DataBase System</category>
      </categories>
  </entry>
  <entry>
    <title>算法（第4版）读书笔记</title>
    <url>/2021/11/29/%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="数据结构实现"><a href="#数据结构实现" class="headerlink" title="数据结构实现"></a>数据结构实现</h2><h4 id="完整的栈实现"><a href="#完整的栈实现" class="headerlink" title="完整的栈实现"></a>完整的栈实现</h4><p>记得刚学 java 的时候就有实现过一个 <strong>stack</strong>，当然那时写代码不会考虑那么多，这一次添加了泛型和数组扩容，提高了可扩展性，还实现了 <strong>Iterable</strong> 可迭代接口，这样 MyStack 类就可以使用 <strong>foreach</strong> 循环了。</p>
<p>另外，由于 Java 的垃圾收集策略是回收所有无法被访问的对象的内存，而但我们进行 pop 操作时，虽然使用者已经不可能再访问这个被弹出的元素了，但是它的引用还存在与数组之中，因此 Java 的垃圾收集器并不会去回收这个元素！！！除非后续将该引用<strong>覆盖</strong>。即使用例已经不再需要这个元素了，数组中的引用仍然可以让它继续存在，这种情况（保存一个不需要的对象的引用）就被称作<code>游离</code>。一般可以通过显式使用 <strong>null</strong> 来覆盖不需要的对象即可（见37行）！</p>
<p><strong>栈的数组实现</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> T[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);   <span class="comment">// 给予有参构造函数默认参数</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        arr = (T[]) <span class="keyword">new</span> Object[size];   <span class="comment">// java不支持泛型数组，只能强转或是使用集合类型</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> arr.length == count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isFull()){</span><br><span class="line">            resizingArray(count * <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        arr[count++] = item;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</span><br><span class="line">        }</span><br><span class="line">        T item = arr[--count];</span><br><span class="line">        arr[count] = <span class="keyword">null</span>;  <span class="comment">// 解决游离问题</span></span><br><span class="line">        <span class="keyword">if</span>(count == arr.length / <span class="number">4</span>){  <span class="comment">// 保证数组的使用率始终大于1/4</span></span><br><span class="line">            resizingArray(arr.length / <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改数组大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resizingArray</span><span class="params">(<span class="keyword">int</span> size)</span></span>{</span><br><span class="line">        T[] newArr = (T[]) <span class="keyword">new</span> Object[size];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            newArr[i] = arr[i];</span><br><span class="line">        }</span><br><span class="line">        arr = newArr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;T&gt;() {</span><br><span class="line">            <span class="keyword">int</span> i = count;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> i &gt; <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> arr[--i];</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>栈的链表实现</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedStack</span><span class="params">()</span> </span>{</span><br><span class="line">        head = <span class="keyword">new</span> Node();</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T item)</span></span>{</span><br><span class="line">        Node node = <span class="keyword">new</span> Node();</span><br><span class="line">        node.item = item;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head.next.item;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"栈空！！！"</span>);</span><br><span class="line">        }</span><br><span class="line">        T item = head.next.item;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 区别于数组实现的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;T&gt;() {</span><br><span class="line">            Node tmp = head;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> tmp.next != <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>{</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">                <span class="keyword">return</span> tmp.item;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 私有内部类 Node，可以直接使用外部的泛型类型！！！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>{</span><br><span class="line">        Node next;</span><br><span class="line">        T item;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>先定义算法的 api</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUnionFind</span> </span>{</span><br><span class="line">    <span class="comment">// 连接两点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>;</span><br><span class="line">    <span class="comment">// 查找某点的根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>;</span><br><span class="line">    <span class="comment">// 返回两点是否连接</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>;</span><br><span class="line">    <span class="comment">// 返回连通分量的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>QuickFind</strong>，快速查询。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFind</span> <span class="keyword">implements</span> <span class="title">IUnionFind</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] links;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickFind</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        links = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">            links[i] = i;</span><br><span class="line">        }</span><br><span class="line">        count = num;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> links[p];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> pID = find(p);</span><br><span class="line">        <span class="keyword">int</span> qID = find(q);</span><br><span class="line">        <span class="keyword">if</span> (pID == qID){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;links.length;i++){</span><br><span class="line">            <span class="keyword">if</span>(pID == links[i]){</span><br><span class="line">                links[i] = qID;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上述代码，虽说查询根节点速度很快，但由于连接的时候需要将所有的连通节点都改为同一个根节点，因此效率很差。</p>
<p><strong>QuickUnion</strong>，快速合并。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnion</span> <span class="keyword">implements</span> <span class="title">IUnionFind</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] links;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickUnion</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        count = num;</span><br><span class="line">        links = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">            links[i] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (connected(p, q)){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> pID = find(p);</span><br><span class="line">        <span class="keyword">int</span> qID = find(q);</span><br><span class="line">        links[qID] = pID;</span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(links[p] != p){</span><br><span class="line">            p = links[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>而 <strong>QuickUnion</strong> 在连接的时候只修改根节点的值，解决了连接速度慢的问题。取而代之的是，在查找的时候不能直接返回某点的根节点了。</p>
<p><strong>WeightedQuickUnion</strong>，加权快速合并。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnion</span> <span class="keyword">implements</span> <span class="title">IUnionFind</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] links;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] weights;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnion</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        count = num;</span><br><span class="line">        links = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        weights = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">            links[i] = i;</span><br><span class="line">            weights[i] =<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (connected(p, q)){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> pID = find(p);</span><br><span class="line">        <span class="keyword">int</span> qID = find(q);</span><br><span class="line">        <span class="keyword">if</span>(weights[pID] &lt; weights[qID]){</span><br><span class="line">            weights[qID] += weights[pID];</span><br><span class="line">            links[pID] = qID;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            weights[pID] += weights[qID];</span><br><span class="line">            links[qID] = pID;</span><br><span class="line">        }</span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(links[p] != p){</span><br><span class="line">            p = links[p];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>QuickUnion</strong> 最坏情况下会像有序数组生成二叉排序树那样，变成类似链表的数据结构，这会大大降低查询和连接的速度，而 <strong>WeightedQuickUnion</strong> 通过将小树连接到大树解决了这个问题！</p>
<p><strong>PathCompressedWeightedQuickUnion</strong>，路径压缩的加权快速合并。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathCompressedWeightedQuickUnion</span> <span class="keyword">implements</span> <span class="title">IUnionFind</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] links;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] weights;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathCompressedWeightedQuickUnion</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        count = num;</span><br><span class="line">        links = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        weights = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">            links[i] = i;</span><br><span class="line">            weights[i] =<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (connected(p, q)){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> pID = find(p);</span><br><span class="line">        <span class="keyword">int</span> qID = find(q);</span><br><span class="line">        <span class="keyword">if</span>(weights[pID] &lt; weights[qID]){</span><br><span class="line">            weights[qID] += weights[pID];</span><br><span class="line">            links[pID] = qID;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            weights[pID] += weights[qID];</span><br><span class="line">            links[qID] = pID;</span><br><span class="line">        }</span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(links[p] != p){</span><br><span class="line">            <span class="keyword">return</span> links[p] = find(links[p]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上诉代码，在查询根节点的过程中，通过递归将所有子节点的父节点直接修改为了根节点，将整棵树的高度锁定在了2！</p>
<p><strong>效率对比</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EfficiencyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc1 = FileUtils.getFileScanner(<span class="string">"tinyUF.txt"</span>);</span><br><span class="line">        Scanner sc2 = FileUtils.getFileScanner(<span class="string">"tinyUF.txt"</span>);</span><br><span class="line">        Scanner sc3 = FileUtils.getFileScanner(<span class="string">"tinyUF.txt"</span>);</span><br><span class="line">        Scanner sc4 = FileUtils.getFileScanner(<span class="string">"tinyUF.txt"</span>);</span><br><span class="line">        QuickFind uf1 = <span class="keyword">new</span> QuickFind(sc1.nextInt());</span><br><span class="line">        QuickFind uf2 = <span class="keyword">new</span> QuickFind(sc2.nextInt());</span><br><span class="line">        QuickFind uf3 = <span class="keyword">new</span> QuickFind(sc3.nextInt());</span><br><span class="line">        QuickFind uf4 = <span class="keyword">new</span> QuickFind(sc4.nextInt());</span><br><span class="line">        System.out.println(<span class="string">"==============================tiny=============================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"QuickFind:"</span> + test(uf1, sc1) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf1.count());</span><br><span class="line">        System.out.println(<span class="string">"QuickUnion:"</span> + test(uf2, sc2) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf2.count());</span><br><span class="line">        System.out.println(<span class="string">"WeightedQuickUnion:"</span> + test(uf3, sc3) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf3.count());</span><br><span class="line">        System.out.println(<span class="string">"PathCompressedWeightedQuickUnion:"</span> + test(uf4, sc4) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf4.count());</span><br><span class="line">        System.out.println(<span class="string">"==============================medium=============================="</span>);</span><br><span class="line">        sc1 = FileUtils.getFileScanner(<span class="string">"mediumUF.txt"</span>);</span><br><span class="line">        sc2 = FileUtils.getFileScanner(<span class="string">"mediumUF.txt"</span>);</span><br><span class="line">        sc3 = FileUtils.getFileScanner(<span class="string">"mediumUF.txt"</span>);</span><br><span class="line">        sc4 = FileUtils.getFileScanner(<span class="string">"mediumUF.txt"</span>);</span><br><span class="line">        uf1 = <span class="keyword">new</span> QuickFind(sc1.nextInt());</span><br><span class="line">        uf2 = <span class="keyword">new</span> QuickFind(sc2.nextInt());</span><br><span class="line">        uf3 = <span class="keyword">new</span> QuickFind(sc3.nextInt());</span><br><span class="line">        uf4 = <span class="keyword">new</span> QuickFind(sc4.nextInt());</span><br><span class="line">        System.out.println(<span class="string">"QuickFind:"</span> + test(uf1, sc1) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf1.count());</span><br><span class="line">        System.out.println(<span class="string">"QuickUnion:"</span> + test(uf2, sc2) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf2.count());</span><br><span class="line">        System.out.println(<span class="string">"WeightedQuickUnion:"</span> + test(uf3, sc3) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf3.count());</span><br><span class="line">        System.out.println(<span class="string">"PathCompressedWeightedQuickUnion:"</span> + test(uf4, sc4) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf4.count());</span><br><span class="line">        System.out.println(<span class="string">"==============================large=============================="</span>);</span><br><span class="line">        <span class="comment">// 其余三个速度太慢，这里就不测试了</span></span><br><span class="line">        sc4 = FileUtils.getFileScanner(<span class="string">"largeUF.txt"</span>);</span><br><span class="line">        uf4 = <span class="keyword">new</span> QuickFind(sc4.nextInt());</span><br><span class="line">        System.out.println(<span class="string">"PathCompressedWeightedQuickUnion:"</span> + test(uf4, sc4) + <span class="string">"ms"</span> + <span class="string">"\n"</span> + <span class="string">"components: "</span> + uf4.count());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">==============================tiny==============================</span><br><span class="line">QuickFind:0ms</span><br><span class="line">components: <span class="number">2</span></span><br><span class="line">QuickUnion:0ms</span><br><span class="line">components: <span class="number">2</span></span><br><span class="line">WeightedQuickUnion:1ms</span><br><span class="line">components: <span class="number">2</span></span><br><span class="line">PathCompressedWeightedQuickUnion:2ms</span><br><span class="line">components: <span class="number">2</span></span><br><span class="line">==============================medium==============================</span><br><span class="line">QuickFind:17ms</span><br><span class="line">components: <span class="number">3</span></span><br><span class="line">QuickUnion:11ms</span><br><span class="line">components: <span class="number">3</span></span><br><span class="line">WeightedQuickUnion:6ms</span><br><span class="line">components: <span class="number">3</span></span><br><span class="line">PathCompressedWeightedQuickUnion:4ms</span><br><span class="line">components: <span class="number">3</span></span><br><span class="line">==============================large==============================</span><br><span class="line">PathCompressedWeightedQuickUnion:798220ms</span><br><span class="line">components: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>可以发现，在 tiny 小数据集上，最优的那个算法反而最慢，但当数据量慢慢增大时，它的优势就显现出来了。</p>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h4 id="排序工具类"><a href="#排序工具类" class="headerlink" title="排序工具类"></a>排序工具类</h4><p>在实现各种排序算法的过程中，不免会使用一些基础的操作（交换，比较等），这里就单独封装在一个排序的工具类中了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortUtil</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable a, Comparable b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (i == j) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Comparable tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (Comparable comparable : arr) {</span><br><span class="line">            System.out.print(comparable + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (less(arr[i], arr[i - <span class="number">1</span>])) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>一种最简单的排序算法是这样的:首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法叫做选择排序，因为它在不断地选择剩余元素之中的最小者。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (SortUtil.less(arr[j], arr[min])) {</span><br><span class="line">                    min = j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            SortUtil.swap(arr, i, min);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于长度为 <strong>N</strong> 的数组，选择排序需要 ~$\frac{N^2}{2}$ 次比较以及 ~$N$ 次交换。</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>通常人们整理桥牌的方法是一张一张的来,将每一张牌插入到其他已经有序的牌中的适当位置。在计算机的实现中，为了给要插入的元素腾出空间，我们需要将其余所有元素在插入之前都向右移动一位。这种算法被称作插入排序。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt; arr.length;i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--){</span><br><span class="line">                <span class="keyword">if</span> (SortUtil.less(arr[j], arr[j-<span class="number">1</span>])){</span><br><span class="line">                    SortUtil.swap(arr, j, j-<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于长度为 <strong>N</strong> 的数组，插入排序平均需要进行 ~$\frac{N^2}{4}$ 次比较以及 ~$\frac{N^2}{4}$ 次交换，最好情况下需要进行 N-1 次比较以及0次交换，而在最坏情况下，需要进行  ~$\frac{N^2}{2}$ 次比较以及 ~$\frac{N^2}{2}$ 次交换（即对角线下方元素都需要进行交换与比较）。</p>
<p><img src="https://s4.ax1x.com/2021/12/08/oRh1OA.png" alt="image"></p>
<p>与选择排序一样，当前索引左边的所有元素都是有序的，但它们的最终位置还不确定，为了给更小的元素腾出空间，它们可能会被移动。但是当索引到达数组的右端时，数组排序就完成了。<br>和选择排序不同的是，插入排序所需的时间取决于输入中元素的初始顺序。例如，对一个很大且其中的元素已经有序（或接近有序）的数组进行排序将会比对随机顺序的数组或是逆序数组进行排序要快得多。</p>
<p><br></p>
<p><strong>插入排序（修改）</strong></p>
<p>要大幅提高插人排序的速度并不难，只需要在内循环中将较大的元素都向右移动而不总是交换</p>
<p>两个元素（这样访问数组的次数就能减半）。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortByMoving</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) {</span><br><span class="line">            Comparable tmp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) {</span><br><span class="line">                <span class="keyword">if</span> (SortUtil.less(tmp, arr[j])) {</span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序一种基于插人排序的快速的排序算法。对于大规模乱序数组插入排序很慢，因为它只会交换相邻的元素，因此元素只能一点一点地从数组 的一端移动到另一端。例如，如果主键最小的元素正好在数组的尽头，要将它挪到正确的位置就需要 N-1 次移动。希尔排序为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。</p>
<p>希尔排序的思想是使数组中任意间隔为 h 的元素都是有序的。这样的数组被称为 h 有序数组。换句话说，一个 h 有序数组就是 h 个互相独立的有序数组编织在一起组成的一个数组。在进行排序时，如果 h 很大，我们就能将元素移动到很远的地方，为实现更小的 h 有序创造方便。用这种方式，对于任意以1结尾的 h 序列，我们都能够将数组排序。这就是希尔排序。</p>
<p><img src="https://s4.ax1x.com/2021/12/08/oRonHA.png" alt="image"></p>
<p>下面算法实现使用了序列 $3n+1$，从N/3开始递减至1。我们把这个序列称为递增序列。一种方式是实时计算它的递增序列，另—种方式则是将递增序列存储在一个数组中。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="comment">// 计算序列第一项</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n / <span class="number">3</span>) {</span><br><span class="line">        h = h * <span class="number">3</span> + <span class="number">1</span>;  <span class="comment">// 1, 4, 13, 40, 121...</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) {</span><br><span class="line">            Comparable tmp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= h; j -= h) {</span><br><span class="line">                <span class="keyword">if</span> (SortUtil.less(tmp, arr[j - h])) {</span><br><span class="line">                    arr[j] = arr[j - h];</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        }</span><br><span class="line">        h = (h - <span class="number">1</span>) / <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>至于上述希尔排序的性能（根据 h 序列的取值，排序的时间复杂度会有所不同）， 目前最重要的结论是它的运行时间达不到平方级别。</p>
<p>不过，已知在最坏的情况下比较次数和 $N^{3/2}$ 成正比。</p>
<h2 id="神奇的用法"><a href="#神奇的用法" class="headerlink" title="神奇的用法"></a>神奇的用法</h2><h4 id="不会报错的除零运算"><a href="#不会报错的除零运算" class="headerlink" title="不会报错的除零运算"></a>不会报错的除零运算</h4><p>下述代码并不会像<code>1 / 0</code> 一样报除零异常，而是会返回 <code>Infinity</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(<span class="number">1.0</span> / <span class="number">0.0</span>);	<span class="comment">// Infinity</span></span><br><span class="line">    System.out.println(<span class="number">1.0</span> / <span class="number">0.0</span> &gt; <span class="number">1e9</span>); <span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可以“修改”的-final-变量"><a href="#可以“修改”的-final-变量" class="headerlink" title="可以“修改”的 final 变量"></a>可以“修改”的 final 变量</h4><p>被 <code>final</code> 所修饰的变量无法被修改，下述代码中 <strong>arr</strong> 是 <code>final</code> 变量，因此在第5行想给它赋予一个新的值时报错了： <strong>Cannot assign a value to final variable ‘arr’</strong>。</p>
<p>虽然实例变量的值无法被修改，但是对象的值本身是可以被修改的（请看第4行）！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.arr[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// a.arr = new int[10]; Cannot assign a value to final variable 'arr'</span></span><br><span class="line">        System.out.println(a.arr[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="comment">// 常量arr</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] arr;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="巧妙压缩日期格式"><a href="#巧妙压缩日期格式" class="headerlink" title="巧妙压缩日期格式"></a>巧妙压缩日期格式</h4><p>常规方法，使用三个变量来分别存储年月日。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span></span>{</span><br><span class="line">    <span class="keyword">int</span> day;	<span class="comment">// 日</span></span><br><span class="line">    <span class="keyword">int</span> month;	<span class="comment">// 月</span></span><br><span class="line">    <span class="keyword">int</span> year;	<span class="comment">// 年</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"现在是"</span> + year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>压缩方法，只使用一个变量来存储年月日。</p>
<p>年月日我们可以把它转换为<code>特殊进制</code>的数 <strong>YMD</strong>，这个<code>特殊进制</code>每一位的权重并不相同，由于一个月最多有31天，一年有12月，因此 <strong>D</strong> 是32进制的，而 <strong>M</strong> 是13进制的，<strong>Y</strong> 则没有进制，可以一直往上加。</p>
<p>举个例子，假设是 x 年 y 月 z 日，那么 <strong>YMD</strong> 就应该等于 z + 32 <em> y + 32 </em> 13 * x。</p>
<p>当然，这个 <strong>YMD</strong> 只能算是压缩，是不可能用于最后输出的（毕竟别人不知道这是<code>特殊进制</code>），因此还需要解压。</p>
<p>根据 date = z + 32 <em> y + 32 </em> 13 * x，易得 x = date / 416，z = date % 32，而 y 可以先求出一共有多少月 months = date / 32，然后再通过 months % 13 就能算出来 y 了！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDateCompressed</span></span>{</span><br><span class="line">    <span class="keyword">int</span> date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDateCompressed</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>{</span><br><span class="line">        date = day + <span class="number">32</span> * month + <span class="number">416</span> * year;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"现在是"</span> + date / <span class="number">416</span> + <span class="string">"年"</span> + date / <span class="number">32</span> % <span class="number">13</span> + <span class="string">"月"</span> + date % <span class="number">32</span> + <span class="string">"日"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/10/18/Mybatis/</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h4 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h4><ul>
<li>MyBatis 是一款优秀的持久层框架。</li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目 iBatis。</li>
<li>2010年这个项目由 apache software foundation 迁移到了 google code，并且改名为MyBatis。</li>
<li>2013年11月迁移到 Github。</li>
</ul>
<p>如何获取 Mybatis？</p>
<ul>
<li><p>maven 仓库：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Github：<a href="https://github.com/search?q=Mybatis">https://github.com/search?q=Mybatis</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></p>
</li>
</ul>
<span id="more"></span>
<h4 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h4><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程。</li>
<li>内存<strong>断电即失</strong></li>
</ul>
<p>为什么需要持久化？</p>
<ul>
<li>有一些对象不能让他丢掉。</li>
<li>内存太贵了。</li>
</ul>
<h4 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h4><p>Dao 层、Service 层、Controller 层……</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h4 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h4><ul>
<li>传统 JDBC 代码过于复杂冗余，而Mybatis 简洁了很多。</li>
<li>方便简洁自动化，框架在背后帮我们做了很多事情。</li>
</ul>
<h2 id="2、第一个-Mybatis-程序"><a href="#2、第一个-Mybatis-程序" class="headerlink" title="2、第一个 Mybatis 程序"></a>2、第一个 Mybatis 程序</h2><p>添加 maven 依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mybatis 配置文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yqx/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>pojo 实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>mapper.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yqx.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.yqx.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper.xml 放在 java 类中。不会被 maven 读取，需要在 pom.xml 中显式定义路径。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper 类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">     <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>SqlSession 工具类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Test 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.utils.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(mapper.findUserById(<span class="number">5</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h4 id="3-1、namespace"><a href="#3-1、namespace" class="headerlink" title="3.1、namespace"></a>3.1、namespace</h4><p>namespace 中的类名要和 Dao/Mapper 接口名一致！</p>
<h4 id="3-2、sql语句"><a href="#3-2、sql语句" class="headerlink" title="3.2、sql语句"></a>3.2、sql语句</h4><ul>
<li><p>id：对应 namespace 中的方法名。</p>
</li>
<li><p>resultType：sql 语句执行的返回值。</p>
</li>
<li><p>parameterType：参数类型。</p>
</li>
</ul>
<p><strong>mapper</strong></p>
<p>增删改会返回修改的记录数。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">     <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">     <span class="function">List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>对于 mapper 中的 sql 语句，需要遵守以下规则。</strong></p>
<ul>
<li>返回值为基本类型时可以不写。</li>
<li>参数列表只有一个时，#{} 中的形参名可以随便写。</li>
<li>传入实体类时，形参名要和实体类中的属性名一致。</li>
</ul>
<p><strong>select</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findUserById"</span> resultType=<span class="string">"com.yqx.pojo.User"</span>&gt;</span><br><span class="line">    select * from mybatis.user where id = #{id}</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;select id=<span class="string">"findAllUsers"</span> resultType=<span class="string">"com.yqx.pojo.User"</span>&gt;</span><br><span class="line">    select * from mybatis.user</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>delete</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteUserById"</span>&gt;</span><br><span class="line">    delete from mybatis.user where id = #{id}</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>update</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateUser"</span>&gt;</span><br><span class="line">    update mybatis.user set name = #{name}, age = #{age} where id = #{id}</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>insert</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"addUser"</span>&gt;</span><br><span class="line">    insert into mybatis.user (name, age) values(#{name}, #{age})</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>注：默认情况下，使用 <code>#{}</code> 参数语法时，MyBatis 会创建 <code>PreparedStatement</code> 参数占位符，并通过占位符安全地设置参数（就像使用 ? 一样）。 这样做更安全，更迅速，通常也是首选做法。</p>
<h4 id="3-3、万能Map"><a href="#3-3、万能Map" class="headerlink" title="3.3、万能Map"></a>3.3、万能Map</h4><p>普通的 update 方法需要传入一个对象，即便只需要改一个字段。而 map 方法可以指定传入的内容，从而达成更改指定的字段。</p>
<p>mapper 接口添加方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUserName</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<p>mapper.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserName"</span>&gt;</span></span><br><span class="line">    update mybatis.user set name = #{user_name} where id = #{user_id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>test</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"user_id"</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"user_name"</span>, <span class="string">"龙傲天"</span>);</span><br><span class="line">    System.out.println(mapper.updateUserName(map));</span><br><span class="line">    System.out.println(mapper.findAllUsers());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-4、模糊查询"><a href="#3-4、模糊查询" class="headerlink" title="3.4、模糊查询"></a>3.4、模糊查询</h4><p>mapper 接口添加方法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;User&gt; findUserLike(String value);</span><br></pre></td></tr></tbody></table></figure>
<p><strong>方法一</strong></p>
<p>mapper.xml</p>
<p>一定要用<code>双引号</code>而不是单引号，会报错！</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserLike"</span> <span class="attr">resultType</span>=<span class="string">"com.yqx.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like "%"#{value}"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>test</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    System.out.println(mapper.findUserLike(<span class="string">"天"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>方法二</strong></p>
<p>也可以将 <strong>%</strong> 放在参数里</p>
<p> mapper.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserLike"</span> <span class="attr">resultType</span>=<span class="string">"com.yqx.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like #{value}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>test</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    System.out.println(mapper.findUserLike(<span class="string">"%天%"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h2><h4 id="4-1、核心配置属性"><a href="#4-1、核心配置属性" class="headerlink" title="4.1、核心配置属性"></a>4.1、核心配置属性</h4><ul>
<li>mybatis-config.xml</li>
<li>Mybatis 的配置文件包含了会深深影响 Mybatis 行为的设置和属性信息。</li>
<li>写的时候按照下面的<code>顺序</code>，有<code>顺序</code>之分！！！</li>
</ul>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2、环境配置（environment）"><a href="#4-2、环境配置（environment）" class="headerlink" title="4.2、环境配置（environment）"></a>4.2、环境配置（environment）</h4><p>Mybatis 可以配置多套环境，但每个 SqlSessionFactory 实例只能选择一种环境。</p>
<p>Mybatis 默认的事务管理器就是 <strong>JDBC</strong>，连接池 <strong>POOLED</strong>。</p>
<h4 id="4-3、属性（properties）"><a href="#4-3、属性（properties）" class="headerlink" title="4.3、属性（properties）"></a>4.3、属性（properties）</h4><p>我们可以通过 <strong>properties</strong> 属性来引用配置文件。</p>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sql_driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sql_url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>db.properties</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">pwd</span> = <span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>若有两者有冲突，会优先使用 properties 文件中的值。</code></p>
<p>设置完后可以在整个配置文件中替换需要动态配置的属性值。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${sql_driver}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${sql_url}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${username}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${pwd}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3、类型别名（typeAliases）"><a href="#4-3、类型别名（typeAliases）" class="headerlink" title="4.3、类型别名（typeAliases）"></a>4.3、类型别名（typeAliases）</h4><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p>
<p><strong>方法一：直接设置别名</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.yqx.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>当这样配置时，<code>User</code> 可以用在任何使用 <code>com.yqx.pojo.User</code> 的地方。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>方法二：扫描包</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yqx.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>默认别名是类名。（大小写无所谓）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"uSer"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>可以添加注解 @Alias 来更改别名。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Alias("userAlias")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"userAlias"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-4、设置（settings）"><a href="#4-4、设置（settings）" class="headerlink" title="4.4、设置（settings）"></a>4.4、设置（settings）</h4><p>设置内容很多，这里只挑重要的记录。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">设置名</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">有效值</th>
<th style="text-align:left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cacheEnabled</td>
<td style="text-align:left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td style="text-align:left">true \</td>
<td style="text-align:left">false</td>
<td>true</td>
</tr>
<tr>
<td style="text-align:left">lazyLoadingEnabled</td>
<td style="text-align:left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td style="text-align:left">true \</td>
<td style="text-align:left">false</td>
<td>false</td>
</tr>
<tr>
<td style="text-align:left">logImpl</td>
<td style="text-align:left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td style="text-align:left">SLF4J \</td>
<td style="text-align:left">LOG4J \</td>
<td>LOG4J2 \</td>
<td>JDK_LOGGING \</td>
<td>COMMONS_LOGGING \</td>
<td>STDOUT_LOGGING \</td>
<td>NO_LOGGING</td>
<td>未设置</td>
</tr>
</tbody>
</table>
</div>
<h4 id="4-5、映射器（mappers）"><a href="#4-5、映射器（mappers）" class="headerlink" title="4.5、映射器（mappers）"></a>4.5、映射器（mappers）</h4><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。</p>
<p><strong>1. 使用相对于类路径的资源引用</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yqx/mapper/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yqx/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yqx/mapper/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>2. 使用映射器接口实现类的完全限定类名）</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yqx.mapper.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yqx.mapper.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.yqx.mapper.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>3. 将包内的映射器接口实现全部注册为映射器</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yqx.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>注：第2、3种方法必须遵守下述规范</p>
<ul>
<li>接口和 mapper 配置文件必须同名！</li>
<li>接口和 mapper 配置文件必须在同一个包下！</li>
</ul>
<h2 id="5、生命周期"><a href="#5、生命周期" class="headerlink" title="5、生命周期"></a>5、生命周期</h2><p><img src="https://z3.ax1x.com/2021/10/19/50esmQ.png" alt=""></p>
<p>不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<code>并发</code>问题。</p>
<p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactroy，就不再需要它了。（妥妥的工具人）</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory</strong></p>
<ul>
<li>可以理解为数据库连接池。</li>
<li>一旦被创建就应该在应用的运行期间一直<code>存在</code>，没有任何理由丢弃它或重新创建另一个实例。</li>
<li>最佳作用域是应用作用域（application）。</li>
<li>建议使用<code>单例模式</code>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>每个线程都应该有它自己的 SqlSession 实例。</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后必须关闭，否则资源会被占用！</li>
</ul>
<h2 id="6、结果集映射（ResultMap）"><a href="#6、结果集映射（ResultMap）" class="headerlink" title="6、结果集映射（ResultMap）"></a>6、结果集映射（ResultMap）</h2><p>用于解决实体类字段和 Sql 字段不匹配的问题。</p>
<p><img src="https://z3.ax1x.com/2021/10/19/50QuYd.png" alt=""></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正常sql--&gt;</span></span><br><span class="line">select * from mybatis.user</span><br><span class="line"><span class="comment">&lt;!--完整sql--&gt;</span></span><br><span class="line">select id, name, age from mybatis.user</span><br></pre></td></tr></tbody></table></figure>
<p>可是 User 的属性只有 id,userName 和 userAge，因此再返回结果的时候就会出现属性无法匹配而是用默认值的问题。</p>
<p>可以看到查询出来的 User 没有 userName 和 userAge 的值。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">[User{id=<span class="number">5</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}, User{id=<span class="number">7</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}, User{id=<span class="number">34</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}, User{id=<span class="number">4</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}, User{id=<span class="number">35</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}, User{id=<span class="number">33</span>, userName=<span class="string">'null'</span>, userAge=<span class="number">0</span>}]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>解决方法有二。</p>
<p><strong>其一：使用指定列名</strong></p>
<p>这样就能和实体类的字段名对应起来了。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name userName, age userAge <span class="keyword">from</span> mybatis.user</span><br></pre></td></tr></tbody></table></figure>
<p><strong>其二：ResultMap</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建resultMap,只需要映射和sql字段不同属性即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"userAlias"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"userAge"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引用resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"userAlias"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</p>
</li>
<li><p>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p>
</li>
</ul>
<h2 id="7、日志"><a href="#7、日志" class="headerlink" title="7、日志"></a>7、日志</h2><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一。</p>
<ul>
<li><p>SLF4J</p>
</li>
<li><p>Apache Commons Logging</p>
</li>
<li><p>Log4j 2</p>
</li>
<li><p>Log4j   【掌握】</p>
</li>
<li><p>JDK logging</p>
</li>
<li><p>STDOUT_LOGGING   【掌握】</p>
</li>
</ul>
<p>在 mybatis-config.xml 的 <code>setting</code> 中设置。</p>
<p>可选的值有：SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING，或者是实现了 <code>org.apache.ibatis.logging.Log</code> 接口，且构造方法以字符串为参数的类完全限定名。</p>
<p>一定要<code>严格按照</code>上述可选值，大小写错误亦或是多了空格都会报错！</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="7-1、STDOUT-LOGGING"><a href="#7-1、STDOUT-LOGGING" class="headerlink" title="7.1、STDOUT_LOGGING"></a>7.1、STDOUT_LOGGING</h4><p>标准日志，个人强推！十分方便，配置完了就可以使用。效果如下。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/10/19/508uHf.png" alt=""></p>
<h4 id="7-2、Log4j"><a href="#7-2、Log4j" class="headerlink" title="7.2、Log4j"></a>7.2、Log4j</h4><p><strong>什么是Log4j ？</strong></p>
<ul>
<li>可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等。</li>
<li>可以控制每一条日志的输出格式。</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<p>先导入依赖。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>设置日志实现。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>创建 <code>log4j.properties</code>，可定制化打印内容。</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d{yy-MM-dd}][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后便能使用了。</p>
<p><img src="https://z3.ax1x.com/2021/10/20/508jIS.png" alt=""></p>
<p>也可以创建 <code>Logger</code> 对象，手动打印信息。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span></span>{</span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(MapperTest.class);</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">        logger.info(<span class="string">"我是提示信息。"</span>);</span><br><span class="line">        logger.debug(<span class="string">"我是测试信息。"</span>);</span><br><span class="line">        logger.warn(<span class="string">"我是警告信息！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="8、分页"><a href="#8、分页" class="headerlink" title="8、分页"></a>8、分页</h2><h4 id="8-1、Limit-分页（建议）"><a href="#8-1、Limit-分页（建议）" class="headerlink" title="8.1、Limit 分页（建议）"></a>8.1、Limit 分页（建议）</h4><p>添加接口方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserLimit</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<p>为该方法设置 sql 语句</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserLimit"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #{start}, #{offset}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"start"</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"offset"</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(mapper.findUserLimit(map));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-2、RowBounds-分页"><a href="#8-2、RowBounds-分页" class="headerlink" title="8.2、RowBounds 分页"></a>8.2、RowBounds 分页</h4><p>添加接口方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserRowBounds</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<p>为该方法设置 sql 语句</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserRowBounds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.yqx.mapper.UserMapper.findUserRowBounds"</span>, </span><br><span class="line">                                                <span class="keyword">null</span>, </span><br><span class="line">                                                <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="9、注解"><a href="#9、注解" class="headerlink" title="9、注解"></a>9、注解</h2><p>使用注解可以省去 <code>mapper.xml</code> 这个配置文件，所有 sql 语句都写在注解中即可，但无法胜任复杂的 sql 语句也不能使用 <code>ResultMap</code> 等功能。</p>
<h4 id="9-1、-CRUD"><a href="#9-1、-CRUD" class="headerlink" title="9.1、 CRUD"></a>9.1、 CRUD</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="meta">@Select("select * from mybatis.user")</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select("select * from user where id = #{id}")</span></span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="meta">@Param("id")</span> <span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete("delete from user where id = #{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> <span class="keyword">int</span> user_id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update("update user set name = #{name}, age = #{age} where id = #{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("insert into user(name, age) values(#{name}, #{age})")</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>@Param 可以指定输入参数名字。</p>
          </div>
<h4 id="9-2、注意"><a href="#9-2、注意" class="headerlink" title="9.2、注意"></a>9.2、注意</h4><p>在 <code>mybatis-config.xml</code> 中，不能使用 <code>resource</code> 来引入 mapper.xml 文件，毕竟没有了嘛。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--下述任选其一--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class="com.yqx.mapper.UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yqx.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="10、Mybatis-的工作原理"><a href="#10、Mybatis-的工作原理" class="headerlink" title="10、Mybatis 的工作原理"></a>10、Mybatis 的工作原理</h2><p><img src="https://z3.ax1x.com/2021/10/30/5vOd81.png" alt=""></p>
<p>（1）读取 MyBatis 配置文件 mybatis-config.xml。mybatis-config.xml 作为MyBatis 的全局配置文件，配置了MyBatis 的运行环境等信息，其中主要内容是<code>获取数据库连接</code>。</p>
<p>（2）加载映射文件Mapper.xml。Mapper.xml 文件即SQL映射文件，该文件中配置了操作数据库的SQL语句，需要在mybatis-config.xml 中加载才能执行。mybatis-config.xml 可以加载多个配置文件，每个配置文件对应数据库中的一张表。</p>
<p>（3）构建会话工厂。通过MyBatis的环境等配置信息构建会话工厂SqlSessionFactory。</p>
<p>（4）创建SqlSession对象。由会话工厂创建 SqlSession对象，该对象中包含了执行 SQL的所有方法。</p>
<p>（5）MyBatis底层定义了一个Executor 接口来操作数据库，它会根据SqlSession传递的参数<strong>动态地生成需要执行的SQL语句</strong>，同时负责查询缓存的维护。</p>
<p>（6）在Executor接口的执行方法中，包含一个 MappedStatement类型的参数，该参数是<strong>对映射信息的封装</strong>，用于存储要映射的SOL语句的id、参数等。Mapper.xmI 文件中一个SQL对应一个MappedStatement对象,SOL的id即是MappedStatement 的id。</p>
<p>（7）输入参数映射。在执行方法时，MappedStatement对象会对用户执行 SQL语句的输入参数进行定义(可以定义为Map、List类型、基本类型和POJO类型)，Executor执行器会通过MappedStatement对象在执行SQL前，<strong>将输入的Java对象映射到SQL语句中</strong>。这里对输入参数的映射过程就类似于JDBC 编程中对preparedStatement对象设置参数的过程。</p>
<p>（8）输出结果映射。在数据库中执行完SQL语句后，MappedStatement对象会对SQL执行输出的结果进行定义(可以定义为Map和List类型、基本类型、POJO类型)，Executor 执行器会通过MappedStatement对象在执行SQL语句后，<strong>将输出结果映射至Java对象中</strong>。这种将输出结果映射到Java对象的过程就类似于JDBC编程中对结果的解析处理过程。</p>
<h2 id="11、多对一查询"><a href="#11、多对一查询" class="headerlink" title="11、多对一查询"></a>11、多对一查询</h2><p>至此，我们已经学会了数据库的基础查询，但那儿也只是个开始，真实的情况远远可比单表查询复杂得多。</p>
<p><img src="https://z3.ax1x.com/2021/10/30/5xuxQx.png" alt=""></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生，<code>关联</code>，多个学生，关联多个学生  【多对一】</li>
<li>对于老师，<code>集合</code>，一个老师，拥有很多学生  【一对多】</li>
</ul>
<p>先创建数据表</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">1</span>, 秦老师); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">2</span>, 余老师); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fktid` (`tid`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">1</span>, 小明, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">2</span>, 小红, <span class="number">2</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">3</span>, 小张, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">4</span>, 小李, <span class="number">2</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="keyword">VALUES</span> (<span class="number">5</span>, 小王, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>正常情况下，要查询一个学生的 id，name 和 老师的 name 需要多表查询。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.id, s.name, t.name</span><br><span class="line"><span class="keyword">from</span> student s, teacher t</span><br><span class="line"><span class="keyword">where</span> s.id <span class="operator">=</span> t.id</span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">s.name</th>
<th style="text-align:center">t.name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">小明</td>
<td style="text-align:center">秦老师</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">小红</td>
<td style="text-align:center">余老师</td>
</tr>
</tbody>
</table>
</div>
<p>但很显然，Mybatis 不能直接这么写，可以使用以下两种方法进行查询。</p>
<h4 id="11-1、按照查询嵌套处理"><a href="#11-1、按照查询嵌套处理" class="headerlink" title="11.1、按照查询嵌套处理"></a>11.1、按照查询嵌套处理</h4><p>将对 teacher 表的查询结果作为 Student 的<code>属性</code>  teacher。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式1 嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById1"</span> <span class="attr">resultMap</span>=<span class="string">"StudentMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentMap"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #{tid}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student(id=<span class="number">1</span>, name=小明, teacher=Teacher(id=<span class="number">1</span>, name=秦老师))</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="11-2、按照结果嵌套处理"><a href="#11-2、按照结果嵌套处理" class="headerlink" title="11.2、按照结果嵌套处理"></a>11.2、按照结果嵌套处理</h4><p>将查询出来的 tname 作为属性直接传给 Teacher 对象。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方法2 联表查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentById2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentMap2"</span>&gt;</span></span><br><span class="line">    select s.id sid , s.name sname, t.name tname from student s, teacher t where s.tid = t.id and s.id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentMap2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>要给查询列取别名，不然 resultMap 无法获取到</p>
          </div>
<h2 id="12、一对多查询"><a href="#12、一对多查询" class="headerlink" title="12、一对多查询"></a>12、一对多查询</h2><h4 id="12-1、按照查询嵌套处理"><a href="#12-1、按照查询嵌套处理" class="headerlink" title="12.1、按照查询嵌套处理"></a>12.1、按照查询嵌套处理</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照条件嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTeacherById2"</span> <span class="attr">resultMap</span>=<span class="string">"teacherMap2"</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"teacherMap2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"findStudentByTid"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findStudentByTid"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="12-2、按照结果嵌套查询"><a href="#12-2、按照结果嵌套查询" class="headerlink" title="12.2、按照结果嵌套查询"></a>12.2、按照结果嵌套查询</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTeacherById"</span> <span class="attr">resultMap</span>=<span class="string">"teacherMap"</span>&gt;</span></span><br><span class="line">    select t.id tid, t.name tname, s.name sname, s.id sid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"teacherMap"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>ofType 是泛型的类型，表示集合中的元素类型</p>
          </div>
<h2 id="13、动态SQL"><a href="#13、动态SQL" class="headerlink" title="13、动态SQL"></a>13、动态SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。在 JDBC 或其它类似的框架中，开发人员通常需要手动拼接 SQL 语句。根据不同的条件拼接 SQL 语句是一件极其痛苦的工作。</p>
<p>动态 SQL 大大减少了编写代码的工作量，更体现了 MyBatis 的灵活性、高度可配置性和可维护性。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>元素</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>if</td>
<td>判断语句</td>
<td>单条件分支判断</td>
</tr>
<tr>
<td>choose（when、otherwise）</td>
<td>相当于 Java 中的 switch case 语句</td>
<td>多条件分支判断</td>
</tr>
<tr>
<td>trim、where</td>
<td>辅助元素</td>
<td>用于处理一些SQL拼装问题</td>
</tr>
<tr>
<td>foreach</td>
<td>循环语句</td>
<td>在in语句等列举条件常用</td>
</tr>
<tr>
<td>bind</td>
<td>辅助元素</td>
<td>拼接参数</td>
</tr>
</tbody>
</table>
</div>
<h4 id="13-1、If"><a href="#13-1、If" class="headerlink" title="13.1、If"></a>13.1、If</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBolg"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">        and id = #{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #{author}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #{title}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>参数列表使用的是 map，便于控制查询对象；where 1=1 是为了main便于拼接。</p>
          </div>
<h4 id="13-2、where"><a href="#13-2、where" class="headerlink" title="13.2、where"></a>13.2、where</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBolg"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            and id = #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #{author}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            and title = #{title}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>在 if 的外侧套一层 where 标签就可以省去 where 1=1 这个 sql 了。</p>
<h4 id="13-3、choose（when、otherwise）"><a href="#13-3、choose（when、otherwise）" class="headerlink" title="13.3、choose（when、otherwise）"></a>13.3、choose（when、otherwise）</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogWithSwitch"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                and id = #{id}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #{author}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                and title = #{title}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = 9999</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>choose 等同于 switch，when 等同于 case，otherwise 等同于 default。</p>
<p>当有一个 when 成立时，便不会执行后面的 when 语句。若都不满足，则会执行 otherwise。</p>
<h4 id="13-4、set"><a href="#13-4、set" class="headerlink" title="13.4、set"></a>13.4、set</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>name = #{name},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span>author = #{author},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span>title = #{title},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>set 标签会去掉多余<code>,</code>，但不会添加<code>,</code>，因此在每个 sql 后都加个<code>,</code>就可以了。</p>
<h4 id="13-5、trim"><a href="#13-5、trim" class="headerlink" title="13.5、trim"></a>13.5、trim</h4><p>trim 一般用于去除 SQL 语句中多余的 AND 关键字、逗号<code>，</code>或者给 SQL 语句前拼接 where、set 等后缀，可用于选择性插入、更新、删除或者条件查询等操作。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>prefix</td>
<td>给SQL语句拼接的前缀，为 trim 包含的内容加上前缀</td>
</tr>
<tr>
<td>suffix</td>
<td>给SQL语句拼接的后缀，为 trim 包含的内容加上后缀</td>
</tr>
<tr>
<td>prefixOverrides</td>
<td>去除 SQL 语句前面的关键字或字符，该关键字或者字符由 prefixOverrides 属性指定。</td>
</tr>
<tr>
<td>suffixOverrides</td>
<td>去除 SQL 语句后面的关键字或者字符，该关键字或者字符由 suffixOverrides 属性指定。</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlogWithTrim"</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>name = #{name},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span>author = #{author},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span>title = #{title},<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id = #{id}</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="13-6、foreach"><a href="#13-6、foreach" class="headerlink" title="13.6、foreach"></a>13.6、foreach</h4><p>Mybatis foreach 标签用于循环语句，它很好的支持了数据和 List、set 接口的集合，并对此提供遍历的功能。语法格式如下。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list|array|map key"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">    参数值</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>foreach 标签主要有以下属性，说明如下。</p>
<ul>
<li>item：表示集合中每一个元素进行迭代时的别名。</li>
<li>index：指定一个名字，表示在迭代过程中每次迭代到的位置。</li>
<li>open：表示该语句以什么开始（既然是 in 条件语句，所以必然以<code>(</code>开始）。</li>
<li>separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以<code>,</code>作为分隔符）。</li>
<li>close：表示该语句以什么结束（既然是 in 条件语句，所以必然以<code>)</code>开始）。</li>
</ul>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBolgWithForeach"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #{item}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"1"</span>);</span><br><span class="line">    list.add(<span class="string">"3"</span>);</span><br><span class="line">    list.add(<span class="string">"4"</span>);</span><br><span class="line">    System.out.println(mapper.getBolgWithForeach(list));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="13-7、SQL-片段"><a href="#13-7、SQL-片段" class="headerlink" title="13.7、SQL 片段"></a>13.7、SQL 片段</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sqlSegment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">        and id = #{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #{author}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #{title}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBolg"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"sqlSegment"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>顾名思义，将某一段 sql 语句提取出来，以便后续复用！</p>
<h2 id="14、Mybatis-缓存"><a href="#14、Mybatis-缓存" class="headerlink" title="14、Mybatis 缓存"></a>14、Mybatis 缓存</h2><p>缓存可以将数据保存在内存中，是互联网系统常常用到的。目前流行的缓存服务器有 MongoDB、Redis、Ehcache 等。缓存是在计算机内存上保存的数据，读取时无需再从磁盘读入，因此具备快速读取和使用的特点。</p>
<p>和大多数持久化框架一样，MyBatis 提供了一级缓存和二级缓存的支持。默认情况下，MyBatis 只开启一级缓存。</p>
<h4 id="14-1、一级缓存"><a href="#14-1、一级缓存" class="headerlink" title="14.1、一级缓存"></a>14.1、一级缓存</h4><p>一级缓存是基于 PerpetualCache（MyBatis自带）的 HashMap 本地缓存，作用范围为 <code>session</code> 域内。当 session flush（刷新）或者 close（关闭）之后，该 session 中所有的 cache（缓存）就会被清空。</p>
<p>在参数和 SQL 完全一样的情况下，我们使用同一个 SqlSession 对象调用同一个 mapper 的方法，往往只执行一次 SQL。因为使用 SqlSession 第一次查询后，MyBatis 会将其放在缓存中，再次查询时，如果没有刷新，并且缓存没有超时的情况下，SqlSession 会取出当前缓存的数据，而不会再次发送 SQL 到数据库。</p>
<p>查询不同 blog</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">2</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 紫梦沁香, DeFlory, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br><span class="line">====================================</span><br><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">2</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">2</span>, 动态sql, 狂神说, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">2</span>, title=动态sql, author=狂神说, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>查询相同 blog</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">1</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 紫梦沁香, DeFlory, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br><span class="line">====================================</span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br></pre></td></tr></tbody></table></figure>
<div class="note info">
            <p>显而易见，当运行同样的查询语句时，只会返回结果，而不会到数据库中查询。</p>
          </div>
<h4 id="14-2、二级缓存"><a href="#14-2、二级缓存" class="headerlink" title="14.2、二级缓存"></a>14.2、二级缓存</h4><p>二级缓存是全局缓存，作用域超出 session 范围之外，可以被所有 SqlSession 共享。</p>
<p>一级缓存缓存的是 SQL 语句，二级缓存缓存的是结果对象。</p>
<p><strong>二级缓存的配置</strong></p>
<p>（1）MyBatis 的全局缓存配置需要在 mybatis-config.xml 的 settings 元素中设置，代码如下。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>（2）在 mapper 文件中设置缓存，默认不开启缓存。需要注意的是，二级缓存的作用域是针对 mapper 的 namescape 而言，即只有再次在 namescape 内的查询才能共享这个缓存，代码如下。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namescape</span>=<span class="string">"net.biancheng.WebsiteMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cache配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">readOnly</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		也可以使用&lt;cache/&gt;，参数全默认。	</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>eviction</td>
<td>代表的是缓存回收策略，目前 MyBatis 提供以下策略。LRU：使用较少，移除最长时间不用的对象；FIFO：先进先出，按对象进入缓存的顺序来移除它们；SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象；WEAK：弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象。</td>
</tr>
<tr>
<td>flushInterval</td>
<td>刷新间隔时间，单位为毫秒，这里配置的是 60 秒刷新，如果省略该配置，那么只有当 SQL 被执行的时候才会刷新缓存。</td>
</tr>
<tr>
<td>size</td>
<td>引用数目，正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。这里配置的是 512 个对象。</td>
</tr>
<tr>
<td>readOnly</td>
<td>只读，默认值为 false，意味着缓存数据只能读取而不能修改，这样设置的好处是可以快速读取缓存，缺点是没有办法修改缓存。</td>
</tr>
</tbody>
</table>
</div>
<p>（3）在 mapper 文件配置支持 cache 后，如果需要对个别查询进行调整，可以单独设置 cache，代码如下。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWebsiteList"</span> <span class="attr">resultType</span>=<span class="string">"net.biancheng.po.Website"</span> <span class="attr">usecache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">    SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">1</span>));</span><br><span class="line">    session.close();</span><br><span class="line">    System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line">    session = MyBatisUtil.getSession();</span><br><span class="line">    mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">    System.out.println(mapper.getBlogById(<span class="number">1</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>不开启二级缓存，查询了两次。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">233996206.</span></span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection<span class="meta">@df27fae</span>]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 紫梦沁香, DeFlory, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br><span class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection<span class="meta">@df27fae</span>]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection<span class="meta">@df27fae</span>]</span><br><span class="line">Returned connection <span class="number">233996206</span> to pool.</span><br><span class="line">====================================</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Checked out connection <span class="number">233996206</span> from pool.</span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection<span class="meta">@df27fae</span>]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 紫梦沁香, DeFlory, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>开启缓存，只查询了一次。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">1843289228.</span></span><br><span class="line">Setting autocommit to <span class="keyword">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6dde5c8c]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.blog where id = ? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 紫梦沁香, DeFlory, <span class="number">2021</span>-<span class="number">02</span>-09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46.0</span>, <span class="number">9999</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br><span class="line">Resetting autocommit to <span class="keyword">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@6dde5c8c]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@6dde5c8c]</span><br><span class="line">Returned connection <span class="number">1843289228</span> to pool.</span><br><span class="line">====================================</span><br><span class="line">Cache Hit Ratio [com.yqx.mapper.BlogMapper]: <span class="number">0.5</span></span><br><span class="line">Blog(id=<span class="number">1</span>, title=紫梦沁香, author=DeFlory, createTime=Tue Feb 09 <span class="number">20</span>:<span class="number">16</span>:<span class="number">46</span> CST <span class="number">2021</span>, views=<span class="number">9999</span>)</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>需要将实体类序列化，否则会报错！</p>
          </div>
<h4 id="14-3、缓存读取顺序"><a href="#14-3、缓存读取顺序" class="headerlink" title="14.3、缓存读取顺序"></a>14.3、缓存读取顺序</h4><ol>
<li>先查询二级缓存</li>
<li>在查询一级缓存</li>
<li>查询数据库</li>
</ol>
<p>对于 MyBatis 缓存<code>仅作了解</code>即可，因为面对一定规模的数据量，内置的 Cache 方式就派不上用场了，并且对查询结果集做缓存并不是 MyBatis 所擅长的，它专心做的应该是 SQL 映射。对于缓存，采用 OSCache、Memcached 等专门的缓存服务器来做更为合理。</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title>Pandas熊猫养殖</title>
    <url>/2021/10/23/Pandas%E7%86%8A%E7%8C%AB%E5%85%BB%E6%AE%96/</url>
    <content><![CDATA[<h2 id="一、Pandas-概览"><a href="#一、Pandas-概览" class="headerlink" title="一、Pandas 概览"></a>一、Pandas 概览</h2><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p><strong>Pandas</strong> 是 Python 的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。</p>
<p>Pandas 适用于处理以下类型的数据：</p>
<ul>
<li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li>
<li>有序和无序（非固定频率）的时间序列数据;</li>
<li>带行列标签的矩阵数据，包括同构或异构型数据;</li>
<li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li>
</ul>
<span id="more"></span>
<h4 id="2、数据结构"><a href="#2、数据结构" class="headerlink" title="2、数据结构"></a>2、数据结构</h4><div class="table-container">
<table>
<thead>
<tr>
<th>维数</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Series</td>
<td>带标签的一维同构数组</td>
</tr>
<tr>
<td>2</td>
<td>DataFrame</td>
<td>带标签的，大小可变的，二维异构表格</td>
</tr>
</tbody>
</table>
</div>
<h4 id="3、为什么有多个数据结构？"><a href="#3、为什么有多个数据结构？" class="headerlink" title="3、为什么有多个数据结构？"></a>3、为什么有多个数据结构？</h4><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p>
<p>一言以蔽之，<code>Series</code> 存储一维数据，<code>DataFrame</code> 存储二维数据。</p>
<h4 id="4、大小可变与数据复制"><a href="#4、大小可变与数据复制" class="headerlink" title="4、大小可变与数据复制"></a>4、大小可变与数据复制</h4><p>Pandas 所有数据结构的值都是可变的，但数据结构的大小并非都是可变的，比如，Series 的长度不可改变，但 DataFrame 里就可以插入列。</p>
<p>Pandas 里，绝大多数方法都不改变原始的输入数据，而是复制数据，生成新的对象。 一般来说，原始输入数据<code>不变</code>更稳妥。</p>
<h2 id="二、Pandas-使用"><a href="#二、Pandas-使用" class="headerlink" title="二、Pandas 使用"></a>二、Pandas 使用</h2><h4 id="1、生成对象"><a href="#1、生成对象" class="headerlink" title="1、生成对象"></a>1、生成对象</h4><p>（1）用值列表生成 Series 时，Pandas 默认自动生成整数索引</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s</span><br><span class="line">Out[<span class="number">4</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">8.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（2）用含日期时间索引与标签的 Numpy 数组生成 DataFrame</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: dates = pd.date_range(<span class="string">'20130101'</span>, periods=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: dates</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</span><br><span class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">'ABCD'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: df</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）用 Series 字典对象生成 DataFrame</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">9</span>]: df2 = pd.DataFrame({<span class="string">'A'</span>: <span class="number">1.</span>,</span><br><span class="line">   ...:                     <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20130102'</span>),</span><br><span class="line">   ...:                     <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</span><br><span class="line">   ...:                     <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">'int32'</span>),</span><br><span class="line">   ...:                     <span class="string">'E'</span>: pd.Categorical([<span class="string">"test"</span>, <span class="string">"train"</span>, <span class="string">"test"</span>, <span class="string">"train"</span>]),</span><br><span class="line">   ...:                     <span class="string">'F'</span>: <span class="string">'foo'</span>})</span><br><span class="line">   ...: </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: df2</span><br><span class="line">Out[<span class="number">10</span>]: </span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</span><br></pre></td></tr></tbody></table></figure>
<p>（4）DataFrame 的列有不同的数据类型</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: df2.dtypes</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">A           float64</span><br><span class="line">B    datetime64[ns]</span><br><span class="line">C           float32</span><br><span class="line">D             int32</span><br><span class="line">E          category</span><br><span class="line">F            <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2、查看数据"><a href="#2、查看数据" class="headerlink" title="2、查看数据"></a>2、查看数据</h4><p>（1）查看 DataFrame 头尾数据，默认长度为 5</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: df.head()</span><br><span class="line">Out[<span class="number">13</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: df.tail(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">14</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></tbody></table></figure>
<p>（2）显示索引与列名</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">15</span>]: df.index</span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line">DatetimeIndex([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</span><br><span class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: df.columns</span><br><span class="line">Out[<span class="number">16</span>]: Index([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>（3）将 DataFrame 转换为 numpy</p>
<div class="note success">
            <p>注意，DataFrame 的列由<code>多种数据类型</code>组成时，该操作<code>耗费</code>系统资源较大。</p><p>这也是 Pandas 和 NumPy 的本质区别：<strong>NumPy 数组只有一种数据类型，DataFrame 每列的数据类型各不相同</strong>。</p><p>调用 DataFrame.to_numpy()时，Pandas 查找支持 DataFrame 里所有数据类型的 NumPy 数据类型。还有一种数据类型是 <code>object</code>，可以把 DataFrame 列里的值强制转换为 Python 对象。</p>
          </div>
<p>下面这个 DataFrame 中的值都是浮点数， 因此 DataFrame.to_numpy() 会很快。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: df.to_numpy()</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">array([[ <span class="number">0.4691</span>, -<span class="number">0.2829</span>, -<span class="number">1.5091</span>, -<span class="number">1.1356</span>],</span><br><span class="line">       [ <span class="number">1.2121</span>, -<span class="number">0.1732</span>,  <span class="number">0.1192</span>, -<span class="number">1.0442</span>],</span><br><span class="line">       [-<span class="number">0.8618</span>, -<span class="number">2.1046</span>, -<span class="number">0.4949</span>,  <span class="number">1.0718</span>],</span><br><span class="line">       [ <span class="number">0.7216</span>, -<span class="number">0.7068</span>, -<span class="number">1.0396</span>,  <span class="number">0.2719</span>],</span><br><span class="line">       [-<span class="number">0.425</span> ,  <span class="number">0.567</span> ,  <span class="number">0.2762</span>, -<span class="number">1.0874</span>],</span><br><span class="line">       [-<span class="number">0.6737</span>,  <span class="number">0.1136</span>, -<span class="number">1.4784</span>,  <span class="number">0.525</span> ]])</span><br></pre></td></tr></tbody></table></figure>
<p>下面这个 DataFrame 中包含了多种类型，因此 DataFrame.to_numpy() 操作会耗费较多资源。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df2.to_numpy()</span><br><span class="line">Out[<span class="number">18</span>]: </span><br><span class="line">array([[<span class="number">1.0</span>, Timestamp(<span class="string">'2013-01-02 00:00:00'</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">'test'</span>, <span class="string">'foo'</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">'2013-01-02 00:00:00'</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">'train'</span>, <span class="string">'foo'</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">'2013-01-02 00:00:00'</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">'test'</span>, <span class="string">'foo'</span>],</span><br><span class="line">       [<span class="number">1.0</span>, Timestamp(<span class="string">'2013-01-02 00:00:00'</span>), <span class="number">1.0</span>, <span class="number">3</span>, <span class="string">'train'</span>, <span class="string">'foo'</span>]], dtype=<span class="built_in">object</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><strong>效率对比：差了近百倍。</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: %timeit df.to_numpy()</span><br><span class="line">		 %timeit df2.to_numpy()</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line"><span class="number">6.08</span> µs ± <span class="number">273</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">100000</span> loops each)</span><br><span class="line"><span class="number">428</span> µs ± <span class="number">22</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000</span> loops each)</span><br></pre></td></tr></tbody></table></figure>
<p>（4）查看数据的统计摘要</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: df.describe()</span><br><span class="line">Out[<span class="number">19</span>]: </span><br><span class="line">              A         B         C         D</span><br><span class="line">count  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span>  <span class="number">6.000000</span></span><br><span class="line">mean   <span class="number">0.073711</span> -<span class="number">0.431125</span> -<span class="number">0.687758</span> -<span class="number">0.233103</span></span><br><span class="line">std    <span class="number">0.843157</span>  <span class="number">0.922818</span>  <span class="number">0.779887</span>  <span class="number">0.973118</span></span><br><span class="line"><span class="built_in">min</span>   -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">25</span>%   -<span class="number">0.611510</span> -<span class="number">0.600794</span> -<span class="number">1.368714</span> -<span class="number">1.076610</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">0.022070</span> -<span class="number">0.228039</span> -<span class="number">0.767252</span> -<span class="number">0.386188</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">0.658444</span>  <span class="number">0.041933</span> -<span class="number">0.034326</span>  <span class="number">0.461706</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">1.212112</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">1.071804</span></span><br></pre></td></tr></tbody></table></figure>
<p>（5）转置数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: df.T</span><br><span class="line">Out[<span class="number">20</span>]: </span><br><span class="line">   <span class="number">2013</span>-01-01  <span class="number">2013</span>-01-02  <span class="number">2013</span>-01-03  <span class="number">2013</span>-01-04  <span class="number">2013</span>-01-05  <span class="number">2013</span>-01-06</span><br><span class="line">A    <span class="number">0.469112</span>    <span class="number">1.212112</span>   -<span class="number">0.861849</span>    <span class="number">0.721555</span>   -<span class="number">0.424972</span>   -<span class="number">0.673690</span></span><br><span class="line">B   -<span class="number">0.282863</span>   -<span class="number">0.173215</span>   -<span class="number">2.104569</span>   -<span class="number">0.706771</span>    <span class="number">0.567020</span>    <span class="number">0.113648</span></span><br><span class="line">C   -<span class="number">1.509059</span>    <span class="number">0.119209</span>   -<span class="number">0.494929</span>   -<span class="number">1.039575</span>    <span class="number">0.276232</span>   -<span class="number">1.478427</span></span><br><span class="line">D   -<span class="number">1.135632</span>   -<span class="number">1.044236</span>    <span class="number">1.071804</span>    <span class="number">0.271860</span>   -<span class="number">1.087401</span>    <span class="number">0.524988</span></span><br></pre></td></tr></tbody></table></figure>
<p>（6）按轴排序</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">21</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">                   D         C         B         A</span><br><span class="line"><span class="number">2013</span>-01-01 -<span class="number">1.135632</span> -<span class="number">1.509059</span> -<span class="number">0.282863</span>  <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span>-01-02 -<span class="number">1.044236</span>  <span class="number">0.119209</span> -<span class="number">0.173215</span>  <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span>-01-03  <span class="number">1.071804</span> -<span class="number">0.494929</span> -<span class="number">2.104569</span> -<span class="number">0.861849</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.271860</span> -<span class="number">1.039575</span> -<span class="number">0.706771</span>  <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">1.087401</span>  <span class="number">0.276232</span>  <span class="number">0.567020</span> -<span class="number">0.424972</span></span><br><span class="line"><span class="number">2013</span>-01-06  <span class="number">0.524988</span> -<span class="number">1.478427</span>  <span class="number">0.113648</span> -<span class="number">0.673690</span></span><br></pre></td></tr></tbody></table></figure>
<p>（7）按值排序</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">22</span>]: df.sort_values(by=<span class="string">'B'</span>)</span><br><span class="line">Out[<span class="number">22</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、选择"><a href="#3、选择" class="headerlink" title="3、选择"></a>3、选择</h4><h6 id="3-1、获取数据"><a href="#3-1、获取数据" class="headerlink" title="3.1、获取数据"></a>3.1、获取数据</h6><p>（1）获取单列，产生 <code>Series</code>，与 <code>df.A</code> 等价</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: df[<span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line"><span class="number">2013</span>-01-01    <span class="number">0.469112</span></span><br><span class="line"><span class="number">2013</span>-01-02    <span class="number">1.212112</span></span><br><span class="line"><span class="number">2013</span>-01-03   -<span class="number">0.861849</span></span><br><span class="line"><span class="number">2013</span>-01-04    <span class="number">0.721555</span></span><br><span class="line"><span class="number">2013</span>-01-05   -<span class="number">0.424972</span></span><br><span class="line"><span class="number">2013</span>-01-06   -<span class="number">0.673690</span></span><br><span class="line">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（2）用 [ ] 切片</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: df[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>]</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="3-2、按标签选择（loc）"><a href="#3-2、按标签选择（loc）" class="headerlink" title="3.2、按标签选择（loc）"></a>3.2、按标签选择（loc）</h6><p>（1）用标签提取一行数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">Out[<span class="number">26</span>]: </span><br><span class="line">A    <span class="number">0.469112</span></span><br><span class="line">B   -<span class="number">0.282863</span></span><br><span class="line">C   -<span class="number">1.509059</span></span><br><span class="line">D   -<span class="number">1.135632</span></span><br><span class="line">Name: <span class="number">2013</span>-01-01 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（2）用标签提取多列数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df.loc[:, [<span class="string">'A'</span>, <span class="string">'B'</span>]]</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）用标签切片，<code>左闭右闭</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">28</span>]: df.loc[<span class="string">'20130102'</span>:<span class="string">'20130104'</span>, [<span class="string">'A'</span> : <span class="string">'B'</span>]]</span><br><span class="line">Out[<span class="number">28</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span></span><br></pre></td></tr></tbody></table></figure>
<p>（4）返回对象降维（有一维使用列名直接选择）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">29</span>]: df.loc[<span class="string">'20130102'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>]]</span><br><span class="line">Out[<span class="number">29</span>]: </span><br><span class="line">A    <span class="number">1.212112</span></span><br><span class="line">B   -<span class="number">0.173215</span></span><br><span class="line">Name: <span class="number">2013</span>-01-02 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（5）提取标量值（全部维度都是用列名直接选择）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: df.loc[dates[<span class="number">0</span>], <span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></tbody></table></figure>
<p>（6）快速访问标量值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">31</span>]: df.at[dates[<span class="number">0</span>], <span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">0.46911229990718628</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>性能对比：相差25%，还可以接受</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">31</span>]: %timeit df.loc[dates[<span class="number">0</span>], <span class="string">'A'</span>]</span><br><span class="line">         %timeit df.at[dates[<span class="number">0</span>], <span class="string">'A'</span>]</span><br><span class="line">Out[<span class="number">31</span>]:</span><br><span class="line"><span class="number">32.3</span> µs ± <span class="number">764</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br><span class="line"><span class="number">24.7</span> µs ± <span class="number">580</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br></pre></td></tr></tbody></table></figure>
<h6 id="3-3、按位置选择（iloc）【重点】"><a href="#3-3、按位置选择（iloc）【重点】" class="headerlink" title="3.3、按位置选择（iloc）【重点】"></a>3.3、按位置选择（iloc）【重点】</h6><p>（1）用整数位置选择</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">32</span>]: df.iloc[<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">A    <span class="number">0.721555</span></span><br><span class="line">B   -<span class="number">0.706771</span></span><br><span class="line">C   -<span class="number">1.039575</span></span><br><span class="line">D    <span class="number">0.271860</span></span><br><span class="line">Name: <span class="number">2013</span>-01-04 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（2）用整数切片，<code>左闭右开</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">33</span>]: df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">                   A         B</span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）用整数列表按位置切片</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">                   A         C</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">0.494929</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.276232</span></span><br></pre></td></tr></tbody></table></figure>
<p>（4） 显式整行切片</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">34</span>]: df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">                   A         C</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">0.494929</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.276232</span></span><br></pre></td></tr></tbody></table></figure>
<p>（5）显式整列切片</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">36</span>]: df.iloc[:, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">36</span>]: </span><br><span class="line">                   B         C</span><br><span class="line"><span class="number">2013</span>-01-01 -<span class="number">0.282863</span> -<span class="number">1.509059</span></span><br><span class="line"><span class="number">2013</span>-01-02 -<span class="number">0.173215</span>  <span class="number">0.119209</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">2.104569</span> -<span class="number">0.494929</span></span><br><span class="line"><span class="number">2013</span>-01-04 -<span class="number">0.706771</span> -<span class="number">1.039575</span></span><br><span class="line"><span class="number">2013</span>-01-05  <span class="number">0.567020</span>  <span class="number">0.276232</span></span><br><span class="line"><span class="number">2013</span>-01-06  <span class="number">0.113648</span> -<span class="number">1.478427</span></span><br></pre></td></tr></tbody></table></figure>
<p>（6）显式提取值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">37</span>]: df.iloc[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">37</span>]: -<span class="number">0.17321464905330858</span></span><br></pre></td></tr></tbody></table></figure>
<p>（7）快速访问标量</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">38</span>]: df.iat[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">38</span>]: -<span class="number">0.17321464905330858</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>性能对比：相差无几，10%左右</strong>。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">39</span>]: %timeit df.iloc[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">         %timeit df.iat[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">Out[<span class="number">39</span>]:</span><br><span class="line"><span class="number">33.1</span> µs ± <span class="number">578</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br><span class="line"><span class="number">29</span> µs ± <span class="number">911</span> ns per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10000</span> loops each)</span><br></pre></td></tr></tbody></table></figure>
<h6 id="3-4、布尔索引"><a href="#3-4、布尔索引" class="headerlink" title="3.4、布尔索引"></a>3.4、布尔索引</h6><p>（1）用单列的值选择数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">39</span>]: df[df.A &gt; <span class="number">0</span>]</span><br><span class="line">Out[<span class="number">39</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br></pre></td></tr></tbody></table></figure>
<p>（2）选择 DataFrame 里满足条件的值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">40</span>]: df[df &gt; <span class="number">0</span>]</span><br><span class="line">Out[<span class="number">40</span>]: </span><br><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span>       NaN       NaN       NaN</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span>       NaN  <span class="number">0.119209</span>       NaN</span><br><span class="line"><span class="number">2013</span>-01-03       NaN       NaN       NaN  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span>       NaN       NaN  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-05       NaN  <span class="number">0.567020</span>  <span class="number">0.276232</span>       NaN</span><br><span class="line"><span class="number">2013</span>-01-06       NaN  <span class="number">0.113648</span>       NaN  <span class="number">0.524988</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）使用 isin() 筛选</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">41</span>]: df2 = df.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: df2[<span class="string">'E'</span>] = [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'three'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: df2</span><br><span class="line">Out[<span class="number">43</span>]: </span><br><span class="line">                   A         B         C         D      E</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span>    one</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span>    one</span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span>    two</span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span>  three</span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span>   four</span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span>  three</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: df2[df2[<span class="string">'E'</span>].isin([<span class="string">'two'</span>, <span class="string">'four'</span>])]</span><br><span class="line">Out[<span class="number">44</span>]: </span><br><span class="line">                   A         B         C         D     E</span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span>   two</span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span>  four</span><br></pre></td></tr></tbody></table></figure>
<h6 id="3-5、赋值"><a href="#3-5、赋值" class="headerlink" title="3.5、赋值"></a>3.5、赋值</h6><p>df</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">                   A         B         C         D</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></span><br></pre></td></tr></tbody></table></figure>
<p>（1）用索引自动对齐新增列的数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">45</span>]: s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=pd.date_range(<span class="string">'20130102'</span>, periods=<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: s1</span><br><span class="line">Out[<span class="number">46</span>]: </span><br><span class="line"><span class="number">2013</span>-01-02    <span class="number">1</span></span><br><span class="line"><span class="number">2013</span>-01-03    <span class="number">2</span></span><br><span class="line"><span class="number">2013</span>-01-04    <span class="number">3</span></span><br><span class="line"><span class="number">2013</span>-01-05    <span class="number">4</span></span><br><span class="line"><span class="number">2013</span>-01-06    <span class="number">5</span></span><br><span class="line"><span class="number">2013</span>-01-07    <span class="number">6</span></span><br><span class="line">Freq: D, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: df[<span class="string">'F'</span>] = s1</span><br></pre></td></tr></tbody></table></figure>
<p>（2）按标签赋值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">48</span>]: df.at[dates[<span class="number">0</span>], <span class="string">'A'</span>] = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）按位置赋值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">49</span>]: df.iat[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（4）按 Numpy 赋值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">50</span>]: df.loc[:, <span class="string">'D'</span>] = np.array([<span class="number">5</span>] * <span class="built_in">len</span>(df))</span><br></pre></td></tr></tbody></table></figure>
<p>上述结果</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">51</span>]: df</span><br><span class="line">Out[<span class="number">51</span>]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>  <span class="number">5</span>  NaN</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span>  <span class="number">5</span>  <span class="number">4.0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（5）使用 <code>where</code> 条件赋值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">52</span>]: df2 = df.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: df2[df2 &gt; <span class="number">0</span>] = -df2</span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: df2</span><br><span class="line">Out[<span class="number">54</span>]: </span><br><span class="line">                   A         B         C  D    F</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span> -<span class="number">5</span>  NaN</span><br><span class="line"><span class="number">2013</span>-01-02 -<span class="number">1.212112</span> -<span class="number">0.173215</span> -<span class="number">0.119209</span> -<span class="number">5</span> -<span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span> -<span class="number">5</span> -<span class="number">2.0</span></span><br><span class="line"><span class="number">2013</span>-01-04 -<span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span> -<span class="number">5</span> -<span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">0.424972</span> -<span class="number">0.567020</span> -<span class="number">0.276232</span> -<span class="number">5</span> -<span class="number">4.0</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.673690</span> -<span class="number">0.113648</span> -<span class="number">1.478427</span> -<span class="number">5</span> -<span class="number">5.0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4、缺失值"><a href="#4、缺失值" class="headerlink" title="4、缺失值"></a>4、缺失值</h4><p>Pandas 主要用 <code>np.nan</code> 表示缺失数据。 计算时，默认不包含空值。</p>
<p>（1）重建索引（reindex）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">55</span>]: df1 = df.reindex(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=<span class="built_in">list</span>(df.columns) + [<span class="string">'E'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: df1.loc[dates[<span class="number">0</span>]:dates[<span class="number">1</span>], <span class="string">'E'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: df1</span><br><span class="line">Out[<span class="number">57</span>]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>  <span class="number">5</span>  NaN  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span>  NaN</span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span>  NaN</span><br></pre></td></tr></tbody></table></figure>
<p>（2）删除所有含缺失值的行</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">58</span>]: df1.dropna(how=<span class="string">'any'</span>)</span><br><span class="line">Out[<span class="number">58</span>]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）填充缺失值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">59</span>]: df1.fillna(value=<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">59</span>]: </span><br><span class="line">                   A         B         C  D    F    E</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>  <span class="number">5</span>  <span class="number">5.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">5</span>  <span class="number">2.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">5</span>  <span class="number">3.0</span>  <span class="number">5.0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（4）获取 <code>nan</code> 值的布尔掩码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">60</span>]: pd.isna(df1)</span><br><span class="line">Out[<span class="number">60</span>]: </span><br><span class="line">                A      B      C      D      F      E</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>   <span class="literal">True</span>  <span class="literal">False</span></span><br><span class="line"><span class="number">2013</span>-01-02  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"><span class="number">2013</span>-01-03  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>   <span class="literal">True</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>   <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="5、运算"><a href="#5、运算" class="headerlink" title="5、运算"></a>5、运算</h4><h6 id="5-1、统计"><a href="#5-1、统计" class="headerlink" title="5.1、统计"></a>5.1、统计</h6><p>测试数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">                   A	       B            C	D	  F</span><br><span class="line"><span class="number">2013</span>-01-01	<span class="number">0.000000</span>	<span class="number">0.000000</span>	-<span class="number">0.051685</span>	<span class="number">5</span>	NaN</span><br><span class="line"><span class="number">2013</span>-01-02	-<span class="number">1.009592</span>	<span class="number">0.141643</span>	<span class="number">1.249475</span>	<span class="number">5</span>	<span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03	<span class="number">1.347492</span>	<span class="number">0.366389</span>	<span class="number">0.202027</span>	<span class="number">5</span>	<span class="number">2.0</span></span><br><span class="line"><span class="number">2013</span>-01-04	-<span class="number">2.973315</span>	<span class="number">1.455753</span>	<span class="number">0.257986</span>	<span class="number">5</span>	<span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span>-01-05	<span class="number">0.792836</span>	<span class="number">0.896040</span>	-<span class="number">0.443788</span>	<span class="number">5</span>	<span class="number">4.0</span></span><br><span class="line"><span class="number">2013</span>-01-06	-<span class="number">1.452124</span>	<span class="number">0.465876</span>	<span class="number">0.698220</span>	<span class="number">5</span>	<span class="number">5.0</span></span><br></pre></td></tr></tbody></table></figure>
<p>（1）一般情况下，运算时<code>排除</code>缺失值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">61</span>]: df.mean()</span><br><span class="line">Out[<span class="number">61</span>]: </span><br><span class="line">A   -<span class="number">0.004474</span></span><br><span class="line">B   -<span class="number">0.383981</span></span><br><span class="line">C   -<span class="number">0.687758</span></span><br><span class="line">D    <span class="number">5.000000</span></span><br><span class="line">F    <span class="number">3.000000</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（2）指定轴进行运算</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">62</span>]: df.mean(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">62</span>]: </span><br><span class="line"><span class="number">2013</span>-01-01    <span class="number">0.872735</span></span><br><span class="line"><span class="number">2013</span>-01-02    <span class="number">1.431621</span></span><br><span class="line"><span class="number">2013</span>-01-03    <span class="number">0.707731</span></span><br><span class="line"><span class="number">2013</span>-01-04    <span class="number">1.395042</span></span><br><span class="line"><span class="number">2013</span>-01-05    <span class="number">1.883656</span></span><br><span class="line"><span class="number">2013</span>-01-06    <span class="number">1.592306</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p>（3）不同维度对象运算时，要先对齐。此外，Pandas 自动沿指定维度<code>广播</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">63</span>]: s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=dates).shift(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: s</span><br><span class="line">Out[<span class="number">64</span>]: </span><br><span class="line"><span class="number">2013</span>-01-01    NaN</span><br><span class="line"><span class="number">2013</span>-01-02    NaN</span><br><span class="line"><span class="number">2013</span>-01-03    <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-04    <span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span>-01-05    <span class="number">5.0</span></span><br><span class="line"><span class="number">2013</span>-01-06    NaN</span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: df.sub(s, axis=<span class="string">'index'</span>)</span><br><span class="line">Out[<span class="number">65</span>]: </span><br><span class="line">                   A         B         C    D    F</span><br><span class="line"><span class="number">2013</span>-01-01       NaN       NaN       NaN  NaN  NaN</span><br><span class="line"><span class="number">2013</span>-01-02       NaN       NaN       NaN  NaN  NaN</span><br><span class="line"><span class="number">2013</span>-01-03 -<span class="number">1.861849</span> -<span class="number">3.104569</span> -<span class="number">1.494929</span>  <span class="number">4.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-04 -<span class="number">2.278445</span> -<span class="number">3.706771</span> -<span class="number">4.039575</span>  <span class="number">2.0</span>  <span class="number">0.0</span></span><br><span class="line"><span class="number">2013</span>-01-05 -<span class="number">5.424972</span> -<span class="number">4.432980</span> -<span class="number">4.723768</span>  <span class="number">0.0</span> -<span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-06       NaN       NaN       NaN  NaN  NaN</span><br></pre></td></tr></tbody></table></figure>
<h6 id="5-2、Apply-映射函数"><a href="#5-2、Apply-映射函数" class="headerlink" title="5.2、Apply 映射函数"></a>5.2、Apply 映射函数</h6><p>可以对所有行/列进行统一映射操作，默认为列</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">66</span>]: df.apply(np.cumsum)</span><br><span class="line">Out[<span class="number">66</span>]: </span><br><span class="line">                   A         B         C   D     F</span><br><span class="line"><span class="number">2013</span>-01-01  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>   <span class="number">5</span>   NaN</span><br><span class="line"><span class="number">2013</span>-01-02  <span class="number">1.212112</span> -<span class="number">0.173215</span> -<span class="number">1.389850</span>  <span class="number">10</span>   <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>-01-03  <span class="number">0.350263</span> -<span class="number">2.277784</span> -<span class="number">1.884779</span>  <span class="number">15</span>   <span class="number">3.0</span></span><br><span class="line"><span class="number">2013</span>-01-04  <span class="number">1.071818</span> -<span class="number">2.984555</span> -<span class="number">2.924354</span>  <span class="number">20</span>   <span class="number">6.0</span></span><br><span class="line"><span class="number">2013</span>-01-05  <span class="number">0.646846</span> -<span class="number">2.417535</span> -<span class="number">2.648122</span>  <span class="number">25</span>  <span class="number">10.0</span></span><br><span class="line"><span class="number">2013</span>-01-06 -<span class="number">0.026844</span> -<span class="number">2.303886</span> -<span class="number">4.126549</span>  <span class="number">30</span>  <span class="number">15.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())</span><br><span class="line">Out[<span class="number">67</span>]: </span><br><span class="line">A    <span class="number">2.073961</span></span><br><span class="line">B    <span class="number">2.671590</span></span><br><span class="line">C    <span class="number">1.785291</span></span><br><span class="line">D    <span class="number">0.000000</span></span><br><span class="line">F    <span class="number">4.000000</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="5-3、统计函数（value-counts）"><a href="#5-3、统计函数（value-counts）" class="headerlink" title="5.3、统计函数（value_counts）"></a>5.3、统计函数（value_counts）</h6><p>统计每个值出现的次数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">68</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: s</span><br><span class="line">Out[<span class="number">69</span>]: </span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">4</span>    <span class="number">6</span></span><br><span class="line"><span class="number">5</span>    <span class="number">4</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4</span></span><br><span class="line"><span class="number">7</span>    <span class="number">6</span></span><br><span class="line"><span class="number">8</span>    <span class="number">4</span></span><br><span class="line"><span class="number">9</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: s.value_counts()</span><br><span class="line">Out[<span class="number">70</span>]: </span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="number">6</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="5-4、字符串方法"><a href="#5-4、字符串方法" class="headerlink" title="5.4、字符串方法"></a>5.4、字符串方法</h6><p>Series 的 <code>str</code> 属性包含一组字符串处理功能。注意，<code>str</code> 的模式匹配默认使用的是正则表达式。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">71</span>]: s = pd.Series([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'Aaba'</span>, <span class="string">'Baca'</span>, np.nan, <span class="string">'CABA'</span>, <span class="string">'dog'</span>, <span class="string">'cat'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: s.<span class="built_in">str</span>.lower()</span><br><span class="line">Out[<span class="number">72</span>]: </span><br><span class="line"><span class="number">0</span>       a</span><br><span class="line"><span class="number">1</span>       b</span><br><span class="line"><span class="number">2</span>       c</span><br><span class="line"><span class="number">3</span>    aaba</span><br><span class="line"><span class="number">4</span>    baca</span><br><span class="line"><span class="number">5</span>     NaN</span><br><span class="line"><span class="number">6</span>    caba</span><br><span class="line"><span class="number">7</span>     dog</span><br><span class="line"><span class="number">8</span>     cat</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="6、合并（Merge）"><a href="#6、合并（Merge）" class="headerlink" title="6、合并（Merge）"></a>6、合并（Merge）</h4><p>Pandas 提供了多种将 Series、DataFrame 对象组合在一起的功能，用索引与关联代数功能的多种设置逻辑可执行连接（join）与合并（merge）操作。</p>
<h6 id="6-1、结合（Concat）"><a href="#6-1、结合（Concat）" class="headerlink" title="6.1、结合（Concat）"></a>6.1、结合（Concat）</h6><p>用于连接 pandas 对象</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">73</span>]: df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: df</span><br><span class="line">Out[<span class="number">74</span>]: </span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span> -<span class="number">0.548702</span>  <span class="number">1.467327</span> -<span class="number">1.015962</span> -<span class="number">0.483075</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.637550</span> -<span class="number">1.217659</span> -<span class="number">0.291519</span> -<span class="number">1.745505</span></span><br><span class="line"><span class="number">2</span> -<span class="number">0.263952</span>  <span class="number">0.991460</span> -<span class="number">0.919069</span>  <span class="number">0.266046</span></span><br><span class="line"><span class="number">3</span> -<span class="number">0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> -<span class="number">1.705775</span></span><br><span class="line"><span class="number">4</span> -<span class="number">0.919854</span> -<span class="number">0.042379</span>  <span class="number">1.247642</span> -<span class="number">0.009920</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></span><br><span class="line"><span class="number">6</span> -<span class="number">1.131345</span> -<span class="number">0.089329</span>  <span class="number">0.337863</span> -<span class="number">0.945867</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> -<span class="number">0.016692</span></span><br><span class="line"><span class="number">8</span> -<span class="number">0.575247</span>  <span class="number">0.254161</span> -<span class="number">1.143704</span>  <span class="number">0.215897</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1.193555</span> -<span class="number">0.077118</span> -<span class="number">0.408530</span> -<span class="number">0.862495</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解为多组</span></span><br><span class="line">In [<span class="number">75</span>]: pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: pd.concat(pieces)</span><br><span class="line">Out[<span class="number">76</span>]: </span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span> -<span class="number">0.548702</span>  <span class="number">1.467327</span> -<span class="number">1.015962</span> -<span class="number">0.483075</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.637550</span> -<span class="number">1.217659</span> -<span class="number">0.291519</span> -<span class="number">1.745505</span></span><br><span class="line"><span class="number">2</span> -<span class="number">0.263952</span>  <span class="number">0.991460</span> -<span class="number">0.919069</span>  <span class="number">0.266046</span></span><br><span class="line"><span class="number">3</span> -<span class="number">0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> -<span class="number">1.705775</span></span><br><span class="line"><span class="number">4</span> -<span class="number">0.919854</span> -<span class="number">0.042379</span>  <span class="number">1.247642</span> -<span class="number">0.009920</span></span><br><span class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></span><br><span class="line"><span class="number">6</span> -<span class="number">1.131345</span> -<span class="number">0.089329</span>  <span class="number">0.337863</span> -<span class="number">0.945867</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> -<span class="number">0.016692</span></span><br><span class="line"><span class="number">8</span> -<span class="number">0.575247</span>  <span class="number">0.254161</span> -<span class="number">1.143704</span>  <span class="number">0.215897</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1.193555</span> -<span class="number">0.077118</span> -<span class="number">0.408530</span> -<span class="number">0.862495</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="6-2、连接（Join）"><a href="#6-2、连接（Join）" class="headerlink" title="6.2、连接（Join）"></a>6.2、连接（Join）</h6><p>SQL 风格的合并</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">77</span>]: left = pd.DataFrame({<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: right = pd.DataFrame({<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: left</span><br><span class="line">Out[<span class="number">79</span>]: </span><br><span class="line">   key  lval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  foo     <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: right</span><br><span class="line">Out[<span class="number">80</span>]: </span><br><span class="line">   key  rval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line">Out[<span class="number">81</span>]: </span><br><span class="line">   key  lval  rval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  foo     <span class="number">2</span>     <span class="number">4</span></span><br><span class="line"><span class="number">3</span>  foo     <span class="number">2</span>     <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<p>这里还有另一个例子</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">82</span>]: left = pd.DataFrame({<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: right = pd.DataFrame({<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]})</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: left</span><br><span class="line">Out[<span class="number">84</span>]: </span><br><span class="line">   key  lval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  bar     <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: right</span><br><span class="line">Out[<span class="number">85</span>]: </span><br><span class="line">   key  rval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  bar     <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</span><br><span class="line">Out[<span class="number">86</span>]: </span><br><span class="line">   key  lval  rval</span><br><span class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  bar     <span class="number">2</span>     <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<h6 id="6-3、追加（Append）"><a href="#6-3、追加（Append）" class="headerlink" title="6.3、追加（Append）"></a>6.3、追加（Append）</h6><p>为 DataFrame 追加行</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">87</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">88</span>]: df</span><br><span class="line">Out[<span class="number">88</span>]: </span><br><span class="line">          A         B         C         D</span><br><span class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> -<span class="number">0.990582</span></span><br><span class="line"><span class="number">1</span> -<span class="number">0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></span><br><span class="line"><span class="number">2</span> -<span class="number">1.577585</span>  <span class="number">0.396823</span> -<span class="number">0.105381</span> -<span class="number">0.532532</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></span><br><span class="line"><span class="number">4</span> -<span class="number">0.727965</span> -<span class="number">0.589346</span>  <span class="number">0.339969</span> -<span class="number">0.693205</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> -<span class="number">0.708758</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">89</span>]: s = df.iloc[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore_index=True，忽略原先的index</span></span><br><span class="line">In [<span class="number">90</span>]: df.append(s, ignore_index=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">90</span>]: </span><br><span class="line">          A         B         C         D</span><br><span class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> -<span class="number">0.990582</span></span><br><span class="line"><span class="number">1</span> -<span class="number">0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></span><br><span class="line"><span class="number">2</span> -<span class="number">1.577585</span>  <span class="number">0.396823</span> -<span class="number">0.105381</span> -<span class="number">0.532532</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></span><br><span class="line"><span class="number">4</span> -<span class="number">0.727965</span> -<span class="number">0.589346</span>  <span class="number">0.339969</span> -<span class="number">0.693205</span></span><br><span class="line"><span class="number">5</span> -<span class="number">0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></span><br><span class="line"><span class="number">7</span> -<span class="number">0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> -<span class="number">0.708758</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="7、分组（Grouping）"><a href="#7、分组（Grouping）" class="headerlink" title="7、分组（Grouping）"></a>7、分组（Grouping）</h4><p><code>group by</code> 指的是涵盖下列一项或多项步骤的处理流程。</p>
<ul>
<li><strong>分割</strong>：按条件将数据分割成多组</li>
<li><strong>应用</strong>：为每组单独应用函数</li>
<li><strong>组合</strong>：将处理结果组合成一个数据结构</li>
</ul>
<p>测试数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">91</span>]: df = pd.DataFrame({<span class="string">'A'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,</span><br><span class="line">   ....:                          <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>],</span><br><span class="line">   ....:                    <span class="string">'B'</span>: [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">   ....:                          <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">   ....:                    <span class="string">'C'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line">   ....:                    <span class="string">'D'</span>: np.random.randn(<span class="number">8</span>)})</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: df</span><br><span class="line">Out[<span class="number">92</span>]: </span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">0</span>  foo    one -<span class="number">1.202872</span> -<span class="number">0.055224</span></span><br><span class="line"><span class="number">1</span>  bar    one -<span class="number">1.814470</span>  <span class="number">2.395985</span></span><br><span class="line"><span class="number">2</span>  foo    two  <span class="number">1.018601</span>  <span class="number">1.552825</span></span><br><span class="line"><span class="number">3</span>  bar  three -<span class="number">0.595447</span>  <span class="number">0.166599</span></span><br><span class="line"><span class="number">4</span>  foo    two  <span class="number">1.395433</span>  <span class="number">0.047609</span></span><br><span class="line"><span class="number">5</span>  bar    two -<span class="number">0.392670</span> -<span class="number">0.136473</span></span><br><span class="line"><span class="number">6</span>  foo    one  <span class="number">0.007207</span> -<span class="number">0.561757</span></span><br><span class="line"><span class="number">7</span>  foo  three  <span class="number">1.928123</span> -<span class="number">1.623033</span></span><br></pre></td></tr></tbody></table></figure>
<p>（1）先分组，再用 <code>sum()</code> 算出每组的汇总数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">93</span>]: df.groupby(<span class="string">'A'</span>).<span class="built_in">sum</span>()</span><br><span class="line">Out[<span class="number">93</span>]: </span><br><span class="line">            C        D</span><br><span class="line">A                     </span><br><span class="line">bar -<span class="number">2.802588</span>  <span class="number">2.42611</span></span><br><span class="line">foo  <span class="number">3.146492</span> -<span class="number">0.63958</span></span><br></pre></td></tr></tbody></table></figure>
<p>（2）多层分组后，生成多层索引，也可以应用 <code>sum</code> 函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">94</span>]: df.groupby([<span class="string">'A'</span>, <span class="string">'B'</span>]).<span class="built_in">sum</span>()</span><br><span class="line">Out[<span class="number">94</span>]: </span><br><span class="line">                  C         D</span><br><span class="line">A   B                        </span><br><span class="line">bar one   -<span class="number">1.814470</span>  <span class="number">2.395985</span></span><br><span class="line">    three -<span class="number">0.595447</span>  <span class="number">0.166599</span></span><br><span class="line">    two   -<span class="number">0.392670</span> -<span class="number">0.136473</span></span><br><span class="line">foo one   -<span class="number">1.195665</span> -<span class="number">0.616981</span></span><br><span class="line">    three  <span class="number">1.928123</span> -<span class="number">1.623033</span></span><br><span class="line">    two    <span class="number">2.414034</span>  <span class="number">1.600434</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8、重塑（Reshaping）"><a href="#8、重塑（Reshaping）" class="headerlink" title="8、重塑（Reshaping）"></a>8、重塑（Reshaping）</h4><h6 id="8-1、多层索引（Multi-Index）"><a href="#8-1、多层索引（Multi-Index）" class="headerlink" title="8.1、多层索引（Multi-Index）"></a>8.1、多层索引（Multi-Index）</h6><p>给每一行的数据添加多个索引 <code>index</code>，类似于 <code>GropyBy</code> 的分组效果</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">95</span>]: tuples = <span class="built_in">list</span>(<span class="built_in">zip</span>(*[[<span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'baz'</span>,</span><br><span class="line">   ....:                      <span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'qux'</span>, <span class="string">'qux'</span>],</span><br><span class="line">   ....:                     [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>,</span><br><span class="line">   ....:                      <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>]]))</span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: index = pd.MultiIndex.from_tuples(tuples, names=[<span class="string">'first'</span>, <span class="string">'second'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: df2 = df[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: df2</span><br><span class="line">Out[<span class="number">99</span>]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one     <span class="number">0.029399</span> -<span class="number">0.542108</span></span><br><span class="line">      two     <span class="number">0.282696</span> -<span class="number">0.087302</span></span><br><span class="line">baz   one    -<span class="number">1.575170</span>  <span class="number">1.771208</span></span><br><span class="line">      two     <span class="number">0.816482</span>  <span class="number">1.100230</span></span><br></pre></td></tr></tbody></table></figure>
<p>多层索引选择数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">96</span>]: df.loc[<span class="string">'bar'</span>, <span class="string">'one'</span>]</span><br><span class="line">   ....: df</span><br><span class="line">    </span><br><span class="line">Out[<span class="number">96</span>]: </span><br><span class="line">A   -<span class="number">0.204011</span></span><br><span class="line">B   -<span class="number">1.956557</span></span><br><span class="line">Name: (bar, one), dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="8-2、堆叠（Stack）"><a href="#8-2、堆叠（Stack）" class="headerlink" title="8.2、堆叠（Stack）"></a>8.2、堆叠（Stack）</h6><p><code>stack()</code> 方法将 DataFrame 压缩至一层，即 Series</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">100</span>]: stacked = df2.stack()</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: stacked</span><br><span class="line">Out[<span class="number">101</span>]: </span><br><span class="line">first  second   </span><br><span class="line">               B   -<span class="number">0.542108</span></span><br><span class="line">       two     A    <span class="number">0.282696</span></span><br><span class="line">               B   -<span class="number">0.087302</span></span><br><span class="line">baz    one     A   -<span class="number">1.575170</span></span><br><span class="line">               B    <span class="number">1.771208</span></span><br><span class="line">       two     A    <span class="number">0.816482</span></span><br><span class="line">               B    <span class="number">1.100230</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<p><strong>压缩</strong>后的 DataFrame 或 Series 具有多层索引，<code>stack()</code> 的逆操作是 <code>unstack()</code>，默认为拆叠最后一层。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">102</span>]: stacked.unstack()</span><br><span class="line">Out[<span class="number">102</span>]: </span><br><span class="line">                     A         B</span><br><span class="line">first second                    </span><br><span class="line">bar   one     <span class="number">0.029399</span> -<span class="number">0.542108</span></span><br><span class="line">      two     <span class="number">0.282696</span> -<span class="number">0.087302</span></span><br><span class="line">baz   one    -<span class="number">1.575170</span>  <span class="number">1.771208</span></span><br><span class="line">      two     <span class="number">0.816482</span>  <span class="number">1.100230</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: stacked.unstack(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">103</span>]: </span><br><span class="line">second        one       two</span><br><span class="line">first                      </span><br><span class="line">bar   A  <span class="number">0.029399</span>  <span class="number">0.282696</span></span><br><span class="line">      B -<span class="number">0.542108</span> -<span class="number">0.087302</span></span><br><span class="line">baz   A -<span class="number">1.575170</span>  <span class="number">0.816482</span></span><br><span class="line">      B  <span class="number">1.771208</span>  <span class="number">1.100230</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: stacked.unstack(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">104</span>]: </span><br><span class="line">first          bar       baz</span><br><span class="line">second                      </span><br><span class="line">one    A  <span class="number">0.029399</span> -<span class="number">1.575170</span></span><br><span class="line">       B -<span class="number">0.542108</span>  <span class="number">1.771208</span></span><br><span class="line">two    A  <span class="number">0.282696</span>  <span class="number">0.816482</span></span><br><span class="line">       B -<span class="number">0.087302</span>  <span class="number">1.100230</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="9、数据透视表（Pivot-Tables）"><a href="#9、数据透视表（Pivot-Tables）" class="headerlink" title="9、数据透视表（Pivot Tables）"></a>9、数据透视表（Pivot Tables）</h4><p>类似 <code>GroupBy</code> 分组查询，更胜任更复杂的查询。</p>
<p>数据表如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">105</span>]: df = pd.DataFrame({<span class="string">'A'</span>: [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>] * <span class="number">3</span>,</span><br><span class="line">   .....:                    <span class="string">'B'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>] * <span class="number">4</span>,</span><br><span class="line">   .....:                    <span class="string">'C'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>] * <span class="number">2</span>,</span><br><span class="line">   .....:                    <span class="string">'D'</span>: np.random.randn(<span class="number">12</span>),</span><br><span class="line">   .....:                    <span class="string">'E'</span>: np.random.randn(<span class="number">12</span>)})</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: df</span><br><span class="line">Out[<span class="number">106</span>]: </span><br><span class="line">        A  B    C         D         E</span><br><span class="line"><span class="number">0</span>     one  A  foo  <span class="number">1.418757</span> -<span class="number">0.179666</span></span><br><span class="line"><span class="number">1</span>     one  B  foo -<span class="number">1.879024</span>  <span class="number">1.291836</span></span><br><span class="line"><span class="number">2</span>     two  C  foo  <span class="number">0.536826</span> -<span class="number">0.009614</span></span><br><span class="line"><span class="number">3</span>   three  A  bar  <span class="number">1.006160</span>  <span class="number">0.392149</span></span><br><span class="line"><span class="number">4</span>     one  B  bar -<span class="number">0.029716</span>  <span class="number">0.264599</span></span><br><span class="line"><span class="number">5</span>     one  C  bar -<span class="number">1.146178</span> -<span class="number">0.057409</span></span><br><span class="line"><span class="number">6</span>     two  A  foo  <span class="number">0.100900</span> -<span class="number">1.425638</span></span><br><span class="line"><span class="number">7</span>   three  B  foo -<span class="number">1.035018</span>  <span class="number">1.024098</span></span><br><span class="line"><span class="number">8</span>     one  C  foo  <span class="number">0.314665</span> -<span class="number">0.106062</span></span><br><span class="line"><span class="number">9</span>     one  A  bar -<span class="number">0.773723</span>  <span class="number">1.824375</span></span><br><span class="line"><span class="number">10</span>    two  B  bar -<span class="number">1.170653</span>  <span class="number">0.595974</span></span><br><span class="line"><span class="number">11</span>  three  C  bar  <span class="number">0.648740</span>  <span class="number">1.167115</span></span><br></pre></td></tr></tbody></table></figure>
<p>生成透视图</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">107</span>]: pd.pivot_table(df, values=<span class="string">'D'</span>, index=[<span class="string">'A'</span>, <span class="string">'B'</span>], columns=[<span class="string">'C'</span>])</span><br><span class="line">Out[<span class="number">107</span>]: </span><br><span class="line">C             bar       foo</span><br><span class="line">A     B                    </span><br><span class="line">one   A -<span class="number">0.773723</span>  <span class="number">1.418757</span></span><br><span class="line">      B -<span class="number">0.029716</span> -<span class="number">1.879024</span></span><br><span class="line">      C -<span class="number">1.146178</span>  <span class="number">0.314665</span></span><br><span class="line">three A  <span class="number">1.006160</span>       NaN</span><br><span class="line">      B       NaN -<span class="number">1.035018</span></span><br><span class="line">      C  <span class="number">0.648740</span>       NaN</span><br><span class="line">two   A       NaN  <span class="number">0.100900</span></span><br><span class="line">      B -<span class="number">1.170653</span>       NaN</span><br><span class="line">      C       NaN  <span class="number">0.536826</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="10、时间序列（Time-Series）"><a href="#10、时间序列（Time-Series）" class="headerlink" title="10、时间序列（Time Series）"></a>10、时间序列（Time Series）</h4><p>Pandas 为频率转换时重采样提供了虽然简单易用，但强大高效的功能。例如将秒级的数据转换为 1 分钟为频率的数据。这种操作常见于财务应用程序，但又不仅限于此。</p>
<h6 id="10-1、时间频率转换"><a href="#10-1、时间频率转换" class="headerlink" title="10.1、时间频率转换"></a>10.1、时间频率转换</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">108</span>]: rng = pd.date_range(<span class="string">'1/1/2012'</span>, periods=<span class="number">100</span>, freq=<span class="string">'S'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: ts = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">500</span>, <span class="built_in">len</span>(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: ts.resample(<span class="string">'1Min'</span>).<span class="built_in">sum</span>()</span><br><span class="line">Out[<span class="number">110</span>]: </span><br><span class="line"><span class="number">2012</span>-01-01 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">13512</span></span><br><span class="line"><span class="number">2012</span>-01-01 <span class="number">00</span>:01:<span class="number">00</span>     <span class="number">9013</span></span><br><span class="line">Freq: T, dtype: int32</span><br></pre></td></tr></tbody></table></figure>
<h6 id="10-2、时区表示"><a href="#10-2、时区表示" class="headerlink" title="10.2、时区表示"></a>10.2、时区表示</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">111</span>]: rng = pd.date_range(<span class="string">'3/6/2012 00:00'</span>, periods=<span class="number">5</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: ts = pd.Series(np.random.randn(<span class="built_in">len</span>(rng)), rng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: ts</span><br><span class="line">Out[<span class="number">113</span>]: </span><br><span class="line"><span class="number">2012</span>-03-06    <span class="number">0.464000</span></span><br><span class="line"><span class="number">2012</span>-03-07    <span class="number">0.227371</span></span><br><span class="line"><span class="number">2012</span>-03-08   -<span class="number">0.496922</span></span><br><span class="line"><span class="number">2012</span>-03-09    <span class="number">0.306389</span></span><br><span class="line"><span class="number">2012</span>-03-<span class="number">10</span>   -<span class="number">2.290613</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: ts_utc = ts.tz_localize(<span class="string">'UTC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: ts_utc</span><br><span class="line">Out[<span class="number">115</span>]: </span><br><span class="line"><span class="number">2012</span>-03-06 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.464000</span></span><br><span class="line"><span class="number">2012</span>-03-07 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.227371</span></span><br><span class="line"><span class="number">2012</span>-03-08 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   -<span class="number">0.496922</span></span><br><span class="line"><span class="number">2012</span>-03-09 <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.306389</span></span><br><span class="line"><span class="number">2012</span>-03-<span class="number">10</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   -<span class="number">2.290613</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="10-3、转换时区"><a href="#10-3、转换时区" class="headerlink" title="10.3、转换时区"></a>10.3、转换时区</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">116</span>]: ts_utc.tz_convert(<span class="string">'US/Eastern'</span>)</span><br><span class="line">Out[<span class="number">116</span>]: </span><br><span class="line"><span class="number">2012</span>-03-05 <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span>-05:<span class="number">00</span>    <span class="number">0.464000</span></span><br><span class="line"><span class="number">2012</span>-03-06 <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span>-05:<span class="number">00</span>    <span class="number">0.227371</span></span><br><span class="line"><span class="number">2012</span>-03-07 <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span>-05:<span class="number">00</span>   -<span class="number">0.496922</span></span><br><span class="line"><span class="number">2012</span>-03-08 <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span>-05:<span class="number">00</span>    <span class="number">0.306389</span></span><br><span class="line"><span class="number">2012</span>-03-09 <span class="number">19</span>:<span class="number">00</span>:<span class="number">00</span>-05:<span class="number">00</span>   -<span class="number">2.290613</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="10-4、转换时间段"><a href="#10-4、转换时间段" class="headerlink" title="10.4、转换时间段"></a>10.4、转换时间段</h6><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">117</span>]: rng = pd.date_range(<span class="string">'1/1/2012'</span>, periods=<span class="number">5</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: ts = pd.Series(np.random.randn(<span class="built_in">len</span>(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: ts</span><br><span class="line">Out[<span class="number">119</span>]: </span><br><span class="line"><span class="number">2012</span>-01-<span class="number">31</span>   -<span class="number">1.134623</span></span><br><span class="line"><span class="number">2012</span>-02-<span class="number">29</span>   -<span class="number">1.561819</span></span><br><span class="line"><span class="number">2012</span>-03-<span class="number">31</span>   -<span class="number">0.260838</span></span><br><span class="line"><span class="number">2012</span>-04-<span class="number">30</span>    <span class="number">0.281957</span></span><br><span class="line"><span class="number">2012</span>-05-<span class="number">31</span>    <span class="number">1.523962</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: ps = ts.to_period()</span><br><span class="line"></span><br><span class="line">In [<span class="number">121</span>]: ps</span><br><span class="line">Out[<span class="number">121</span>]: </span><br><span class="line"><span class="number">2012</span>-01   -<span class="number">1.134623</span></span><br><span class="line"><span class="number">2012</span>-02   -<span class="number">1.561819</span></span><br><span class="line"><span class="number">2012</span>-03   -<span class="number">0.260838</span></span><br><span class="line"><span class="number">2012</span>-04    <span class="number">0.281957</span></span><br><span class="line"><span class="number">2012</span>-05    <span class="number">1.523962</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="number">122</span>]: ps.to_timestamp()</span><br><span class="line">Out[<span class="number">122</span>]: </span><br><span class="line"><span class="number">2012</span>-01-01   -<span class="number">1.134623</span></span><br><span class="line"><span class="number">2012</span>-02-01   -<span class="number">1.561819</span></span><br><span class="line"><span class="number">2012</span>-03-01   -<span class="number">0.260838</span></span><br><span class="line"><span class="number">2012</span>-04-01    <span class="number">0.281957</span></span><br><span class="line"><span class="number">2012</span>-05-01    <span class="number">1.523962</span></span><br><span class="line">Freq: MS, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h6 id="10-5、转换时间段与时间戳"><a href="#10-5、转换时间段与时间戳" class="headerlink" title="10.5、转换时间段与时间戳"></a>10.5、转换时间段与时间戳</h6><p>下例把以 11 月为结束年份的季度频率转换为下一季度月末上午 9 点</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">123</span>]: prng = pd.period_range(<span class="string">'1990Q1'</span>, <span class="string">'2000Q4'</span>, freq=<span class="string">'Q-NOV'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: ts = pd.Series(np.random.randn(<span class="built_in">len</span>(prng)), prng)</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: ts.index = (prng.asfreq(<span class="string">'M'</span>, <span class="string">'e'</span>) + <span class="number">1</span>).asfreq(<span class="string">'H'</span>, <span class="string">'s'</span>) + <span class="number">9</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: ts.head()</span><br><span class="line">Out[<span class="number">126</span>]: </span><br><span class="line"><span class="number">1990</span>-03-01 09:<span class="number">00</span>   -<span class="number">0.902937</span></span><br><span class="line"><span class="number">1990</span>-06-01 09:<span class="number">00</span>    <span class="number">0.068159</span></span><br><span class="line"><span class="number">1990</span>-09-01 09:<span class="number">00</span>   -<span class="number">0.057873</span></span><br><span class="line"><span class="number">1990</span>-<span class="number">12</span>-01 09:<span class="number">00</span>   -<span class="number">0.368204</span></span><br><span class="line"><span class="number">1991</span>-03-01 09:<span class="number">00</span>   -<span class="number">1.144073</span></span><br><span class="line">Freq: H, dtype: float64</span><br></pre></td></tr></tbody></table></figure>
<h4 id="11、类别型（Categorical）"><a href="#11、类别型（Categorical）" class="headerlink" title="11、类别型（Categorical）"></a>11、类别型（Categorical）</h4><p>Pandas 的 DataFrame 里可以包含类别数据。</p>
<p>数据表</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">127</span>]: df = pd.DataFrame({<span class="string">"id"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">   .....:                    <span class="string">"raw_grade"</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'e'</span>]})</span><br></pre></td></tr></tbody></table></figure>
<p>将 <code>grade</code> 的原生数据转换为类别型数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">128</span>]: df[<span class="string">"grade"</span>] = df[<span class="string">"raw_grade"</span>].astype(<span class="string">"category"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: df[<span class="string">"grade"</span>]</span><br><span class="line">Out[<span class="number">129</span>]: </span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    b</span><br><span class="line"><span class="number">3</span>    a</span><br><span class="line"><span class="number">4</span>    a</span><br><span class="line"><span class="number">5</span>    e</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (<span class="number">3</span>, <span class="built_in">object</span>): [a, b, e]</span><br></pre></td></tr></tbody></table></figure>
<p>用含有名字的重命名不同类型，调用 <code>Series.cat.categories</code>，类别与名称一一对应，数量必须一致！</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">130</span>]: df[<span class="string">"grade"</span>].cat.categories = [<span class="string">"very good"</span>, <span class="string">"good"</span>, <span class="string">"very bad"</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>重新排序各类别，并添加缺失类，<code>Series.cat</code> 的方法默认返回新 <code>Series</code>，<code>set_categories</code> 可以增加缺失的类别！</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">131</span>]: df[<span class="string">"grade"</span>].cat.set_categories([<span class="string">"very bad"</span>, <span class="string">"bad"</span>, <span class="string">"medium"</span>,</span><br><span class="line">   .....:                                               <span class="string">"good"</span>, <span class="string">"very good"</span>])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: df[<span class="string">"grade"</span>]</span><br><span class="line">Out[<span class="number">132</span>]: </span><br><span class="line"><span class="number">0</span>    very good</span><br><span class="line"><span class="number">1</span>         good</span><br><span class="line"><span class="number">2</span>         good</span><br><span class="line"><span class="number">3</span>    very good</span><br><span class="line"><span class="number">4</span>    very good</span><br><span class="line"><span class="number">5</span>     very bad</span><br><span class="line">Name: grade, dtype: category</span><br><span class="line">Categories (<span class="number">5</span>, <span class="built_in">object</span>): [very bad, bad, medium, good, very good]</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>类别排序时，是按照生成类别时的顺序排序，而不是按照字典序。</p>
          </div>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">133</span>]: df.sort_values(by=<span class="string">"grade"</span>)</span><br><span class="line">Out[<span class="number">133</span>]: </span><br><span class="line">   <span class="built_in">id</span> raw_grade      grade</span><br><span class="line"><span class="number">5</span>   <span class="number">6</span>         e   very bad</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>         b       good</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span>         b       good</span><br><span class="line"><span class="number">0</span>   <span class="number">1</span>         a  very good</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>         a  very good</span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>         a  very good</span><br></pre></td></tr></tbody></table></figure>
<p>按类列分组（groupby）时，即便某类别为空，也会显示。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">134</span>]: df.groupby(<span class="string">"grade"</span>).size()</span><br><span class="line">Out[<span class="number">134</span>]: </span><br><span class="line">grade</span><br><span class="line">very bad     <span class="number">1</span></span><br><span class="line">bad          <span class="number">0</span></span><br><span class="line">medium       <span class="number">0</span></span><br><span class="line">good         <span class="number">2</span></span><br><span class="line">very good    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></tbody></table></figure>
<h4 id="12、可视化（Visualization）"><a href="#12、可视化（Visualization）" class="headerlink" title="12、可视化（Visualization）"></a>12、可视化（Visualization）</h4><p><code>matplotlib</code> 可视化也就图一乐，诶，真要可视化还得看我 <code>pandas</code>。</p>
<p>（1）单特征</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">135</span>]: ts = pd.Series(np.random.randn(<span class="number">1000</span>),</span><br><span class="line">   .....:                index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>))</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: ts = ts.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: ts.plot()</span><br><span class="line">Out[<span class="number">137</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x7f2b5771ac88</span>&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/10/24/5WGS4H.png" alt=""></p>
<p>（2）多特征</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">138</span>]: df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index,</span><br><span class="line">   .....:                   columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line">   .....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: df = df.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: df.plot()</span><br><span class="line">Out[<span class="number">141</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="number">0x7f2b53a2d7f0</span>&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/10/24/5WGADf.png" alt=""></p>
<h4 id="13、数据输入、输出"><a href="#13、数据输入、输出" class="headerlink" title="13、数据输入、输出"></a>13、数据输入、输出</h4><h6 id="13-1-CSV-文件"><a href="#13-1-CSV-文件" class="headerlink" title="13.1 CSV 文件"></a>13.1 CSV 文件</h6><p>（1）写入 CSV 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">143</span>]: df.to_csv(<span class="string">'foo.csv'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>（2）读取 CSV 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">144</span>]: pd.read_csv(<span class="string">'foo.csv'</span>)</span><br><span class="line">Out[<span class="number">144</span>]: </span><br><span class="line">     Unnamed: <span class="number">0</span>          A          B         C          D</span><br><span class="line"><span class="number">0</span>    <span class="number">2000</span>-01-01   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2000</span>-01-02  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2000</span>-01-03  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2000</span>-01-04  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2000</span>-01-05   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2000</span>-01-06   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></span><br><span class="line"><span class="number">6</span>    <span class="number">2000</span>-01-07   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></span><br><span class="line">..          ...        ...        ...       ...        ...</span><br><span class="line"><span class="number">993</span>  <span class="number">2002</span>-09-<span class="number">20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></span><br><span class="line"><span class="number">994</span>  <span class="number">2002</span>-09-<span class="number">21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></span><br><span class="line"><span class="number">995</span>  <span class="number">2002</span>-09-<span class="number">22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></span><br><span class="line"><span class="number">996</span>  <span class="number">2002</span>-09-<span class="number">23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></span><br><span class="line"><span class="number">997</span>  <span class="number">2002</span>-09-<span class="number">24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></span><br><span class="line"><span class="number">998</span>  <span class="number">2002</span>-09-<span class="number">25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></span><br><span class="line"><span class="number">999</span>  <span class="number">2002</span>-09-<span class="number">26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1000</span> rows x <span class="number">5</span> columns]</span><br></pre></td></tr></tbody></table></figure>
<h6 id="13-2-HDF5-文件"><a href="#13-2-HDF5-文件" class="headerlink" title="13.2 HDF5 文件"></a>13.2 HDF5 文件</h6><p>（1）写入 HDF5 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">145</span>]: df.to_hdf(<span class="string">'foo.h5'</span>, <span class="string">'df'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>（2）读取 HDF5 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">146</span>]: pd.read_hdf(<span class="string">'foo.h5'</span>, <span class="string">'df'</span>)</span><br><span class="line">Out[<span class="number">146</span>]: </span><br><span class="line">                    A          B         C          D</span><br><span class="line"><span class="number">2000</span>-01-01   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></span><br><span class="line"><span class="number">2000</span>-01-02  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></span><br><span class="line"><span class="number">2000</span>-01-03  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></span><br><span class="line"><span class="number">2000</span>-01-04  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></span><br><span class="line"><span class="number">2000</span>-01-05   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></span><br><span class="line"><span class="number">2000</span>-01-06   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></span><br><span class="line"><span class="number">2000</span>-01-07   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></span><br><span class="line"><span class="meta">... </span>              ...        ...       ...        ...</span><br><span class="line"><span class="number">2002</span>-09-<span class="number">20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></span><br><span class="line"><span class="number">2002</span>-09-<span class="number">26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1000</span> rows x <span class="number">4</span> columns]</span><br></pre></td></tr></tbody></table></figure>
<h6 id="13-3-Excel-文件"><a href="#13-3-Excel-文件" class="headerlink" title="13.3 Excel 文件"></a>13.3 Excel 文件</h6><p>（1）写入 Excel 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">147</span>]: df.to_excel(<span class="string">'foo.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>（2）读取 Excel 文件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">148</span>]: pd.read_excel(<span class="string">'foo.xlsx'</span>, <span class="string">'Sheet1'</span>, index_col=<span class="literal">None</span>, na_values=[<span class="string">'NA'</span>])</span><br><span class="line">Out[<span class="number">148</span>]: </span><br><span class="line">    Unnamed: <span class="number">0</span>          A          B         C          D</span><br><span class="line"><span class="number">0</span>   <span class="number">2000</span>-01-01   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2000</span>-01-02  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2000</span>-01-03  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2000</span>-01-04  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2000</span>-01-05   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2000</span>-01-06   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2000</span>-01-07   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></span><br><span class="line">..         ...        ...        ...       ...        ...</span><br><span class="line"><span class="number">993</span> <span class="number">2002</span>-09-<span class="number">20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></span><br><span class="line"><span class="number">994</span> <span class="number">2002</span>-09-<span class="number">21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></span><br><span class="line"><span class="number">995</span> <span class="number">2002</span>-09-<span class="number">22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></span><br><span class="line"><span class="number">996</span> <span class="number">2002</span>-09-<span class="number">23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></span><br><span class="line"><span class="number">997</span> <span class="number">2002</span>-09-<span class="number">24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></span><br><span class="line"><span class="number">998</span> <span class="number">2002</span>-09-<span class="number">25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></span><br><span class="line"><span class="number">999</span> <span class="number">2002</span>-09-<span class="number">26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1000</span> rows x <span class="number">5</span> columns]</span><br></pre></td></tr></tbody></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/10/08/Spring/</url>
    <content><![CDATA[<h2 id="1、-Spring"><a href="#1、-Spring" class="headerlink" title="1、 Spring"></a>1、 Spring</h2><h4 id="1-1、-简介"><a href="#1-1、-简介" class="headerlink" title="1.1、 简介"></a>1.1、 简介</h4><ul>
<li>Spring：春天 ——&gt; 给软件行业带来了春天！</li>
<li>2002年，首次推出了 <code>Spring</code> 框架的雏形：interface21 框架！</li>
<li><code>Spring</code> 框架即以 interface21 框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日，发布了1.0正式版。</li>
<li><strong>Rod Johnson</strong>，Spring Framework 创始人，著名作家，还是悉尼大学的音乐学博士。</li>
<li>spring理念：使现有的技术更加容易使用，本身是个大杂烩，整合了现有的技术框架！</li>
</ul>
<ul>
<li>SSH：Struts2 + Spring + Hibernate</li>
<li>SSM：SpringMvc + Spring + Mybatis</li>
</ul>
<span id="more"></span>
<p>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></p>
<p>GitHub：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p>
<p>maven 依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h4><ul>
<li>Spring 是一个开源免费的框架（容器）！</li>
<li>Spring 是一个轻量级的、<code>非入侵式</code>的框架！</li>
<li>控制反转（<code>IOC</code>），面向切面编程（<code>AOP</code>）！</li>
<li>支持事务的处理，对框架整合的支持！</li>
</ul>
<p><code>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</code></p>
<h4 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h4><p><img src="https://z3.ax1x.com/2021/10/08/5PkD2Q.png" alt=""></p>
<h4 id="1-4、-拓展"><a href="#1-4、-拓展" class="headerlink" title="1.4、 拓展"></a>1.4、 拓展</h4><p>现代化的 Java 开发，说白就是基于 Spring 的开发！</p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PAVJS.png" alt=""></p>
<ul>
<li>Spring Boot<ul>
<li>一个<code>快速开发</code>的脚手架。</li>
<li>基于 SpringBoot 可以快速地开发单个微服务。</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud 是基于 SpringBoot 实现的。</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用 SpringBoot 进行快速开发，学习 SpringBoot 的前提，需要完全掌握 Spring 及 SpringMVC！起到承上启下的作用！</p>
<p>Spring弊端：发展了太久以后，违背了原来的理念！配置十分繁琐，人称<code>配置地狱</code>！</p>
<h2 id="2、-IOC理论推导"><a href="#2、-IOC理论推导" class="headerlink" title="2、 IOC理论推导"></a>2、 IOC理论推导</h2><h4 id="2-1、MVC三层架构"><a href="#2-1、MVC三层架构" class="headerlink" title="2.1、MVC三层架构"></a>2.1、MVC三层架构</h4><p>MVC （模型视图控制器）即 Model、View 和 Controller。</p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PZaLj.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PHLBd.png" alt=""></p>
<p>Model</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起路由请求（a，img，form…）</li>
</ul>
<p>Controller</p>
<ul>
<li>接受用户请求，request：请求参数、Session信息…</li>
<li>交给业务层处理请求</li>
<li>控制视图跳转</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">登录---&gt;接受用户的登录请求---&gt;处理用户的请求（获取用户登录的参数：username，password）---&gt;交给业务层处理登录业务（判断用户名账号密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确---&gt;数据库</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2、实例"><a href="#2-2、实例" class="headerlink" title="2.2、实例"></a>2.2、实例</h4><ol>
<li><p>UserDao 接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserDaoImpl 实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"默认获取用户的数据！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserService 业务接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserServiceImpl 业务实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>MyTest 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 用户实际调用的是业务层，Dao层他们不需要接触</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Console 结果正常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">默认获取用户的数据！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>如果这时我们需要添加业务呢？</p>
<ol>
<li><p>新增 Dao 实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Mysql获取用户的数据！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改业务实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMysqlImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Console 结果正常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Mysql获取用户的数据！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>但每新增一个业务操作，我们就要去更改我们业务类吗？如果程序代码量十分庞大，修改一次的成本代价将十分昂贵，这显然不可能。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ASIN8.png" alt=""></p>
<p>为此我们需要 <code>set</code>注入。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 用户实际调用的是业务层，Dao层他们不需要接触</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoMysqlImpl());</span><br><span class="line">        userService.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>之前，程序是<code>主动</code>创建对象！控制权在程序员手上！</li>
<li>现在，使用了 set 注入后，程序不再具有主动性，而是变成了<code>被动</code>的接收对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注在业务的是线上！这就是IOC的原型！</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ASH3Q.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ApAD1.png" alt=""></p>
<h4 id="2-3、IOC本质"><a href="#2-3、IOC本质" class="headerlink" title="2.3、IOC本质"></a>2.3、IOC本质</h4><p><strong>控制翻转Ioc(Inversion of Control)，是一种设计思想，DI (依赖注入)是一种实现Ioc的一种方法</strong>。在没有Ioc的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制翻转后将对象的创建转移给第三方，个人认为所谓控制反转就是<strong>获得依赖对象的方式反转了</strong>。</p>
<p>采用 XML 方式配置 Bean 的时候，Bean 的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean 的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在 Spring 中实现的控制反转的是 Ioc 容器，其实现方式是依赖注入（Dependency Injection，DI）</strong></p>
<h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"余千禧"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Hello{name=<span class="string">'余千禧'</span>}</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上述代码中，自始至终我都没有使用 <code>new</code> 来创建 Hello 对象，对象创建和属性赋值全权交由 IOC 容器解决，它使得程序从原本<code>主动</code>的编程转变为<code>被动</code>的接受。</p>
<p><strong>至目前为止，我们已经彻底不用再到程序中去改动了，要实现不同的操作，只需要在 xml 配置文件中进行修改，所谓 IOC，即对象由 Spring 创建、管理和装配！</strong></p>
<h2 id="jump">4、IOC创建对象的方式</h2>

<p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String id, <span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        System.out.println(<span class="string">"User类已被有参构造方法创建！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"User类已被无参构造方法创建！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-1、使用无参构造方法创建对象（默认）"><a href="#4-1、使用无参构造方法创建对象（默认）" class="headerlink" title="4.1、使用无参构造方法创建对象（默认）"></a>4.1、使用无参构造方法创建对象（默认）</h4>   <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2、-使用有参构造方法创建对象"><a href="#4-2、-使用有参构造方法创建对象" class="headerlink" title="4.2、 使用有参构造方法创建对象"></a>4.2、 使用有参构造方法创建对象</h4><p>(1) 根据参数名赋值</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"User"</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"id"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">"yqx"</span>/&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"score"</span> value=<span class="string">"10"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>(2) 根据参数下标赋值</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"ysy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>(3) 根据参数类型赋值（相同则按顺序赋值）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"mc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>注：在默认情况下，只要注册在 beans.xml 中，则无论是否调用 getBean 来获取对象都会在读取配置文件的时候创建好对象，因此返回的都是这个事先被创建好的对象</code></p>
<p>此处还没运行到 <code>getBean</code> 时，就已经打印了创建对象的语句。</p>
<p><img src="https://z3.ax1x.com/2021/10/11/5VEsCn.png" alt=""></p>
<p>可以看到 user1 和 user2 是同一个对象。</p>
<p><img src="https://z3.ax1x.com/2021/10/11/5VV2RI.png" alt=""></p>
<h2 id="5、Spring-配置"><a href="#5、Spring-配置" class="headerlink" title="5、Spring 配置"></a>5、Spring 配置</h2><h4 id="5-1、bean-的配置"><a href="#5-1、bean-的配置" class="headerlink" title="5.1、bean 的配置"></a>5.1、bean 的配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	id: bean 的唯一标识</span></span><br><span class="line"><span class="comment">	class: bean 对象所对应的全限定名(包名 + 类型)</span></span><br><span class="line"><span class="comment">	name: 别名，但不唯一，可以用符号分隔</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">name</span>=<span class="string">"u1,u2 u3;u4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"mc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-2、别名"><a href="#5-2、别名" class="headerlink" title="5.2、别名"></a>5.2、别名</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	和 name 功能一致，可以给别名再取别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"u5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"u5"</span> <span class="attr">alias</span>=<span class="string">"u6"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h4><p><code>import</code> 一般用于团队开发使用，可以将多个配置文件导入合并成一个</p>
<p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的 bean 中，我们可以用 <code>import</code> 将所有人的 beans.xml 合并成一个！</p>
<ul>
<li>beans1.xml</li>
<li>beans2.xml</li>
<li>beans3.xml</li>
<li>applicaionContext.xml</li>
</ul>
<p>applicationContext.xml 作为汇总的配置文件只需要在其中导入其它配置文件即可。</p>
<p>注：有多个重复的 bean 时，会合并一个。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans1.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans2.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans3.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用的时候直接使用总的配置文件就行。</p>
<h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h4 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h4><p>详情查看<a href="#jump">IOC 创建对象的方式</a></p>
<h4 id="6-2、Set方式注入-【重点】"><a href="#6-2、Set方式注入-【重点】" class="headerlink" title="6.2、Set方式注入 【重点】"></a>6.2、Set方式注入 【重点】</h4><ul>
<li>依赖注入：Set 注入！<ul>
<li>依赖：bean 对象的创建依赖于容器！</li>
<li>注入：bean 对象中的所有属性由容器来注入！</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>宝山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yqx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>逛B站<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>风来之国<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>以撒的结合<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>杀戮尖塔<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--array--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>高等数学<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>线性代数<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>概率论<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Sun"</span> <span class="attr">value</span>=<span class="string">"太阳"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Star"</span> <span class="attr">value</span>=<span class="string">"星星"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Hanged Man"</span> <span class="attr">value</span>=<span class="string">"倒吊人"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"height"</span>&gt;</span>175<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"weight"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student{</span><br><span class="line">    name=<span class="string">'yqx'</span>, </span><br><span class="line">    address=Address{address=<span class="string">'宝山'</span>}, </span><br><span class="line">    age=<span class="number">20</span>, </span><br><span class="line">    books=[高等数学, 线性代数, 概率论], </span><br><span class="line">    hobbies=[唱歌, 跳舞, 逛B站], </span><br><span class="line">    card={The Sun=太阳, The Star=星星, The Hanged Man=倒吊人}, </span><br><span class="line">    games=[风来之国, 以撒的结合, 杀戮尖塔], </span><br><span class="line">    wife=<span class="string">'null'</span>, </span><br><span class="line">    info={height=<span class="number">175</span>, weight=<span class="number">60</span>}}</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h4><p>p (parameter) 命名空间，即 <code>set</code> 方式注入。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以下两种方式等价--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">p:name</span>=<span class="string">"yqx"</span> <span class="attr">p:age</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yqx"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>c (constructor) 命名空间，即<code>构造器</code>注入。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">c:name</span>=<span class="string">"deflory"</span> <span class="attr">c:age</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"use2"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>命名空间注入简化了配置文件的代码，但需要显示声明命名空间。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-4、Bean-的作用域"><a href="#6-4、Bean-的作用域" class="headerlink" title="6.4、Bean 的作用域"></a>6.4、Bean 的作用域</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">作用域</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">singleton</td>
<td style="text-align:center">该作用域将 bean 的定义限制在每一个 IoC 容器中的一个单一实例(默认)。</td>
</tr>
<tr>
<td style="text-align:center">prototype</td>
<td style="text-align:center">该作用域将单一 bean 的定义限制在任意数量的对象实例。</td>
</tr>
<tr>
<td style="text-align:center">request</td>
<td style="text-align:center">该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。</td>
</tr>
<tr>
<td style="text-align:center">session</td>
<td style="text-align:center">该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</td>
</tr>
<tr>
<td style="text-align:center">global-session</td>
<td style="text-align:center">该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。</td>
</tr>
</tbody>
</table>
</div>
<p>singleton 单例模式（默认）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    User user1 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    System.out.println(user1 == user2);		<span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>prototype 原型模式</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    User user1 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    System.out.println(user1 == user2);		<span class="comment">// false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="7、Bean-的自动装配"><a href="#7、Bean-的自动装配" class="headerlink" title="7、Bean 的自动装配"></a>7、Bean 的自动装配</h2><h4 id="7-1、ByName自动装配"><a href="#7-1、ByName自动装配" class="headerlink" title="7.1、ByName自动装配"></a>7.1、ByName自动装配</h4><p>会自动寻找与属性<code>类名</code>相同的 bean_id (首字母小写)。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h4><p>会自动寻找与<code>属性</code>相同类型的 bean (该类型必须唯一)。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"Person"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>总结：在使用 ByName 时，需要指定和类名小写相同的 bean_id；</p>
<p>​            在使用 ByType 时，与属性同类型的 bean 必须唯一。</p>
<h4 id="7-3、使用注解实现自动装配"><a href="#7-3、使用注解实现自动装配" class="headerlink" title="7.3、使用注解实现自动装配"></a>7.3、使用注解实现自动装配</h4><p>使用前提：<code>导入约束</code>并开启<code>注解支持</code></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>@Autowired 注解</strong></p>
<p>默认使用 ByType 的方式，不行则使用 ByName。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以使用 <code>@Qualifier</code> 来指定 bean_id</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = "cat11")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>@Resource 注解 （Java 原生注解）</strong></p>
<p>默认使用 ByName 的方式，不行则使用 ByType。</p>
<p>功能更为强大，可以指定 bean_id，相当于上述两个注解的结合。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = "cat11")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>必须指定<code>扫描</code>带有注解的包才能使用</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.pojo"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-1、属性注入"><a href="#8-1、属性注入" class="headerlink" title="8.1、属性注入"></a>8.1、属性注入</h4><ul>
<li><p>@Component 表明该类被 Spring 托管，id 为类名首字母小写。</p>
</li>
<li><p>@Value 给属性注入值。</p>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("yqx")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-2、注解的衍生"><a href="#8-2、注解的衍生" class="headerlink" title="8.2、注解的衍生"></a>8.2、注解的衍生</h4><ul>
<li>@Component 有几个衍生注解，在 web 开发中，会按照 mvc 三层架构分层！<ul>
<li>Dao 【@Repository】</li>
<li>Service 【@Service】</li>
<li>Controller 【@Controller】</li>
</ul>
</li>
</ul>
<p>这四个注解功能都是一样的，都是将某个类注册到 Spring 中，装配 Bean。</p>
<h4 id="8-3、作用域"><a href="#8-3、作用域" class="headerlink" title="8.3、作用域"></a>8.3、作用域</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("yqx")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-4、小结"><a href="#8-4、小结" class="headerlink" title="8.4、小结"></a>8.4、小结</h4><p>xml 与 注解：</p>
<ul>
<li>xml 更加万能，适用于任何场合！维护简单方便，只需修改配置文件。</li>
<li>注解维护繁琐，分散在各个实体类中。</li>
</ul>
<p>xml 与 注解最佳实践：</p>
<ul>
<li>xml 用来管理 bean。</li>
<li>注解只负责完成属性注入。</li>
</ul>
<h2 id="9、使用-Java-的方式配置-Spring"><a href="#9、使用-Java-的方式配置-Spring" class="headerlink" title="9、使用 Java 的方式配置 Spring"></a>9、使用 Java 的方式配置 Spring</h2><p><strong>@Configuration</strong></p>
<p>基于 Java 的配置选项，可以是你在不用配置 XML 的情况下编写大部分的 Spring。</p>
<ul>
<li>@Configuration 用于类上，表示这个类可以使用 Spring IOC 容器作为 Bean 定义的来源。</li>
<li>@Bean 用于方法上，这个方法要返回一个对象，而该对象会被注册为在 Spring 应用程序上下文中的 Bean。</li>
</ul>
<p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("deflory")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Java 配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上面的 Java 配置类等同于下面的 XML 配置。</p>
<p>需要注意的是，bean_id 和 @Bean 修饰的<code>方法名</code>一致。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>注：虽然 @Bean 中是 return new User()，但默认还是<code>单例</code>模式。</p>
<p><strong>@Import</strong></p>
<p>@import 注解允许从另一个配置类中加载 @Bean 定义。</p>
<p>另一个配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigA</span> </span>{</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> A(); </span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>主配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigB</span> </span>{</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> B(); </span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">   ApplicationContext context = </span><br><span class="line">   <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigB.class);</span><br><span class="line">   A a = context.getBean(A.class);</span><br><span class="line">   B b = context.getBean(B.class);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/10/16/5JbxhQ.png" alt=""></p>
<h4 id="10-1、-静态代理"><a href="#10-1、-静态代理" class="headerlink" title="10.1、 静态代理"></a>10.1、 静态代理</h4><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决。</li>
<li>真实角色：被代理的角色。</li>
<li>代理角色：代理真实角色，添加额外操作。</li>
<li>客户：访问代理对象的人。</li>
</ul>
<p>代码：</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>真实角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>代理角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line">    Rent landlord;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Rent landlord)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.landlord = landlord;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        findRenter();</span><br><span class="line">        landlord.rent();</span><br><span class="line">        negotiation();</span><br><span class="line">        fee();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介收取中介费"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findRenter</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介寻找租客"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">negotiation</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介签订合同"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>客户端访问代理角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Rent agent = <span class="keyword">new</span> Agent(<span class="keyword">new</span> Landlord());</span><br><span class="line">        agent.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务。</li>
<li>公共业务交代代理角色，实现了业务的分工。</li>
<li>公共业务发生拓展的时候，方便集中管理。</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低。</li>
</ul>
<h4 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h4><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，而非程序员手写的！</li>
<li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理。<ul>
<li>基于接口：JDK 动态代理 【下述使用】</li>
<li>基于类：cglib</li>
<li>java 字节码实现：javasist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：</p>
<ul>
<li>Proxy：代理</li>
<li>InvocationHandler：调用处理程序</li>
</ul>
<p>优点：</p>
<ul>
<li>包含静态代理的优点。</li>
<li>一个动态代理类代理的是一个接口，对应一类业务。</li>
</ul>
<h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。</p>
<h4 id="11-1、通知类型"><a href="#11-1、通知类型" class="headerlink" title="11.1、通知类型"></a>11.1、通知类型</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">通知</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">前置通知</td>
<td style="text-align:left">在一个方法执行之前，执行通知。</td>
</tr>
<tr>
<td style="text-align:left">后置通知</td>
<td style="text-align:left">在一个方法执行之后，不考虑其结果，执行通知。</td>
</tr>
<tr>
<td style="text-align:left">返回后通知</td>
<td style="text-align:left">在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td>
</tr>
<tr>
<td style="text-align:left">抛出异常后通知</td>
<td style="text-align:left">在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td>
</tr>
<tr>
<td style="text-align:left">环绕通知</td>
<td style="text-align:left">在建议方法调用之前和之后，执行通知。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="11-2、在-Spring-中使用-Aop"><a href="#11-2、在-Spring-中使用-Aop" class="headerlink" title="11.2、在 Spring 中使用 Aop"></a>11.2、在 Spring 中使用 Aop</h4><p>导入依赖包</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>添加约束</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>(1) 原生 Spring Api 接口</strong></p>
<p>xml 配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.yqx.log.Log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方式一：使用原生的Spring API接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yqx.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>日志类，这里采用了多实现。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span>, <span class="title">AfterReturningAdvice</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"方法执行完毕，返回值为："</span> + returnValue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"中的"</span> + method.getName() + <span class="string">"方法被调用了！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Test 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yqx.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 动态代理代理的是接口，因此只能转为接口类型</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.query();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>(2) 自定义类</strong></p>
<p>日志类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myLog"</span> <span class="attr">class</span>=<span class="string">"com.yqx.log.MyLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myLog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointout"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yqx.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointout"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>虽然方便，但无法获取类与方法的信息，功能不够强大。</p>
<p><strong>(3) 注解</strong></p>
<p>日志类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationLog</span> </span>{</span><br><span class="line">    <span class="meta">@Before("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        System.out.println(joinPoint.getSignature());</span><br><span class="line">        System.out.println(joinPoint.getArgs());</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.log"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">环绕前</span><br><span class="line"><span class="keyword">void</span> com.yqx.service.UserService.add()</span><br><span class="line">[Ljava.lang.Object;@6c6cb480</span><br><span class="line">前置通知</span><br><span class="line">添加了一条数据</span><br><span class="line">后置通知</span><br><span class="line">环绕后</span><br><span class="line">环绕前</span><br><span class="line"><span class="keyword">void</span> com.yqx.service.UserService.query()</span><br><span class="line">[Ljava.lang.Object;@3c46e67a</span><br><span class="line">前置通知</span><br><span class="line">查询了一条数据</span><br><span class="line">后置通知</span><br><span class="line">环绕后</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="12、Mybatis-Spring"><a href="#12、Mybatis-Spring" class="headerlink" title="12、Mybatis-Spring"></a>12、Mybatis-Spring</h2><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 <code>SqlSession</code> 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 <code>DataAccessException</code>。 最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p>
<p>MyBatis-Spring 需要以下版本：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">MyBatis-Spring</th>
<th style="text-align:left">MyBatis</th>
<th style="text-align:left">Spring Framework</th>
<th style="text-align:left">Spring Batch</th>
<th style="text-align:left">Java</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>2.0</strong></td>
<td style="text-align:left">3.5+</td>
<td style="text-align:left">5.0+</td>
<td style="text-align:left">4.0+</td>
<td style="text-align:left">Java 8+</td>
</tr>
<tr>
<td style="text-align:left"><strong>1.3</strong></td>
<td style="text-align:left">3.4+</td>
<td style="text-align:left">3.2.2+</td>
<td style="text-align:left">2.1+</td>
<td style="text-align:left">Java 6+</td>
</tr>
</tbody>
</table>
</div>
<h4 id="12-1、整合方式一"><a href="#12-1、整合方式一" class="headerlink" title="12.1、整合方式一"></a>12.1、整合方式一</h4><p>所需依赖如下</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis与spring整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>同属 org.springframework 包下的两个依赖必须保证版本一致！！！不然会报错！！！</p>
          </div>
<p>mybatis.xml，具体功能都整合到 <code>spring-mybatis.xml</code> 下，这里只放别名以及 setting 设置。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yqx.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>spring-mybatis.xml，一般存放和 sqlSession 有关的 bean，写好一般就不会再修改了。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">     <span class="comment">&lt;!--使用 SqlSessionFactoryBean来创建 SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在classpath后面的*必不可少，缺少*的话后面的通配符不起作用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:com/yqx/mapper/*.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--使用SqlSessionTemplate创建sqlSession对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>applicationContext.xml，作为汇总的 xml，同时用于存放自己的 bean。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mybatis.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.yqx.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">ref</span>=<span class="string">"sessionTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>因为要将对象交由 spring 的 ioc 容器托管，因此需要给 mapper 文件<code>添加实现类</code>，注入 SqlSessionTemplate。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sqlSessionTemplate.getMapper(UserMapper.class).getAllUsers();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>mapper.xml 如果不放在 <code>resources</code> 下，spring 是找不到的！！！报错<code>警告: Property 'mapperLocations' was specified but matching resources are not found.</code> 除非显式定义资源的位置！！！</p>
          </div>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="12-2、整合方式二"><a href="#12-2、整合方式二" class="headerlink" title="12.2、整合方式二"></a>12.2、整合方式二</h4><p>UserMapperImpl 继承了 <code>SqlSessionDaoSupport</code> 就可以直接获取到 sqlSession。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getSqlSessionTemplate().getMapper(UserMapper.class).getAllUsers();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>因此 spring-config.xml 中并不需要托管 sqlSession，只需要在创建 <code>UserMapperImpl</code> 的 bean 的时候注入 sqlSessionFactory 即可。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:com/yqx/mapper/*.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>applicationContext</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mybatis.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.yqx.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h4 id="13-1、ACID原则"><a href="#13-1、ACID原则" class="headerlink" title="13.1、ACID原则"></a>13.1、ACID原则</h4><ul>
<li><strong>原子性（Atomic）</strong>：事务中的各项操作，要么都做要么都不做，任何一项操作的失败都会导致整个事务的失败。</li>
<li><strong>一致性（Consistency）</strong>：事务前后数据的完整性必须保持一致。</li>
<li><strong>隔离性（Isolation）</strong>：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事物的操作数据所干扰，多个并发事物之间要相互隔离。</li>
<li><strong>持久性（Durability）</strong>：持久性是指一个事务一旦被提交，他对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
<p>这里我们创建了一个混合操作 <code>mixedOperations</code>，其中 <code>deleteUserById</code> 的 sql 语句我故意写错了，而按照原子性来说，这个事务删除失败了，理应前面的插入数据也应该进行回滚。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mixedOperations</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"事务处理前"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : getAllUsers()) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"======================================"</span>);</span><br><span class="line">        addUser(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"test"</span>, <span class="number">0</span>));</span><br><span class="line">        deleteUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"事务处理后"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : getAllUsers()) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getSqlSessionTemplate().getMapper(UserMapper.class).getAllUsers();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getSqlSessionTemplate().getMapper(UserMapper.class).addUser(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getSqlSessionTemplate().getMapper(UserMapper.class).deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>但实际上，我的数据表中的的确确插入了这个 test 用户，这个时候就需要声明式事务来帮我们管理。</p>
<p>导入约束</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置声明式事务</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为方法配置事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yqx.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/2021/11/08/SpringMVC/</url>
    <content><![CDATA[<h2 id="Spring-MVC入门"><a href="#Spring-MVC入门" class="headerlink" title="Spring MVC入门"></a>Spring MVC入门</h2><h4 id="1、Spring-MVC-执行流程"><a href="#1、Spring-MVC-执行流程" class="headerlink" title="1、Spring MVC 执行流程"></a>1、Spring MVC 执行流程</h4><p><img src="https://z3.ax1x.com/2021/11/08/IGfx1J.png" alt=""></p>
<p>（1）用户通过客户端向服务器发送请求，请求会被 Spring MVC 的前端控制器 DispatcherServlet 所拦截。</p>
<p>（2）DispatcherServlet 拦截到请求后，会调用 HandlerMapping 处理器映射器。</p>
<p>（3）处理器映射器根据请求的 URL 找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</p>
<p>（4）DispatcherServlet 会通过返回信息选择合适的 HandlerAdapter（处理器适配器）。</p>
<p>（5）HandlerAdapter 会调用并执行 Handler（处理器），这里的处理器指的就是程序中编写的 Controller 类，也被称为后端处理器。</p>
<p>（6）Controller 执行完成后，会返回一个 ModelAndView 对象，该对象中会包含视图名或包含模型和视图名。</p>
<p>（7）HandlerAdapter 将 ModelAndView 对象返回给 DispatcherServlet。</p>
<p>（8）DispatcherServlet 会根据 ModelAndView 对象选择一个合适的 ViewResolver（视图解析器）。</p>
<p>（9）ViewResolver 解析后，会向 DispatcherServlet 中返回具体的 View（视图）。</p>
<p>（10）DispatcherServlet 对 View 进行渲染（即将模型数据填充至视图中）。</p>
<p>（11）视图渲染结果会返回给客户端浏览器显示。</p>
<span id="more"></span>
<h4 id="2、第一个-Spring-MVC-程序"><a href="#2、第一个-Spring-MVC-程序" class="headerlink" title="2、第一个 Spring MVC 程序"></a>2、第一个 Spring MVC 程序</h4><p>导入依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>web.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    /: 只匹配所有的请求，不会去匹配jsp页面</span></span><br><span class="line"><span class="comment">    /*: 匹配所有的请求，包括jsp页面</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>classpath 只会到 class 路径中查找文件；</p><p>classpath* 不经包含 class 路径，还包括 jar 文件。</p>
          </div>
<p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自定义处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.yqx.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>HelloController.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, <span class="string">"login"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>test.jsp</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    发送了一条msg:${msg}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、注解实现-Spring-MVC"><a href="#3、注解实现-Spring-MVC" class="headerlink" title="3、注解实现 Spring MVC"></a>3、注解实现 Spring MVC</h4><p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--让Spring MVC不处理静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持mvc注解驱动,可以自动帮我们注入处理器映射器和处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Controller.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"注解实现"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"annotation"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>@Controller 代表组件，表示被 spring 容器托管，使用 @Repository、@Service 亦或是 @Component 也是一样的效果。</p>
<p>@RequestMapping 用来映射请求，通过它来指定控制器可以处理哪儿些 URL 请求，相当于 Servlet 在 web.xml 中的配置。</p>
<h4 id="4、Restful-风格"><a href="#4、Restful-风格" class="headerlink" title="4、Restful 风格"></a>4、Restful 风格</h4><h6 id="4-1、什么是-Restful-风格"><a href="#4-1、什么是-Restful-风格" class="headerlink" title="4.1、什么是 Restful 风格"></a>4.1、什么是 Restful 风格</h6><p>Restful 就是要一个资源定位及资源操作的风格。既不是标准也不是协议，只是一种风格。基于这个风格设计的软件会更简洁，更有层次，更易于实现缓存等机制。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--普通的url--&gt;</span></span><br><span class="line">https://www.baidu.com?search=123</span><br><span class="line"><span class="comment">&lt;!--采用restful风格的url--&gt;</span></span><br><span class="line">https://www.baidu.com/123</span><br></pre></td></tr></tbody></table></figure>
<h6 id="4-2、路径变量"><a href="#4-2、路径变量" class="headerlink" title="4.2、路径变量"></a>4.2、路径变量</h6><p>在 Spring MVC 中，我们可以通过 @PathVariable 来实现。</p>
<p>MyController.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/restful/{a1}/{b1}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model, <span class="meta">@PathVariable("a1")</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable("b1")</span> <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"res"</span>, a-b);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"restful"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>@PathVariable 中的参数值代表了 url 中对应的占位符名。如果不指定@PathVariable 的参数值，默认就会使用参数列表的参数名。</p>
          </div>
<p>restful.jsp</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    ${res}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/11/09/INV6jf.png" alt=""></p>
<p>同时它可以指定提交的格式。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 下述两种方式等价</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/restful/{a}/{b}", method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model, <span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">    model.addAttribute(<span class="string">"res"</span>, a * b);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"restful"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/restful/{a1}/{b1}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model, <span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b)</span></span>{</span><br><span class="line">    model.addAttribute(<span class="string">"res"</span>, a * b);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"restful"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5、重定向和转发"><a href="#5、重定向和转发" class="headerlink" title="5、重定向和转发"></a>5、重定向和转发</h4><h6 id="5-1、转发"><a href="#5-1、转发" class="headerlink" title="5.1、转发"></a>5.1、<strong>转发</strong></h6><p><img src="https://z3.ax1x.com/2021/11/10/INLtSA.png" alt=""></p>
<p>浏览器的请求发送给组件1，组件1经过一些处理之后，将 request 和 response 对象<code>传递</code>给组件2，由组件2继续处理，然后输出响应（也可以继续向其他组件“传递”）。</p>
<p>在上述转发的整个过程中，只涉及到<code>一次</code>浏览器和服务器之间的“请求-响应”，转发过程中的组件共享同一个请求（request）和响应（reponse）对象。</p>
<div class="note danger">
            <p>抓饭只能在同一个应用的组件之间进行，不可以转发给其他应用的地址。</p>
          </div>
<h6 id="5-2、重定向"><a href="#5-2、重定向" class="headerlink" title="5.2、重定向"></a>5.2、<strong>重定向</strong></h6><p><img src="https://z3.ax1x.com/2021/11/10/INOfgA.png" alt=""></p>
<p>浏览器向组件1发送请求信息，组件1向浏览器发回一个重定向响应信息，该响应信息不包含具体的数据内容，只是在响应头信息中包含了<strong>需要重定向到的地址信息</strong>（该地址可以是任何有效的 URL）。而浏览器收到该重定向响应后会自动地向该响应信息头中所指示的地址发出请求。</p>
<p>在上述重定向的整个过程中，涉及到<code>两次</code>浏览器和服务器之间的“请求-响应”。</p>
<h6 id="5-3、区别"><a href="#5-3、区别" class="headerlink" title="5.3、区别"></a>5.3、区别</h6><ul>
<li>转发是服务器内部跳转，数据不会丢失，浏览器只提交了一次请求，速度较快。</li>
<li>重定向是客户端二次跳转，数据会丢失，浏览器提交了二次请求，速度较慢。</li>
</ul>
<p>做增删改查时最好使用重定向，否则每次刷新页面就相当于在请求一次，可能会做额外的操作，导致数据错误。</p>
<div class="note success">
            <p>转发是服务器内部跳转，因此可以访问到 /WEB-INF 下的资源；而重定向是客户端跳转，因此无法访问到 /WEB-INF 下的资源。</p>
          </div>
<h6 id="5-3、代码实现"><a href="#5-3、代码实现" class="headerlink" title="5.3、代码实现"></a>5.3、代码实现</h6><p>Controller.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/forward1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"forward1"</span>);</span><br><span class="line">        <span class="comment">// 默认使用转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/forward2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"forward2"</span>);</span><br><span class="line">        <span class="comment">// 显式使用转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/jsp/test.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/redirect")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"redirect"</span>);</span><br><span class="line">        <span class="comment">// 显式使用重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6、请求参数"><a href="#6、请求参数" class="headerlink" title="6、请求参数"></a>6、请求参数</h4><h6 id="6-1、通过-url-传递一般参数"><a href="#6-1、通过-url-传递一般参数" class="headerlink" title="6.1、通过 url 传递一般参数"></a><strong>6.1、通过 url 传递一般参数</strong></h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterController</span> </span>{</span><br><span class="line">    <span class="comment">// url参数必须和参数列表参数名一致,否则无法获取</span></span><br><span class="line">    <span class="meta">@RequestMapping("parameter1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String name, Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"parameter"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// url参数必须和@RequestParam中的参数值一致,否则无法获取且会报400错误！！！</span></span><br><span class="line">    <span class="meta">@RequestMapping("parameter2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(<span class="meta">@RequestParam("username")</span> String name, Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"parameter"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="6-2、通过-url-传递实体类参数"><a href="#6-2、通过-url-传递实体类参数" class="headerlink" title="6.2、通过 url 传递实体类参数"></a><strong>6.2、通过 url 传递实体类参数</strong></h6><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/parameter3")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(User user123, Model model)</span></span>{</span><br><span class="line">    model.addAttribute(user123);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"user"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>user.jsp</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--如果没有设置键值对的键,默认使用值的类型首字母小写作为键--&gt;</span><br><span class="line">    姓名:${user.name}, 年龄:${user.age}</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/11/10/IUExMV.png" alt=""></p>
<h4 id="7、乱码问题"><a href="#7、乱码问题" class="headerlink" title="7、乱码问题"></a>7、乱码问题</h4><p>无论什么时候，只要是 web 应用服务项目，就不可能逃脱乱码的痛苦。</p>
<p><img src="https://z3.ax1x.com/2021/11/10/IUerrV.gif" alt=""></p>
<p>不过万幸的是，Spring 为我们提供了十分强大的过滤器，几乎可以解决所有的乱码问题，只需要在 web.xml 中配置即可。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/11/10/IUnT4e.gif" alt=""></p>
<h4 id="8、JSON"><a href="#8、JSON" class="headerlink" title="8、JSON"></a>8、JSON</h4><p>在前后端进行数据交互时，需要一种统一的数据格式，否则后端传的数据前端不知道怎么解析就毫无意义了。</p>
<h6 id="8-1、json-优点"><a href="#8-1、json-优点" class="headerlink" title="8.1、json 优点"></a>8.1、<strong>json 优点</strong></h6><ul>
<li><p>JSON类似于XML，比XML更小、更快、更容易解析。但同时XML也有它的不可替代性，应根据使用场景进行更合适的选择；</p>
</li>
<li><p>JSON语法简单，很容易理解，并且对象信息自描述，数据传输量小不占用带宽；</p>
</li>
<li><p>JSON的可读性、可扩展性都非常好，编码难度也比较低，即使不借助工具也能写出比较规范的JSON</p>
</li>
</ul>
<h6 id="8-2、Jackson"><a href="#8-2、Jackson" class="headerlink" title="8.2、Jackson"></a>8.2、Jackson</h6><p>导入依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Controller.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/json1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 返回普通的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"余千禧"</span>, <span class="string">"男"</span>).toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/json2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>{</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"余千禧"</span>, <span class="string">"男"</span>);</span><br><span class="line">        String str = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">// 返回json格式的字符串</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/json3")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>{</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"余千禧1"</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"余千禧2"</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"余千禧3"</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">"余千禧4"</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user5 = <span class="keyword">new</span> User(<span class="string">"余千禧5"</span>, <span class="string">"男"</span>);</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        list.add(user5);</span><br><span class="line">        String str = objectMapper.writeValueAsString(list);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>结果</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">/json1</span><br><span class="line">User(name=余千禧, sex=男)</span><br><span class="line"></span><br><span class="line">/json2</span><br><span class="line">{"name":"余千禧","sex":"男"}</span><br><span class="line"></span><br><span class="line">/json3</span><br><span class="line">[{"name":"余千禧1","sex":"男"},{"name":"余千禧2","sex":"男"},{"name":"余千禧3","sex":"男"},{"name":"余千禧4","sex":"男"},{"name":"余千禧5","sex":"男"}]</span><br></pre></td></tr></tbody></table></figure>
<p>如果出现了乱码，可以复制下述代码。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决返回字符串乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>@RestController 修饰在类上，表示该类不会通过视图解析器，即该类中所有请求映射方法所返回的字符串当做普通的 String 类型来处理；</p><p>同理还有一个 @RequestBody 修饰在方法上，表示该方法不会通过视图解析器。</p>
          </div>
<p><strong>封装成工具类</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtil</span> </span>{</span><br><span class="line">    <span class="comment">// 重载复用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToJson</span><span class="params">(Object object)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> objectToJson(object, <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToJson</span><span class="params">(Object object, String format)</span></span>{</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 如果是Date对象，则会format</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(format));</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">        } <span class="keyword">catch</span> (JsonProcessingException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h6 id="8-3、Fastjson"><a href="#8-3、Fastjson" class="headerlink" title="8.3、Fastjson"></a>8.3、Fastjson</h6><p>使用较 <strong>Jackson</strong> 而言更加便捷，同时默认就使用 “yyyy-MM-dd HH:mm:ss” 来格式化日期。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/json5")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test5</span><span class="params">()</span></span>{</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="string">"余千禧1"</span>, <span class="string">"男"</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="string">"余千禧2"</span>, <span class="string">"男"</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="string">"余千禧3"</span>, <span class="string">"男"</span>);</span><br><span class="line">    User user4 = <span class="keyword">new</span> User(<span class="string">"余千禧4"</span>, <span class="string">"男"</span>);</span><br><span class="line">    User user5 = <span class="keyword">new</span> User(<span class="string">"余千禧5"</span>, <span class="string">"男"</span>);</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    list.add(user3);</span><br><span class="line">    list.add(user4);</span><br><span class="line">    list.add(user5);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"*******Java对象转JSON字符串*******"</span>);</span><br><span class="line">    String str1 = JSON.toJSONString(list) ;</span><br><span class="line">    System.out.println( <span class="string">"SON.toSONString(list)==&gt;"</span>+str1);</span><br><span class="line">    String str2 = JSON.toJSONString(user1);</span><br><span class="line">    System.out.println( <span class="string">"JSON.toJSONString(user1)==&gt;"</span>+str2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\n******JSON字符串转Java对象*******"</span>);</span><br><span class="line">    User jp_user1=JSON.parseObject( str2,User.class);</span><br><span class="line">    System.out.println(<span class="string">"3SON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\n******Java对象转JSON对象******"</span>);</span><br><span class="line">    JSONObject jsonObject1 = (JSONObject)JSON.toJSON(user2);</span><br><span class="line">    System.out.println(<span class="string">"(JSONObject) JSON.to3SON(user2)z=&gt;"</span>+jsonObject1.getString(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\n******JSON对象转Java对象******"</span>);</span><br><span class="line">    User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">    System.out.println(<span class="string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span> + to_java_user);</span><br><span class="line"></span><br><span class="line">    String str = JSON.toJSONString(list);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">*******Java对象转JSON字符串*******</span><br><span class="line">SON.toSONString(list)==&gt;[{<span class="string">"name"</span>:<span class="string">"余千禧1"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>},{<span class="string">"name"</span>:<span class="string">"余千禧2"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>},{<span class="string">"name"</span>:<span class="string">"余千禧3"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>},{<span class="string">"name"</span>:<span class="string">"余千禧4"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>},{<span class="string">"name"</span>:<span class="string">"余千禧5"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>}]</span><br><span class="line">JSON.toJSONString(user1)==&gt;{<span class="string">"name"</span>:<span class="string">"余千禧1"</span>,<span class="string">"sex"</span>:<span class="string">"男"</span>}</span><br><span class="line"></span><br><span class="line">******JSON字符串转Java对象*******</span><br><span class="line">3SON.parseObject(str2,User.class)==&gt;User(name=余千禧<span class="number">1</span>, sex=男)</span><br><span class="line"></span><br><span class="line">******Java对象转JSON对象******</span><br><span class="line">(JSONObject) JSON.to3SON(user2)z=&gt;余千禧<span class="number">2</span></span><br><span class="line"></span><br><span class="line">******JSON对象转Java对象******</span><br><span class="line">JSON.toJavaObject(jsonObject1, User.class)==&gt;User(name=余千禧<span class="number">2</span>, sex=男)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="9、SSM整合"><a href="#9、SSM整合" class="headerlink" title="9、SSM整合"></a>9、SSM整合</h4><h6 id="9-1、配置文件代码-以后可以直接复制拿来用"><a href="#9-1、配置文件代码-以后可以直接复制拿来用" class="headerlink" title="9.1、配置文件代码(以后可以直接复制拿来用)"></a>9.1、配置文件代码(以后可以直接复制拿来用)</h6><ul>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC-05-SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.service"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"springmvc-servlet.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yqx.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>spring.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--读取配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:com/yqx/mapper/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器及处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h6 id="9-2-踩雷"><a href="#9-2-踩雷" class="headerlink" title="9.2 踩雷"></a>9.2 踩雷</h6><p>（1）db.properties </p>
<p>报错信息如下。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied <span class="keyword">for</span> user <span class="string">'11499'</span>@<span class="string">'localhost'</span> (using password: YES)</span><br></pre></td></tr></tbody></table></figure>
<p>这是因为 db.properties 里面 username 必须用 <code>jdbc.username</code>。否则 username 就变成了系统管理员（’11499’@’localhost’）的名字。</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 其实可以只将username改成jdbc.username</span></span><br><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure>
<p>将 spring.xml 中 DataSource 属性也一并修改。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>（2）mapper.java</p>
<p>报错信息如下。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Type <span class="class"><span class="keyword">interface</span> <span class="title">com</span>.<span class="title">yqx</span>.<span class="title">mapper</span>.<span class="title">BookMapper</span> <span class="title">is</span> <span class="title">not</span> <span class="title">known</span> <span class="title">to</span> <span class="title">the</span> <span class="title">MapperRegistry</span>.</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个问题有点傻，因为 mapper.xml 文件我都是直接使用模板，如下。</p>
<p>但这个项目是 BookMapper，然后就忘记改了…</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yqx.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>（3）web.xml</p>
<p>报错信息如下。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type <span class="string">'com.yqx.service.BookMapperImpl'</span> available: expected at least <span class="number">1</span> bean which qualifies as autowire candidate. Dependency annotations: {<span class="meta">@org</span>.springframework.beans.factory.annotation.Autowired(required=<span class="keyword">true</span>)}</span><br></pre></td></tr></tbody></table></figure>
<p>因为在 web.xml 中只引入了 springmvc-servlet.xml，因此不可能有 BookMapperImpl 这个 bean。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>只需要引入总的配置文件 applicationContext.xml ，再在 applicaitonContext.xml 中引入所有其他文件就行。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"springmvc-servlet.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>（4）post 表单提交出现乱码</p>
<p>添加过滤器</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>（5）xml 文件编码</p>
<p>报错信息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: <span class="number">1</span>字节的 UTF-<span class="number">8</span> 序列的字节 <span class="number">1</span> 无效</span><br></pre></td></tr></tbody></table></figure>
<p>该错误是由一些配置文件引起的：如applicationContext.xml的编码问题等。</p>
<p>对于Maven 项目，在项目依赖配置文件 pom.xml 中加入构建项目编码属性（注意顺序）：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="10、Ajax"><a href="#10、Ajax" class="headerlink" title="10、Ajax"></a>10、Ajax</h4><h6 id="10-1、异步"><a href="#10-1、异步" class="headerlink" title="10.1、异步"></a>10.1、异步</h6><p>异步（Asynchronous, async）是与同步（Synchronous, sync）相对的概念。</p>
<p>在我们学习的传统单线程编程中，程序的运行是同步的（同步不意味着所有步骤同时运行，而是指步骤在一个控制流序列中按<code>顺序</code>执行）。而异步的概念则是不保证同步的概念，也就是说，一个异步过程的执行将不再与原有的序列有顺序关系。</p>
<p>简单来理解就是：同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。</p>
<p><img src="https://z3.ax1x.com/2021/11/13/IsFhIf.png" alt=""></p>
<h6 id="10-2、什么时候使用异步编程"><a href="#10-2、什么时候使用异步编程" class="headerlink" title="10.2、什么时候使用异步编程"></a>10.2、什么时候使用异步编程</h6><p>在前端编程中（甚至后端有时也是这样），我们在处理一些简短、快速的操作时，例如计算 1 + 1 的结果，往往在主线程中就可以完成。主线程作为一个线程，不能够同时接受多方面的请求。所以，当一个事件没有结束时，界面将无法处理其他请求。</p>
<p>现在有一个按钮，如果我们设置它的 onclick 事件为一个死循环，那么当这个按钮按下，整个网页将失去响应。</p>
<p>为了避免这种情况的发生，我们常常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，<strong>比如读取一个大文件或者发出一个网络请求</strong>。因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。</p>
<p>为了解决这个问题，<strong>JavaScript 中的异步操作函数往往通过回调函数来实现异步任务的结果处理</strong>。</p>
<p><strong>回调函数</strong></p>
<p>回调函数就是一个函数，<strong>它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</strong></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=<span class="string">"RUNOOB!"</span>;</span><br><span class="line">}, <span class="number">3000</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>这段程序中的 setTimeout 就是一个消耗时间较长（3 秒）的过程，它的第一个参数是个回调函数，第二个参数是毫秒数，这个函数执行之后会产生一个子线程，子线程会等待 3 秒，然后执行回调函数 “print”，在命令行输出 “RUNOOB!”。</p>
<h6 id="10-3、利用-JQuery-实现-Ajax"><a href="#10-3、利用-JQuery-实现-Ajax" class="headerlink" title="10.3、利用 JQuery 实现 Ajax"></a>10.3、利用 JQuery 实现 Ajax</h6><p><strong>初体验</strong></p>
<p>jsp 页面，<code>js 写在 html 前，要加$(function())</code></p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;script src=<span class="string">"${pageContext.request.contextPath}/static/js/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 需要等页面加载完才能获取到页面元素</span></span><br><span class="line">    $(function (){</span><br><span class="line">        $(<span class="string">"#btn"</span>).click(function (){</span><br><span class="line">            $.post(<span class="string">"/ajax1"</span>, function (data){</span><br><span class="line">                let html = <span class="string">"&lt;table&gt;&lt;thead&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/thead&gt;&lt;tbody&gt;"</span>;</span><br><span class="line">                <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;data.length;i++) {</span><br><span class="line">                    html += <span class="string">"&lt;tr&gt;"</span> +</span><br><span class="line">                        <span class="string">"&lt;td&gt;"</span> + data[i].name + <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">                        <span class="string">"&lt;td&gt;"</span> + data[i].age + <span class="string">"&lt;/td&gt;"</span> +</span><br><span class="line">                        <span class="string">"&lt;/tr&gt;"</span></span><br><span class="line">                }</span><br><span class="line">                html += <span class="string">"&lt;/tbody&gt;&lt;/table&gt;"</span></span><br><span class="line">                console.log(html)</span><br><span class="line">                $(<span class="string">"#content"</span>).html(html)</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"btn"</span>&gt;查询&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>controller.java</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/ajax1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"余千禧"</span>, <span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"紫梦沁香"</span>, <span class="number">2</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"自杀之王"</span>, <span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>No converter found for return value of type: class java.util.ArrayList 是因为无法将返回的对象转换为 Json 输出到网页上，只需导入 Jackson 或 FastJson 的 jar 包就行</p>
          </div>
<p><strong>验证用户名密码</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/ajax2")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(String name, String pwd)</span></span>{</span><br><span class="line">    String msg=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(name!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"yqx"</span>)){</span><br><span class="line">            msg=<span class="string">"ok"</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            msg=<span class="string">"用户名输入错误"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(pwd!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="keyword">if</span> (pwd.equals(<span class="string">"123"</span>)){</span><br><span class="line">            msg=<span class="string">"ok"</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            msg=<span class="string">"密码输入错误"</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>返回时出现字符串乱码请查看<a href="#8.2、Jackson">8.2</a></p>
<p>jsp 页面</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;script src=<span class="string">"${pageContext.request.contextPath}/static/js/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">name_blur</span><span class="params">()</span></span>{</span><br><span class="line">        $.post(<span class="string">"/ajax2"</span>, {<span class="string">"name"</span>: $(<span class="string">"#name"</span>).val()}, function (data){</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="string">"ok"</span>){</span><br><span class="line">                $(<span class="string">"#span1"</span>).text(data).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                $(<span class="string">"#span1"</span>).text(data).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">pwd_blur</span><span class="params">()</span></span>{</span><br><span class="line">        $.post(<span class="string">"/ajax2"</span>, {<span class="string">"pwd"</span>: $(<span class="string">"#pwd"</span>).val()}, function (data){</span><br><span class="line">            <span class="keyword">if</span>(data == <span class="string">"ok"</span>){</span><br><span class="line">                $(<span class="string">"#span2"</span>).text(data).css(<span class="string">"color"</span>, <span class="string">"green"</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                $(<span class="string">"#span2"</span>).text(data).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        用户名:&lt;input id=<span class="string">"name"</span> type=<span class="string">"text"</span> onblur=<span class="string">"name_blur()"</span>&gt;</span><br><span class="line">        &lt;span id=<span class="string">"span1"</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        密码:&lt;input id=<span class="string">"pwd"</span> type=<span class="string">"password"</span> onblur=<span class="string">"pwd_blur()"</span>&gt;</span><br><span class="line">        &lt;span id=<span class="string">"span2"</span>&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>script 标签没有自闭合！！！必须写全！！！</p>
          </div>
<h4 id="11、拦截器"><a href="#11、拦截器" class="headerlink" title="11、拦截器"></a>11、拦截器</h4><p>在系统中，经常需要在处理用户请求之前和之后执行一些行为，例如<strong>检测用户的权限，或者将请求的信息记录到日志中</strong>，即平时所说的“<code>权限检测</code>”及“<code>日志记录</code>”。当然不仅仅这些，所以需要一种机制，<strong>拦截用户的请求，在请求的前后添加处理逻辑</strong>。</p>
<p>Spring MVC 提供了 Interceptor 拦截器机制，用于请求的预处理和后处理。</p>
<p>MyInterceptor.java，需实现 <code>HandlerInterceptor</code> 接口。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion方法在控制器的处理请求方法执行完成后执行，即视图渲染结束之后执行"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="params"><span class="function">            ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"postHandle方法在控制器的处理请求方法调用之后，解析视图之前执行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"preHandle方法在控制器的处理请求方法调用之前执行"</span>);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">"name"</span>) == <span class="keyword">null</span>){</span><br><span class="line">            response.sendRedirect(<span class="string">"/toLogin"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>preHandle( )：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示<code>继续</code>向下执行，返回 false 表示<code>中断</code>后续操作。</li>
<li>postHandle( )：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li>
<li>afterCompletion( )：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</li>
</ul>
<p>写完拦截器需在Spring MVC 的配置文件中进行配置。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此处我们只需要判断进入首页时有没有登录,因此只需拦截/toMain请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/toMain"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.yqx.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2021/11/21/Linux/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>
<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<p><strong>Linux 的发行版</strong></p>
<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IjJRPA.png" alt=""></p>
<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IjJ5Kf.png" alt=""></p>
<span id="more"></span>
<h1 id="二、Linux-系统启动过程"><a href="#二、Linux-系统启动过程" class="headerlink" title="二、Linux 系统启动过程"></a>二、Linux 系统启动过程</h1><p>linux启动时我们会看到许多启动信息。</p>
<p>Linux系统的启动过程并不是大家想象中的那么复杂，其过程可以分为5个阶段：</p>
<ul>
<li>内核的引导</li>
<li>运行 init</li>
<li>系统初始化</li>
<li>建立终端</li>
<li>用户登录系统</li>
</ul>
<p><strong><font size="5px">内核引导</font></strong></p>
<p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p>
<p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p>
<p><strong><font size="5px">运行 init</font></strong></p>
<p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</p>
<p>init 程序首先是需要读取配置文件  /usr/lib/systemd/system、 /etc/systemd/system。</p>
<p><strong><font size="5px">运行级别</font></strong></p>
<p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p>
<p>init进程的一大任务，就是去运行这些开机启动的程序。</p>
<p>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p>
<p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p>
<p>Linux系统有7个运行级别(runlevel)：</p>
<ul>
<li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li>
<li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li>
<li>运行级别2：多用户状态(没有NFS)</li>
<li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li>
<li>运行级别4：系统未使用，保留</li>
<li>运行级别5：X11控制台，登陆后进入图形GUI模式</li>
<li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>
</ul>
<p><strong><font size="5px">系统初始化</font></strong></p>
<p>在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit　它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p>
<p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p>
<p><strong><font size="5px">建立终端</font></strong></p>
<p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p>
<p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line">2:2345:respawn:/sbin/mingetty tty2</span><br><span class="line">3:2345:respawn:/sbin/mingetty tty3</span><br><span class="line">4:2345:respawn:/sbin/mingetty tty4</span><br><span class="line">5:2345:respawn:/sbin/mingetty tty5</span><br><span class="line">6:2345:respawn:/sbin/mingetty tty6</span><br></pre></td></tr></tbody></table></figure>
<p><strong><font size="5px">用户登录系统</font></strong></p>
<p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>（1）命令行登录</li>
<li>（2）ssh登录</li>
<li>（3）图形界面登录</li>
</ul>
<p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p>
<p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p>
<p>Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。</p>
<p>然后 login 会对用户名进行分析：如果用户名不是 root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p>
<p>这通常用来系统维护时防止非 root 用户登录。只有/etc/securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p>
<p>/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p>
<p><strong><font size="5px">图形模式与文字模式的切换方式</font></strong></p>
<p>Linux预设提供了六个命令窗口终端机让我们来登录。</p>
<p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p>
<p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p>
<p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p>
<p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IvVYmq.png" alt=""></p>
<p><strong><font size="5px">关机命令</font></strong></p>
<p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>
<p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p>
<p>关机指令为：shutdown ，你可以man shutdown 来看一下帮助文档。</p>
<p>例如你可以运行如下命令关机：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sync <span class="comment"># 将数据由内存同步到硬盘中。</span></span><br><span class="line"></span><br><span class="line">shutdown <span class="comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span><br><span class="line"></span><br><span class="line">shutdown –h 10 <span class="comment"># ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span></span><br><span class="line"></span><br><span class="line">shutdown –h now <span class="comment"># 立马关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 <span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line"></span><br><span class="line">shutdown –h +10 <span class="comment"># 十分钟后关机</span></span><br><span class="line"></span><br><span class="line">shutdown –r now <span class="comment"># 系统立马重启</span></span><br><span class="line"></span><br><span class="line">shutdown –r +10 <span class="comment"># 系统十分钟后重启</span></span><br><span class="line"></span><br><span class="line">reboot <span class="comment"># 就是重启，等同于 shutdown –r now</span></span><br><span class="line"></span><br><span class="line">halt <span class="comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span></span><br></pre></td></tr></tbody></table></figure>
<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p>
<p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> , 重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p>
<h1 id="三、Linux-系统目录结构"><a href="#三、Linux-系统目录结构" class="headerlink" title="三、Linux 系统目录结构"></a>三、Linux 系统目录结构</h1><p>登录到系统后，在当前命令窗口下输入命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></tbody></table></figure>
<p>你会看到如下图所示:</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IvepGD.png" alt=""></p>
<p>树状目录结构：</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IveiMd.png" alt=""></p>
<p>以下是对这些目录的解释：</p>
<ul>
<li><p><strong>系统启动必须：</strong></p>
<ul>
<li><p><strong>/boot：</strong>存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。</p>
</li>
<li><p><strong>/etc：</strong>存放<strong>所有</strong>的系统需要的<strong>配置文件</strong>和<strong>子目录列表，</strong>更改目录下的文件可能会导致系统不能启动。</p>
</li>
<li><p><strong>/lib</strong>：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/sys</strong>： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>指令集合：</strong></p>
<ul>
<li><strong>/bin</strong>：存放着最常用的程序和指令</li>
<li><strong>/sbin</strong>：<strong>只有系统管理员能使用的程序和指令</strong>。</li>
</ul>
</li>
<li><p><strong>外部文件管理：</strong></p>
<ul>
<li><strong>/dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</li>
<li><strong>/media</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</li>
<li><strong>/mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li>
</ul>
</li>
<li><p><strong>临时文件：</strong></p>
<ul>
<li><p><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
<li><p><strong>/lost+found</strong>：一般情况下为空的，系统非法关机后，这里就存放一些文件。</p>
</li>
<li><p><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</p>
</li>
</ul>
</li>
<li><p><strong>账户：</strong></p>
<ul>
<li><strong>/root</strong>：系统管理员的用户主目录。</li>
<li><strong>/home</strong>：用户的主目录，以用户的账号命名的。</li>
<li><strong>/usr</strong>：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li>
<li><strong>/usr/bin：</strong>系统用户使用的应用程序与指令。</li>
<li><strong>/usr/sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序。</li>
<li><strong>/usr/src：</strong>内核源代码默认的放置目录。</li>
</ul>
</li>
<li><p><strong>运行过程中要用：</strong></p>
<ul>
<li><strong>/var</strong>：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。</li>
<li><strong>/proc</strong>：管理<strong>内存空间！</strong>虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。</li>
</ul>
</li>
<li><p><strong>扩展用的：</strong></p>
<ul>
<li><strong>/opt</strong>：默认是空的，我们安装额外软件可以放在这个里面。</li>
<li><strong>/srv</strong>：存放服务启动后需要提取的数据<strong>（不用服务器就是空）</strong></li>
</ul>
</li>
</ul>
<p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p>
<p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p>
<p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。</p>
<p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p>
<p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p>
<h1 id="四、常用的基本命令【重点】"><a href="#四、常用的基本命令【重点】" class="headerlink" title="四、常用的基本命令【重点】"></a>四、常用的基本命令【重点】</h1><h2 id="1、文件与目录管理"><a href="#1、文件与目录管理" class="headerlink" title="1、文件与目录管理"></a>1、文件与目录管理</h2><div class="note success">
            <p>绝对路径和相对路径 </p>
          </div>
<p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 /。</p>
<p>其他目录通过挂在可以将他们添加到树中，通过接触挂载可以移除他们。</p>
<p><strong>绝对路径：</strong></p>
<p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p>
<p><strong>相对路径：</strong></p>
<p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p>
<div class="note success">
            <p>处理文件的常用命令 </p>
          </div>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp: 复制文件或目录</li>
<li>rm: 移除文件或目录</li>
<li>mv: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<div class="note success">
            <p>ls（列出目录） </p>
          </div>
<p>在Linux系统当中， ls（英文 list） 命令可能是最常被运行的。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li><strong>-a</strong> ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li><strong>-l</strong> ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<ul>
<li><strong>-F</strong>：为查询出来的每个列举项目末尾都添加一个符号<ul>
<li>/ 表明这是一个目录</li>
<li>@ 表明这是其他文件的符号链接</li>
<li>* 表明是一个可执行文件</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查询该目录下的可执行文件</span></span><br><span class="line">[root@deflory src]<span class="comment"># ls -F | grep "*"</span></span><br><span class="line">mkreleasehdr.sh*</span><br><span class="line">redis-benchmark*</span><br><span class="line">redis-check-aof*</span><br><span class="line">redis-check-rdb*</span><br><span class="line">redis-cli*</span><br><span class="line">redis-sentinel*</span><br><span class="line">redis-server*</span><br><span class="line">redis-trib.rb*</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>cd（切换目录） </p>
          </div>
<p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [相对路径或绝对路径]</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>pwd ( 显示目前所在的目录 ) </p>
          </div>
<p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> [-P]</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li><strong>-P</strong> ：显示出确实的路径，而非使用连接(link) 路径。</li>
</ul>
<div class="note success">
            <p>mkdir （创建新目录） </p>
          </div>
<p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li><strong>-m</strong> ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li><strong>-p</strong> ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<div class="note success">
            <p>rmdir ( 删除空的目录 ) </p>
          </div>
<p>rmdir 即 remove direction，删除目录。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li><strong>-p</strong>：连同上一级『空的』目录也一起删除</li>
</ul>
<p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p>
<div class="note success">
            <p>cp ( 复制文件或目录 ) </p>
          </div>
<p>cp 即 copy，复制文件。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cp [-adfilprsu] source1 source2 source3 .... directory</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li><strong>-a</strong>：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-p</strong>：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-d</strong>：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-r</strong>：递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-f</strong>：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i</strong>：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l</strong>：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li>
<li><strong>-s</strong>：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u</strong>：若 destination 比 source 旧才升级 destination ！</li>
</ul>
<div class="note success">
            <p>rm ( 移除文件或目录 ) </p>
          </div>
<p>rm 即 remove，移除文件。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<p><code>rm -rf /</code> 删库跑路，从入门到入狱。</p>
<div class="note success">
            <p>mv  ( 移动文件与目录，或修改名称 ) </p>
          </div>
<p>mv 即 move，移动文件（移动到相同目录下即为重命名）。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mv [-fiu] source1 source2 source3 .... directory</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
</ul>
<h2 id="2、文件基本属性"><a href="#2、文件基本属性" class="headerlink" title="2、文件基本属性"></a>2、文件基本属性</h2><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p>
<p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>
<p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>
<ul>
<li>chown (change owner) ： 修改所属用户与组。</li>
<li>chmod (change mode) ： 修改用户的权限。</li>
</ul>
<p>下图中通过 chown 来授权用户，通过 chmod 为用户设置可以开门的权限。</p>
<p><img src="https://z3.ax1x.com/2021/11/21/IvdbtO.png" alt=""></p>
<p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@www /]<span class="comment"># ls -l</span></span><br><span class="line">total 64</span><br><span class="line">dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</span><br><span class="line">dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot</span><br><span class="line">……</span><br></pre></td></tr></tbody></table></figure>
<p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p>
<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为 <strong>d</strong> 则是目录</li>
<li>当为 <strong>-</strong> 则是文件；</li>
<li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li>
<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p>
<p><img src="https://z3.ax1x.com/2021/11/22/IvsbNt.png" alt=""></p>
<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p>
<p><img src="https://z3.ax1x.com/2021/11/22/IvsO9f.png" alt=""></p>
<p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p>
<p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p>
<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中，第 <strong>1、4、7</strong> 位表示读权限，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p>
<p>第 <strong>2、5、8</strong> 位表示写权限，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；第 <strong>3、6、9</strong> 位表示可执行权限，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p>
<h2 id="3、文件属主和属组"><a href="#3、文件属主和属组" class="headerlink" title="3、文件属主和属组"></a>3、文件属主和属组</h2><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>
<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>
<p><strong><font size="5px">更改文件属性</font></strong></p>
<div class="note success">
            <p>chgrp：更改文件属组 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></tbody></table></figure>
<p>参数选项</p>
<ul>
<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>
</ul>
<div class="note success">
            <p>chown：更改文件属主，也可以同时更改文件属组 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</span></span><br><span class="line">[root@www ~] <span class="built_in">cd</span> ~</span><br><span class="line">[root@www ~] chown bin install.log</span><br><span class="line">[root@www ~] ls -l</span><br><span class="line">-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将install.log的拥有者与群组改回为root：</span></span><br><span class="line">[root@www ~] chown root:root install.log</span><br><span class="line">[root@www ~] ls -l</span><br><span class="line">-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>chmod：更改文件9个属性 </p>
          </div>
<p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux 文件的基本权限就有九个，分别是 <strong>owner/group/others(拥有者/组/其他)</strong> 三种身份各有自己的 <strong>read/write/execute</strong> 权限。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li>
<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>
</ul>
<div class="note success">
            <p>符号类型改变文件权限 </p>
          </div>
<p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>
<ul>
<li>user：用户</li>
<li>group：组</li>
<li>others：其他</li>
</ul>
<p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限。此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件权限设置为 **-rwxr-xr--**</span></span><br><span class="line">touch test1    // 创建 test1 文件</span><br><span class="line">ls -al test1    // 查看 test1 默认权限</span><br><span class="line">-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</span><br><span class="line">chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限</span><br><span class="line">ls -al test1</span><br><span class="line">-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将可执行权限去掉而不改变其他已存在的权限</span></span><br><span class="line">chmod  a-x test1</span><br><span class="line">ls -al test1</span><br><span class="line">-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="4、文件内容查看"><a href="#4、文件内容查看" class="headerlink" title="4、文件内容查看"></a>4、文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<div class="note success">
            <p>cat 由第一行开始显示文件内容 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">cat [-AbEnTv] 文件名</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检看 /etc/issue 这个文件的内容：</span></span><br><span class="line">cat /etc/issue</span><br><span class="line">CentOS release 6.4 (Final)</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>tac，与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ </p>
          </div>
<p>语法同 <code>cat</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检看 /etc/issue 这个文件的内容：</span></span><br><span class="line">tac /etc/issue</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">CentOS release 6.4 (Final)</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>nl 显示行号 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：<ul>
<li>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；</li>
<li>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
</ul>
</li>
<li>-n ：列出行号表示的方法，主要有三种：<ul>
<li>-n ln ：行号在荧幕的最左方显示；</li>
<li>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；</li>
<li>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用 nl 列出 /etc/issue 的内容</span></span><br><span class="line">nl /etc/issue</span><br><span class="line">1  CentOS release 6.4 (Final)</span><br><span class="line">2  Kernel \r on an \m</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>more 一页一页翻动 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 翻看/etc/man_db.config文件</span></span><br><span class="line">more /etc/man_db.config </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%)  &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></tbody></table></figure>
<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<div class="note success">
            <p>less 一页一页翻动，比 more 功能更强大 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">less 文件名</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">less /etc/man.config</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">:   &lt;== 这里可以等待你输入命令！</span><br></pre></td></tr></tbody></table></figure>
<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>/字串   ：向下搜寻『字串』的功能；</li>
<li>?字串   ：向上搜寻『字串』的功能；</li>
<li>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li>
<li>q     ：离开 less 这个程序；</li>
</ul>
<div class="note success">
            <p>head 取出文件前面几行 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">head [-n number] 文件 </span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</span></span><br><span class="line">head -n 20 /etc/man.config</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>tail 取出文件后面几行 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tail [-n number] 文件 </span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
<li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</span></span><br><span class="line">tail -n 20 /etc/man.config</span><br></pre></td></tr></tbody></table></figure>
<h2 id="5、软链接和硬链接"><a href="#5、软链接和硬链接" class="headerlink" title="5、软链接和硬链接"></a>5、软链接和硬链接</h2><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link），也被称作软连接。<strong>默认情况下， <code>ln</code> 命令产生的是硬链接，使用 -s 创建软链接。</strong></p>
<h4 id="5-1、硬链接"><a href="#5-1、硬链接" class="headerlink" title="5.1、硬链接"></a><strong><font size="5px">5.1、硬链接</font></strong></h4><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。<strong>删除其中任何一个都不会影响另外一个的访问。</strong></p>
<p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。<strong>只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。</strong>也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<h4 id="5-2、软链接"><a href="#5-2、软链接" class="headerlink" title="5.2、软链接"></a><strong><font size="5px">5.2、软链接</font></strong></h4><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。<strong>但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）</strong>。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
<h4 id="5-3、硬链接、软链接以及复制的区别"><a href="#5-3、硬链接、软链接以及复制的区别" class="headerlink" title="5.3、硬链接、软链接以及复制的区别"></a><strong><font size="5px">5.3、硬链接、软链接以及复制的区别</font></strong></h4><p>现有原文件 test1，硬链接 test2，软链接 test3，副本 test4</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">touch test1			<span class="comment"># 创建test1</span></span><br><span class="line">ln test1 test2		<span class="comment"># 创建test1的硬链接test2</span></span><br><span class="line">ln -s test1 test3	<span class="comment"># 创建test1的软链接test3</span></span><br><span class="line">cp test1 test4		<span class="comment"># 创建test1的副本test3</span></span><br><span class="line">ls</span><br><span class="line">test1  test2  test3  test4</span><br></pre></td></tr></tbody></table></figure>
<p>硬链接 test2 就相当于又创建了一个引用，指向文件地址，因此删除其中任何一个都不会影响另一个的访问；</p>
<p>而软链接则类似 Windows 的快捷方式，指向 test1，如果此时 test1 被删除，那么该软连接 test3 便成为了<code>无效的链接</code>。</p>
<p>复制则是在物理磁盘上开辟了一个新的空间，将文件内容写入。</p>
<p>如下图所示</p>
<p><img src="https://z3.ax1x.com/2021/11/22/IxkF29.png" alt=""></p>
<p>下面让我们验证一下</p>
<p>往 test1 中写入内容 <strong>“紫梦沁香：大家好”</strong>，可以发现 test2 和 test3 中也能查看到写入的内容，而 test4 却不行。</p>
<p><img src="https://z3.ax1x.com/2021/11/22/IxiJSA.png" alt=""></p>
<p>而后我们删除 test1 文件，ls 可以发现 test3 变成了红色，即无效链接，但 test2 却能正常查看内容。</p>
<p><img src="https://z3.ax1x.com/2021/11/22/IxFFnP.png" alt=""></p>
<h2 id="6、vi-vim"><a href="#6、vi-vim" class="headerlink" title="6、vi/vim"></a>6、vi/vim</h2><p>所有的类 Unix 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>但是目前我们使用比较多的是 vim 编辑器。</p>
<p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<h4 id="6-1、什么是-vim"><a href="#6-1、什么是-vim" class="headerlink" title="6.1、什么是 vim?"></a><strong><font size="5px">6.1、什么是 vim?</font></strong></h4><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p>
<p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<p>vim 键盘图：</p>
<p><img src="https://z3.ax1x.com/2021/11/22/Ix3Pjf.png" alt=""></p>
<h4 id="6-2、vi-vim-的使用"><a href="#6-2、vi-vim-的使用" class="headerlink" title="6.2、vi/vim 的使用"></a><strong><font size="5px">6.2、vi/vim 的使用</font></strong></h4><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p>
<font size="4px">**命令模式：**</font>

<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<font size="4px">**输入模式：**</font>

<p>在命令模式下按下i就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及 Shift 组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<font size="4px">**底线命令模式：**</font>

<p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul>
<li>q 退出程序</li>
<li>w 保存文件</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<p><img src="https://z3.ax1x.com/2021/11/22/Ix3DbD.png" alt=""></p>
<h4 id="6-3、vi-vim-按键说明"><a href="#6-3、vi-vim-按键说明" class="headerlink" title="6.3、vi/vim 按键说明"></a><strong><font size="5px">6.3、vi/vim 按键说明</font></strong></h4><font size="4px">**命令模式：**</font>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td style="text-align:left">n<space></space></td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td>
</tr>
<tr>
<td style="text-align:left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td style="text-align:left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td style="text-align:left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td style="text-align:left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td style="text-align:left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>
</tr>
<tr>
<td style="text-align:left">n<enter></enter></td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td>
</tr>
<tr>
<td style="text-align:left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
<tr>
<td style="text-align:left">:n1,n2s/word1/word2/g</td>
<td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td>
</tr>
<tr>
<td style="text-align:left"><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td>
</tr>
<tr>
<td style="text-align:left"><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">删除、复制与贴上</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td style="text-align:left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td style="text-align:left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td style="text-align:left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td style="text-align:left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td style="text-align:left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td style="text-align:left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td style="text-align:left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td style="text-align:left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td style="text-align:left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td style="text-align:left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td style="text-align:left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td>
</tr>
<tr>
<td style="text-align:left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td style="text-align:left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td style="text-align:left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td style="text-align:left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>
</tr>
</tbody>
</table>
</div>
<font size="4px">**输入模式：**</font>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">i, I</td>
<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>
</tr>
<tr>
<td style="text-align:left">a, A</td>
<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td style="text-align:left">o, O</td>
<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>
</tr>
<tr>
<td style="text-align:left">r, R</td>
<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td style="text-align:left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody>
</table>
</div>
<font size="4px">**底线命令模式：**</font>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td style="text-align:left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td style="text-align:left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td style="text-align:left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td style="text-align:left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td style="text-align:left">ZZ</td>
<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>
</tr>
<tr>
<td style="text-align:left">ZQ</td>
<td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td>
</tr>
<tr>
<td style="text-align:left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td style="text-align:left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td style="text-align:left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td style="text-align:left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">vim 环境的变更</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td style="text-align:left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody>
</table>
</div>
<p><strong>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</strong></p>
<p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>
<h2 id="7、用户和用户组管理"><a href="#7、用户和用户组管理" class="headerlink" title="7、用户和用户组管理"></a>7、用户和用户组管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<h4 id="7-1、用户账号管理"><a href="#7-1、用户账号管理" class="headerlink" title="7.1、用户账号管理"></a><font size="5px"><strong>7.1、用户账号管理</strong></font></h4><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p>
<div class="note success">
            <p>useradd 添加用户 </p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></tbody></table></figure>
<p>参数说明：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>指定新账号的登录名。</p>
</li>
</ul>
<p>增加用户账号就是在 <code>/etc/passwd</code> 文件中为新用户增加一条记录，同时更新其他系统文件如<strong>/etc/shadow, /etc/group</strong>等。</p>
<p>Linux提供了集成的系统管理工具 userconf，它可以用来对用户账号进行统一管理。</p>
<div class="note success">
            <p>userdel 删除账号 </p>
          </div>
<p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将 <code>/etc/passwd</code> 等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></tbody></table></figure>
<p>参数说明：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-r 把用户的主目录以及系统文件中的记录一起删除。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>指定删除账号的用户名。</p>
</li>
</ul>
<div class="note success">
            <p>usermod 修改账号 </p>
          </div>
<p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></tbody></table></figure>
<p>参数说明（同 useradd 一样）：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>指定新账号的登录名。</p>
</li>
</ul>
<div class="note success">
            <p>passwd 口令管理 </p>
          </div>
<p>用户管理的一项重要内容是用户口令的管理。<strong>用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</strong></p>
<p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></tbody></table></figure>
<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<h4 id="7-2、用户组管理"><a href="#7-2、用户组管理" class="headerlink" title="7.2、用户组管理"></a><font size="5px"><strong>7.2、用户组管理</strong></font></h4><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p>
<div class="note success">
            <p>groupadd 添加用户组 </p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></tbody></table></figure>
<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<div class="note success">
            <p>groupdel 删除用户组 </p>
          </div>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>groupmod 修改用户组 </p>
          </div>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></tbody></table></figure>
<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<div class="note success">
            <p>newgrp 切换用户组 </p>
          </div>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>格式：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">newgrp 用户组</span><br></pre></td></tr></tbody></table></figure>
<p>这条命令将当前用户切换到其它用户组，前提条件是这个用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
<h4 id="7-3、与用户有关的系统文件"><a href="#7-3、与用户有关的系统文件" class="headerlink" title="7.3、与用户有关的系统文件"></a><font size="5px"><strong>7.3、与用户有关的系统文件</strong></font></h4><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括 <strong>/etc/passwd, /etc/shadow, /etc/group</strong> 等。</p>
<p><strong><font size="4px">/etc/passwd</font></strong></p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<p><img src="https://z3.ax1x.com/2021/11/23/oS0fER.png" alt=""></p>
<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></tbody></table></figure>
<ol>
<li><p><strong>用户名</strong>，代表用户账号的字符串</p>
<p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>
<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
</li>
<li><p><strong>口令</strong>，存放加密后的用户口令字</p>
<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，<strong>把真正的加密后的用户口令字存放到/etc/shadow文件中</strong>，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
</li>
<li><p><strong>用户标识号</strong>，是一个整数，系统内部用它来表示用户</p>
<p>一般情况下它与用户名是一一对应的。<strong>如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</strong></p>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
</li>
<li><p><strong>组标识号</strong>，记录用户的所属组</p>
<p>它对应着/etc/group文件中的一条记录。</p>
</li>
<li><p><strong>注释性描述</strong>，记录着用户的个人情况</p>
<p>例如用户的真实姓名、电话、地址等，<strong>这个字段并没有什么实际的用途</strong>。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做 finger 命令的输出。</p>
</li>
<li><p><strong>主目录</strong>，也就是用户的起始工作目录</p>
<p>它是<strong>用户在登录到系统之后所处的目录</strong>。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
</li>
<li><p><strong>登录Shell</strong>，Shell是用户与Linux系统之间的接口</p>
<p><strong>用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</strong></p>
<p>Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>
<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。<strong>如果不指定Shell，那么系统使用 sh 为默认的登录 Shell</strong>，即这个字段的值为/bin/sh。</p>
<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>
<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
</li>
<li><p><strong>伪用户</strong>，方便系统管理</p>
<p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>
<p>常见的伪用户如下所示：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 伪 用 户 含 义 </span></span><br><span class="line">bin <span class="comment"># 拥有可执行的用户命令文件 </span></span><br><span class="line">sys <span class="comment"># 拥有系统文件 </span></span><br><span class="line">adm <span class="comment"># 拥有帐户文件 </span></span><br><span class="line">uucp <span class="comment"># UUCP使用 </span></span><br><span class="line">lp <span class="comment"># lp或lpd子系统使用 </span></span><br><span class="line">nobody <span class="comment"># NFS使用</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<div class="note success">
            <p><strong>除了上述列出的伪用户外，还有许多标准的伪用户，例如：audit，cron，mail，usenet等，它们也都各自为相关的进程和文件所需要。</strong></p>
          </div>
<p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，<strong>因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。 有超级用户才拥有该文件读权限</strong>，这就保证了用户密码的安全性。</p>
<div class="note success">
            <p><strong>/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生。</strong></p>
          </div>
<p>它的文件格式与 /etc/passwd 类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>“登录名”</strong>，是与/etc/passwd文件中的登录名相一致的用户账号</li>
<li><strong>“加密口令</strong>“，存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li>
<li><strong>“最后一次修改时间”</strong>，表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li>
<li><strong>“最小时间间隔”</strong>，指的是两次修改口令之间所需的最小天数。</li>
<li><strong>“最大时间间隔”</strong>，指的是口令保持有效的最大天数。</li>
<li><strong>“警告时间”</strong>，表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>
<li><strong>“不活动时间”</strong>，表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>
<li><strong>“失效时间”</strong>，给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>
</ol>
<p>/etc/shadow 文件内容如下。</p>
<p><img src="https://z3.ax1x.com/2021/11/23/opIlDA.png" alt=""></p>
<div class="note success">
            <p><strong>用户组的所有信息都存放在 /etc/group 文件中</strong></p>
          </div>
<p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>
<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>
<p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>
<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>
<p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>“组名”</strong>，是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li>
<li><strong>“口令”，</strong>存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>
<li><strong>“组标识号”，</strong>与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>
<li><strong>“组内用户列表”</strong>，是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>
</ol>
<p><img src="https://z3.ax1x.com/2021/11/23/op7lDJ.png" alt=""></p>
<h4 id="7-4、添加批量用户"><a href="#7-4、添加批量用户" class="headerlink" title="7.4、添加批量用户"></a>7.4、添加批量用户</h4><p>添加和删除用户对每位Linux系统管理员都是轻而易举的事，比较棘手的是如果要添加几十个、上百个甚至上千个用户时，我们不太可能还使用useradd一个一个地添加，必然要找一种简便的创建大量用户的方法。Linux系统提供了创建大量用户的工具，可以让您立即创建大量用户，方法如下：</p>
<font size="4px">**先编辑一个文本用户文件**</font>

<p>每一列按照<code>/etc/passwd</code>密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入x号。一个范例文件user.txt内容如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">user001::600:100:user:/home/user001:/bin/bash</span><br><span class="line">user002::601:100:user:/home/user002:/bin/bash</span><br><span class="line">user003::602:100:user:/home/user003:/bin/bash</span><br><span class="line">user004::603:100:user:/home/user004:/bin/bash</span><br><span class="line">user005::604:100:user:/home/user005:/bin/bash</span><br><span class="line">user006::605:100:user:/home/user006:/bin/bash</span><br></pre></td></tr></tbody></table></figure>
<font size="4px">**以 root 的身份执行命令 /usr/sbin/newusers，从刚创建的用户文件 user.txt 中导入数据，创建用户：**</font>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">newusers &lt; user.txt</span><br></pre></td></tr></tbody></table></figure>
<p>然后可以执行命令 <code>vipw</code> 或 <code>vi /etc/passwd</code> 检查 <code>/etc/passwd</code> 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。</p>
<font size="4px">**执行命令 /usr/sbin/pwunconv**</font>

<p>将 <code>/etc/shadow</code> 产生的 <code>shadow</code> 密码解码，然后回写到 <code>/etc/passwd</code> 中，并将<code>/etc/shadow</code>的<code>shadow</code>密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 <code>shadow password</code> 功能。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pwunconv</span><br></pre></td></tr></tbody></table></figure>
<font size="4px">**编辑每个用户的密码对照文件**</font>

<p>格式为：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">用户名:密码</span><br></pre></td></tr></tbody></table></figure>
<p>实例文件 <code>passwd.txt</code> 内容如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">user001:123456</span><br><span class="line">user002:123456</span><br><span class="line">user003:123456</span><br><span class="line">user004:123456</span><br><span class="line">user005:123456</span><br><span class="line">user006:123456</span><br></pre></td></tr></tbody></table></figure>
<font size="4px">**以 root 身份执行命令 /usr/sbin/chpasswd**</font>

<p>创建用户密码，<code>chpasswd</code> 会将经过 <code>/usr/bin/passwd</code> 命令编码过的密码写入 <code>/etc/passwd</code> 的密码栏。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">chpasswd &lt; passwd.txt</span><br></pre></td></tr></tbody></table></figure>
<font size="4px">**确定密码经编码写入/etc/passwd的密码栏后**</font>

<p>执行命令 <code>/usr/sbin/pwconv</code> 将密码编码为 <code>shadow password</code>，并将结果写入 <code>/etc/shadow</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pwconv</span><br></pre></td></tr></tbody></table></figure>
<p>这样就完成了大量用户的创建了，之后您可以到/home下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。</p>
<h2 id="8、磁盘管理"><a href="#8、磁盘管理" class="headerlink" title="8、磁盘管理"></a>8、磁盘管理</h2><h4 id="8-1、df-和-du"><a href="#8-1、df-和-du" class="headerlink" title="8.1、df 和 du"></a>8.1、df 和 du</h4><p>Linux 磁盘管理好坏直接关系到整个系统的性能问题。</p>
<p>Linux 磁盘管理常用三个命令为 <strong>df</strong> 和 <strong>du</strong>。</p>
<ul>
<li><strong>df</strong>（英文全称：disk full）：列出文件系统的整体磁盘使用量</li>
<li><strong>du</strong>（英文全称：disk used）：检查磁盘空间使用量</li>
</ul>
<p><strong></strong></p><div class="note success"><strong>
            <p>df</p>
          </strong></div><p></p>
<p>df 命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory /]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs          930364       0    930364   0% /dev</span><br><span class="line">tmpfs             940912       0    940912   0% /dev/shm</span><br><span class="line">tmpfs             940912     452    940460   1% /run</span><br><span class="line">tmpfs             940912       0    940912   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       51474024 2238768  46912128   5% /</span><br><span class="line">tmpfs             188184       0    188184   0% /run/user/0</span><br><span class="line"></span><br><span class="line">[root@deflory /]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        909M     0  909M   0% /dev</span><br><span class="line">tmpfs           919M     0  919M   0% /dev/shm</span><br><span class="line">tmpfs           919M  452K  919M   1% /run</span><br><span class="line">tmpfs           919M     0  919M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        50G  2.2G   45G   5% /</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br></pre></td></tr></tbody></table></figure>
<p>在 Linux 底下如果 df 没有加任何选项，那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</p>
<p><strong></strong></p><div class="note success"><strong>
            <p>du</p>
          </strong></div><p></p>
<p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍 Linux du 命令。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G/M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 不要再根目录下使用这个命令，它会递归将所有文件的所占磁盘空间都显示出来，会很多！</span></span><br><span class="line">[root@deflory ~]<span class="comment"># du -h</span></span><br><span class="line">8.0K	./.pip</span><br><span class="line">4.0K	./.ssh</span><br><span class="line">8.0K	./.cache/pip/http/f/e/d/0/e</span><br><span class="line">12K	./.cache/pip/http/f/e/d/0</span><br><span class="line">16K	./.cache/pip/http/f/e/d</span><br><span class="line">20K	./.cache/pip/http/f/e</span><br><span class="line">24K	./.cache/pip/http/f</span><br><span class="line">36K	./.cache/pip/http/b/b/8/7/6</span><br><span class="line">40K	./.cache/pip/http/b/b/8/7</span><br><span class="line">44K	./.cache/pip/http/b/b/8</span><br><span class="line">48K	./.cache/pip/http/b/b</span><br><span class="line">52K	./.cache/pip/http/b</span><br><span class="line">80K	./.cache/pip/http</span><br><span class="line">88K	./.cache/pip</span><br><span class="line">92K	./.cache</span><br><span class="line">136K	.</span><br><span class="line"></span><br><span class="line">[root@deflory ~]<span class="comment"># du -sm /*</span></span><br><span class="line">0	/bin</span><br><span class="line">148	/boot</span><br><span class="line">0	/dev</span><br><span class="line">35	/etc</span><br><span class="line">1	/home</span><br><span class="line">0	/lib</span><br><span class="line">0	/lib64</span><br><span class="line">1	/lost+found</span><br><span class="line">1	/media</span><br><span class="line">1	/mnt</span><br><span class="line">1	/opt</span><br><span class="line">du: cannot access ‘/proc/2407/task/2407/fd/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/2407/task/2407/fdinfo/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/2407/fd/4’: No such file or directory</span><br><span class="line">du: cannot access ‘/proc/2407/fdinfo/4’: No such file or directory</span><br><span class="line">0	/proc</span><br><span class="line">1	/root</span><br><span class="line">1	/run</span><br><span class="line">0	/sbin</span><br><span class="line">1	/srv</span><br><span class="line">0	/sys</span><br><span class="line">1	/tmp</span><br><span class="line">1754	/usr	<span class="comment"># 前期/usr最大</span></span><br><span class="line">200	/var</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-2、磁盘挂载和卸除"><a href="#8-2、磁盘挂载和卸除" class="headerlink" title="8.2、磁盘挂载和卸除"></a>8.2、磁盘挂载和卸除</h4><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></tbody></table></figure>
<p>用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">[root@www ~]<span class="comment"># df</span></span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></tbody></table></figure>
<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></tbody></table></figure>
<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 /etc/mtab 情况下卸除。</li>
</ul>
<p>卸载/dev/hdc6</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># umount /dev/hdc6   </span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="9、进程管理"><a href="#9、进程管理" class="headerlink" title="9、进程管理"></a>9、进程管理</h2><p>对于我们开发人员来说，其实 Linux 更多偏向于使用即可！</p>
<h4 id="9-1、进程的基本概念"><a href="#9-1、进程的基本概念" class="headerlink" title="9.1、进程的基本概念"></a>9.1、进程的基本概念</h4><ol>
<li>在 Linux 中，每一个程序都是有自己的一个进程，每一个进程都有一个 id 号！</li>
<li>每一个进程都会有一个父进程。</li>
<li>进程有两种运行方式：前台和后台。</li>
<li>一般服务都是在后台运行，程序都是在前台运行。</li>
</ol>
<h4 id="9-2、有关进程命令"><a href="#9-2、有关进程命令" class="headerlink" title="9.2、有关进程命令"></a>9.2、有关进程命令</h4><div class="note success">
            <p>ps 查看当前系统中正在执行的各种进程信息</p>
          </div>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ps [-aux]</span><br></pre></td></tr></tbody></table></figure>
<p>参数说明：</p>
<ul>
<li>-a 显示当前终端运行的所有进程信息</li>
<li>-u 以用户的信息显示进程</li>
<li>-x 显示后台运行进程的参数</li>
</ul>
<p>由于 <code>ps -aux</code> 会查看所有的进程，一般我们会配合 <code>|grep</code> 查询指定的进程。</p>
<p>“|”  是 Linux 管道命令操作符，简称管道符。使用此管道符 “|” 可以将两个命令分隔开，“|” 左边命令的输出就会作为 “|” 右边命令的输入，此命令可连续使用，第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。</p>
<p>因此 <strong>ps -aux |grep mysql</strong> 即意谓寻找有关 mysql 的进程。</p>
<p><img src="https://z3.ax1x.com/2021/11/23/o9J1aV.png" alt=""></p>
<p><strong><font size="4px">ps -ef：可以查看父进程的信息</font></strong></p>
<p><img src="https://z3.ax1x.com/2021/11/23/o9YZo6.png" alt=""></p>
<p><strong><font size="4px">pstree -pu：查看目录树结构（-p 显示父id；-u 显示用户组）</font></strong></p>
<p><img src="https://z3.ax1x.com/2021/11/23/o9Y1OA.png" alt=""></p>
<p><strong></strong></p><div class="note success"><strong>
            <p>kill -9 杀死进程</p>
          </strong></div><p></p>
<p>语法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程id</span><br></pre></td></tr></tbody></table></figure>
<h2 id="10、软件安装的三种方式"><a href="#10、软件安装的三种方式" class="headerlink" title="10、软件安装的三种方式"></a>10、软件安装的三种方式</h2><h4 id="10-1、安装-jdk（rpm）"><a href="#10-1、安装-jdk（rpm）" class="headerlink" title="10.1、安装 jdk（rpm）"></a>10.1、安装 jdk（rpm）</h4><p>rpm下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p>下载完毕可以使用 <strong>Xftp</strong> 远程传输到服务器中。</p>
<p><img src="https://z3.ax1x.com/2021/11/23/oCAnUI.png" alt=""></p>
<p><strong><font size="4px">安装 JDK（rpm）：rpm -ivh jdk-8u311-linux-x64.rpm</font></strong></p>
<p><img src="https://z3.ax1x.com/2021/11/23/oCAdP0.png" alt=""></p>
<p>rpm 安装会把 java/bin 目录下的 java、javac 等命令复制到 <code>/usr/bin</code> 目录下，所以在 /etc/profile 或 /etc/profile.d 中都找不到关于java环境的任何配置，并且仍然可以使用java，也就是说不需要配置环境变量！<br>同理在 Windows 上把你们的 jdk/bin 目录下的文件都复制到 C:\Windows\System32\ 目录下也可以实现像 rpm 的效果。</p>
<p><strong><font size="4px">卸载 JDK（rpm）：rpm -qa|grep jdk</font></strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rpm -qa|grep jdk <span class="comment"># 查询java版本</span></span><br><span class="line">jdk1.8-1.8.0_311-fcs.x86_64</span><br><span class="line">rpm -e --nodeps jdk1.8-1.8.0_311-fcs.x86_64 <span class="comment"># 卸载该java版本</span></span><br><span class="line">java <span class="comment"># 再次运行java命令</span></span><br><span class="line">-bash: /usr/bin/java: No such file or directory</span><br></pre></td></tr></tbody></table></figure>
<p><strong><font size="4px">配置环境变量</font></strong></p>
<p>正如上文所说，因为是 rpm 安装，因此并不需要配置环境变量，但这里还是记录一下，以免后面用到。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装完成后配置环境变量 文件：/etc/profile</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_221-amd64</span><br><span class="line">CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib <span class="comment"># 用：分割!</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin</span><br><span class="line"><span class="built_in">export</span> PATH CLASSPATH JAVA_HOME</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让新增的环境变量生效！</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 java -version</span></span><br><span class="line">[root@kuangshen java]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_221"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="10-2、tomcat-安装（压缩包）"><a href="#10-2、tomcat-安装（压缩包）" class="headerlink" title="10.2、tomcat 安装（压缩包）"></a>10.2、tomcat 安装（压缩包）</h4><p>下载 tomcat 的压缩包 <strong>apache-tomcat-9.0.55.tar.gz</strong>，地址：<a href="https://tomcat.apache.org/download-90.cgi。">https://tomcat.apache.org/download-90.cgi。</a></p>
<p><strong><font size="4px">解压缩至 /usr 下</font></strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.22.tar.gz -C /usr</span><br></pre></td></tr></tbody></table></figure>
<p>参数说明：</p>
<ul>
<li><p>-c 建立新的压缩文件 </p>
</li>
<li><p>-r 添加文件到已经压缩的文件 </p>
</li>
<li>-u 添加改变了和现有的文件到已经存在的压缩文件 </li>
<li>-x 从压缩的文件中提取文件 </li>
<li>-t 显示压缩文件的内容 </li>
<li>-z 支持gzip解压文件 </li>
<li>-j 支持bzip2解压文件 </li>
<li>-v 显示操作过程 </li>
<li>-k 保留源有文件不覆盖 </li>
<li>-C 切换到指定目录 </li>
<li>-f 指定压缩文件</li>
</ul>
<p><strong><font size="4px">运行 Tomcat</font></strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要进入到tomcat的bin目录</span></span><br><span class="line"><span class="comment"># 执行：startup.sh --&gt;启动tomcat</span></span><br><span class="line"><span class="comment"># 执行：shutdown.sh --&gt;关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></tbody></table></figure>
<p><strong><font size="4px">确保 Linux 的防火墙端口是开启的</font></strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports  <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=80/tcp  <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent   <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/11/15/MySQL/</url>
    <content><![CDATA[<h2 id="一、MySQL-入门"><a href="#一、MySQL-入门" class="headerlink" title="一、MySQL 入门"></a>一、MySQL 入门</h2><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS（Relational Database Management System）应用软件之一。</p>
<h4 id="1、什么是数据库？"><a href="#1、什么是数据库？" class="headerlink" title="1、什么是数据库？"></a>1、什么是数据库？</h4><p>数据库（DataBase，简称DB）</p>
<p><strong>概念</strong>：长期存放在计算机内，有组织，可共享的大量数据的集合，是一个数据“仓库”。</p>
<p><strong>作用</strong>：保存，并能安全管理数据（增删改查等），减少冗余…</p>
<p><strong>数据库总览</strong></p>
<ul>
<li>关系型数据库（SQL）<ul>
<li>MySQL，Oracle，SQL Server，SQLite，DB2…</li>
<li>关系型数据库通过外键关联来建立表与表之间的关系。</li>
</ul>
</li>
<li>非关系型数据库（NOSQL，Not Only SQL）<ul>
<li>Redis，MongoDB…</li>
<li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h4 id="2、什么是-DBMS"><a href="#2、什么是-DBMS" class="headerlink" title="2、什么是 DBMS?"></a>2、什么是 DBMS?</h4><p>数据库管理系统（<strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem）</p>
<p>数据库管理软件，科学组织和存储数据，高效地获取和维护数据。</p>
<p><img src="https://z3.ax1x.com/2021/11/15/IRrIw6.png" alt=""></p>
<p>不那么严格的话，MySQL也算是一个数据库管理系统。</p>
<h4 id="3、MySQL简介"><a href="#3、MySQL简介" class="headerlink" title="3、MySQL简介"></a>3、MySQL简介</h4><p><img src="https://z3.ax1x.com/2021/11/15/IRsSTf.png" alt=""></p>
<p><strong>概念</strong>：是现在<strong>流行</strong>的、<strong>开源</strong>的、<strong>免费</strong>的、<strong>关系型</strong>数据库。</p>
<p><strong>历史</strong>：由瑞典MySQL AB公司开发，目前属于 Oracle 旗下产品。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>MySQL 是开源的，目前隶属于 Oracle 旗下产品。</li>
<li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li>
<li>MySQL 使用标准的 SQL 数据语言形式。</li>
<li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li>
<li>MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li>
<li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li>
<li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li>
</ul>
<p><strong>官网 :</strong> <strong><a href="https://www.mysql.com/">https://www.mysql.com/</a></strong></p>
<h4 id="4、安装MySQL"><a href="#4、安装MySQL" class="headerlink" title="4、安装MySQL"></a>4、安装MySQL</h4><p>这里建议使用<code>压缩版</code>，安装快，方便，不复杂。</p>
<p>exe 可执行文件安装 MySQL 谁用谁知道，卸载是真的麻烦，┭┮﹏┭┮。</p>
<p>mysql5.7 64位下载地址:</p>
<p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p>
<p><strong>安装步骤</strong></p>
<p>1、下载后得到zip压缩包.</p>
<p>2、解压到自己想要安装到的目录，此处我解压到的是 D:\Environment\mysql-5.7.19</p>
<p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹</span><br></pre></td></tr></tbody></table></figure>
<p>4、在 bin 文件夹下创建 my.ini 配置文件</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">19</span>\</span><br><span class="line"><span class="attr">datadir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">19</span>\data\</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></tbody></table></figure>
<p>5、启动管理员模式下的 CMD，并将路径切换至 mysql 下的 bin 目录，然后输入 mysqld –install (安装mysql)</p>
<p>6、再输入  mysqld —initialize-insecure —user=mysql 初始化数据文件</p>
<p>7、然后再次启动 mysql（net start mysql） 然后用命令 mysql –u root –p 进入 mysql 管理界面（密码暂时为空）</p>
<p>8、进入界面后更改root密码</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">'root'</span> <span class="keyword">and</span> Host <span class="operator">=</span> <span class="string">'localhost'</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>9、刷新权限</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure>
<p>10、修改 my.ini文件删除最后一句skip-grant-tables</p>
<p>11、重启mysql即可正常使用</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net <span class="keyword">start</span> mysql</span><br></pre></td></tr></tbody></table></figure>
<p>12、连接上测试出现以下结果就安装好了</p>
<p><img src="https://z3.ax1x.com/2021/11/16/IWQrr9.png" alt=""></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> password<span class="operator">=</span>password(<span class="string">'123456'</span>)<span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">'root'</span>; # 修改密码</span><br><span class="line">flush privileges; # 刷新数据库</span><br><span class="line"><span class="keyword">show</span> databases; # 显示所有数据库</span><br><span class="line">use dbname；# 打开某个数据库</span><br><span class="line"><span class="keyword">show</span> tables; # 显示数据库Mysql中所有的表</span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">user</span>; # 显示表Mysql数据库中<span class="keyword">User</span>表的列信息</span><br><span class="line"><span class="keyword">create</span> database name; # 创建数据库</span><br><span class="line">use databasename; # 选择数据库</span><br><span class="line">exit; # 退出 Mysql</span><br><span class="line">? # 命令关键词，寻求帮助</span><br></pre></td></tr></tbody></table></figure>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><h4 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h4><p><strong>数值类型</strong></p>
<p>MySQL 支持所有标准 SQL 数值数据类型。</p>
<p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">范围（有符号）</th>
<th style="text-align:left">范围（无符号）</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">TINYINT</td>
<td style="text-align:left">1 Bytes</td>
<td style="text-align:left">(-128，127)</td>
<td style="text-align:left">(0，255)</td>
<td style="text-align:left">小整数值</td>
</tr>
<tr>
<td style="text-align:left">SMALLINT</td>
<td style="text-align:left">2 Bytes</td>
<td style="text-align:left">(-32 768，32 767)</td>
<td style="text-align:left">(0，65 535)</td>
<td style="text-align:left">大整数值</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMINT</td>
<td style="text-align:left">3 Bytes</td>
<td style="text-align:left">(-8 388 608，8 388 607)</td>
<td style="text-align:left">(0，16 777 215)</td>
<td style="text-align:left">大整数值</td>
</tr>
<tr>
<td style="text-align:left">INT或INTEGER</td>
<td style="text-align:left">4 Bytes</td>
<td style="text-align:left">(-2 147 483 648，2 147 483 647)</td>
<td style="text-align:left">(0，4 294 967 295)</td>
<td style="text-align:left">大整数值</td>
</tr>
<tr>
<td style="text-align:left">BIGINT</td>
<td style="text-align:left">8 Bytes</td>
<td style="text-align:left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td>
<td style="text-align:left">(0，18 446 744 073 709 551 615)</td>
<td style="text-align:left">极大整数值</td>
</tr>
<tr>
<td style="text-align:left">FLOAT</td>
<td style="text-align:left">4 Bytes</td>
<td style="text-align:left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td style="text-align:left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td style="text-align:left">单精度 浮点数值</td>
</tr>
<tr>
<td style="text-align:left">DOUBLE</td>
<td style="text-align:left">8 Bytes</td>
<td style="text-align:left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td style="text-align:left">双精度 浮点数值</td>
</tr>
<tr>
<td style="text-align:left">DECIMAL</td>
<td style="text-align:left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td style="text-align:left">依赖于M和D的值</td>
<td style="text-align:left">依赖于M和D的值</td>
<td style="text-align:left">小数值</td>
</tr>
</tbody>
</table>
</div>
<p><strong>日期类型</strong></p>
<p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">大小 ( bytes)</th>
<th style="text-align:left">范围</th>
<th style="text-align:left">格式</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DATE</td>
<td style="text-align:left">3</td>
<td style="text-align:left">1000-01-01 ~ 9999-12-31</td>
<td style="text-align:left">YYYY-MM-DD</td>
<td style="text-align:left">日期值</td>
</tr>
<tr>
<td style="text-align:left">TIME</td>
<td style="text-align:left">3</td>
<td style="text-align:left">‘-838:59:59’ ~ ‘838:59:59’</td>
<td style="text-align:left">HH:MM:SS</td>
<td style="text-align:left">时间值或持续时间</td>
</tr>
<tr>
<td style="text-align:left">YEAR</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1901 ~ 2155</td>
<td style="text-align:left">YYYY</td>
<td style="text-align:left">年份值</td>
</tr>
<tr>
<td style="text-align:left">DATETIME</td>
<td style="text-align:left">8</td>
<td style="text-align:left">1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td style="text-align:left">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align:left">混合日期和时间值</td>
</tr>
<tr>
<td style="text-align:left">TIMESTAMP</td>
<td style="text-align:left">4</td>
<td style="text-align:left">1970-01-01 00:00:00~2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>
<td style="text-align:left">YYYYMMDD HHMMSS</td>
<td style="text-align:left">混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
</div>
<p><strong>字符串类型</strong></p>
<p>字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">大小（字节）</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CHAR</td>
<td style="text-align:left">0 ~ 255</td>
<td style="text-align:left">定长字符串</td>
</tr>
<tr>
<td style="text-align:left">VARCHAR</td>
<td style="text-align:left">0 ~ 65535</td>
<td style="text-align:left">变长字符串</td>
</tr>
<tr>
<td style="text-align:left">TINYBLOB</td>
<td style="text-align:left">0 ~ 255</td>
<td style="text-align:left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td style="text-align:left">TINYTEXT</td>
<td style="text-align:left">0 ~ 255</td>
<td style="text-align:left">短文本字符串</td>
</tr>
<tr>
<td style="text-align:left">BLOB</td>
<td style="text-align:left">0 ~ 65 535</td>
<td style="text-align:left">二进制形式的长文本数据</td>
</tr>
<tr>
<td style="text-align:left">TEXT</td>
<td style="text-align:left">0 ~ 65 535</td>
<td style="text-align:left">长文本数据</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMBLOB</td>
<td style="text-align:left">0 ~ 16 777 215</td>
<td style="text-align:left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMTEXT</td>
<td style="text-align:left">0 ~ 16 777 215</td>
<td style="text-align:left">中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:left">LONGBLOB</td>
<td style="text-align:left">0 ~ 4 294 967 295</td>
<td style="text-align:left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td style="text-align:left">LONGTEXT</td>
<td style="text-align:left">0 ~ 4 294 967 295</td>
<td style="text-align:left">极大文本数据</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p>
<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。<strong>它们的最大长度和是否尾部空格被保留等方面也不同</strong>。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，<strong>它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值</strong>。</p>
<p>BLOB 是一个<strong>二进制大对象</strong>，<strong>可以容纳可变数量的数据</strong>。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<div class="note success">
            <p>NULL 值</p>
          </div>
<ul>
<li>理解为”没有值”或”未知值”</li>
<li>不要用 NULL 进行算术运算，结果仍为 NULL，没有意义</li>
</ul>
<h4 id="2、数据字段属性"><a href="#2、数据字段属性" class="headerlink" title="2、数据字段属性"></a>2、数据字段属性</h4><p><img src="https://z3.ax1x.com/2021/11/16/IhFag1.png" alt=""></p>
<p><strong>Unsigned</strong></p>
<ul>
<li>无符号的</li>
<li>声明该数据列不允许负数</li>
</ul>
<p><strong>Zerofill</strong></p>
<ul>
<li>不足的位数用0来填充，例如int(3)，5则为005</li>
</ul>
<p><strong>Auto_InCrement</strong></p>
<ul>
<li>自动增长的，每添加一条数据，自动在上一个记录数上加1（默认）</li>
<li>通常用于设置<code>主键</code>，且为整数类型</li>
<li>可定义起始值和步长<ul>
<li>起始值设置：AUTO_INCREMENT = 100，只影响当前表。</li>
<li>步长设置：SET @@auto_increment_increment = 5，影响所有使用自增的表。</li>
</ul>
</li>
</ul>
<p><strong>NULL 和 NOTE NULL</strong></p>
<ul>
<li>默认为 NULL，即没有插入该列的数值。</li>
<li>如果设置为 NOT NULL，则该列必须有值。</li>
</ul>
<p><strong>DEFAULT</strong></p>
<ul>
<li>用于设置默认值</li>
<li>例如，性别字段，默认为”男”，若无指定该列的值，则默认为”男”。</li>
</ul>
<h4 id="3、数据表引擎"><a href="#3、数据表引擎" class="headerlink" title="3、数据表引擎"></a>3、数据表引擎</h4><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p>
<p>常见的 MyISAM 与 InnoDB 类型：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>MyISAM</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td>事务处理</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td>较小</td>
<td>约为 MyISAM 两倍</td>
</tr>
</tbody>
</table>
</div>
<p>适用场合：</p>
<ul>
<li>MyISAM：节约空间，速度较快。</li>
<li>InnoDB：安全性，事务处理及多用户操作数据表。</li>
</ul>
<h4 id="4、数据表的物理存储"><a href="#4、数据表的物理存储" class="headerlink" title="4、数据表的物理存储"></a>4、数据表的物理存储</h4><p>MySQL 数据表以文件方式存储在磁盘中</p>
<ul>
<li>包括表文件，数据文件，以及数据库的选项文件</li>
<li>位置：MySQL\data，目录名对应数据库名，该目录下文件名对应数据表</li>
</ul>
<p><strong>InnoDB</strong></p>
<p><img src="https://z3.ax1x.com/2021/11/16/Ih1RuF.png" alt=""></p>
<ul>
<li>.frm 文件 — 表结构定义文件</li>
<li>.idb 文件  — MySQL数据文件、索引文件</li>
</ul>
<p>InnoDB 类型数据表只有一个 *.frm 文件（不算 .idb 备份文件）, 以及上一级目录的 ibdata1文件。</p>
<p><strong>MyISAM</strong></p>
<p><img src="https://z3.ax1x.com/2021/11/16/Ih3FKS.png" alt=""></p>
<ul>
<li>. frm   — 表结构定义文件</li>
<li>. MYD — 数据文件 ( data )</li>
<li>. MYI   — 索引文件 ( index )</li>
</ul>
<h4 id="5、字符集"><a href="#5、字符集" class="headerlink" title="5、字符集"></a>5、字符集</h4><p>字符集是一套符合和编码，<strong>校验规则（collation）是在字符集内用于比较字符的一套规则</strong>，即字符集的<code>排序</code>规则。MySQL可以使用各种字符集和检验规则来组织字符。</p>
<p>MySQL服务器可以支持多种字符集，在同一台服务器，同一个数据库，<strong>甚至同一个表的不同字段都可以指定使用不同的字符集</strong>，相比oracle等其他数据库管理系统，在同一个数据库只能使用相同的字符集，MySQL明显存在更大的灵活性。</p>
<p>每种字符集都可能有多种校对规则，并且都有一个默认的校对规则，并且每个校对规则只是针对某个字符集，和其他的字符集没有关系。</p>
<div class="note danger">
            <p>而 MySQL 默认的字符集使用的是 Latin1，会导致中文乱码！因此需要为数据库、数据表、甚至数据列显式设定不同的字符集。或者在 my.ini 中修改默认的字符集。</p>
          </div>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span> = utf8</span><br></pre></td></tr></tbody></table></figure>
<h2 id="三、基本操作"><a href="#三、基本操作" class="headerlink" title="三、基本操作"></a>三、基本操作</h2><h4 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">创建数据库 : <span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"></span><br><span class="line">删除数据库 : <span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名;</span><br><span class="line"></span><br><span class="line">查看数据库 : <span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line">使用数据库 : use 数据库名;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2、创建数据表"><a href="#2、创建数据表" class="headerlink" title="2、创建数据表"></a>2、创建数据表</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标 : 创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列,字段)</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span></span><br><span class="line"><span class="comment">-- 创建表之前 , 一定要先选择数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'学号'</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> COMMENT <span class="string">'姓名'</span>,</span><br><span class="line">`pwd` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">`sex` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'男'</span> COMMENT <span class="string">'性别'</span>,</span><br><span class="line">`birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'生日'</span>,</span><br><span class="line">`address` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'地址'</span>,</span><br><span class="line">`email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school;</span><br><span class="line"><span class="comment">-- 查看数据表的定义</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br><span class="line"><span class="comment">-- 显示表结构</span></span><br><span class="line"><span class="keyword">DESC</span> student;  </span><br><span class="line"><span class="comment">-- 设置严格检查模式</span></span><br><span class="line"><span class="keyword">SET</span> sql_mode<span class="operator">=</span><span class="string">'STRICT_TRANS_TABLES'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、修改数据表"><a href="#3、修改数据表" class="headerlink" title="3、修改数据表"></a>3、修改数据表</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student RENAME <span class="keyword">AS</span> student1		<span class="comment">-- 修改表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student1 <span class="keyword">ADD</span> newcol <span class="type">VARCHAR</span>(<span class="number">50</span>)	<span class="comment">-- 添加字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student1 MODIFY newcol <span class="type">INT</span>(<span class="number">10</span>)	<span class="comment">-- 修改字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student1 CHANGE newcol newnewcol <span class="type">VARCHAR</span>(<span class="number">10</span>)	<span class="comment">-- 修改字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student1 <span class="keyword">DROP</span> newnewcol		<span class="comment">-- 删除字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student1			<span class="comment">-- 删除数据表</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>可以使用```来包裹标识符，以避免和关键字重名！</p>
          </div>
<h2 id="四、外键"><a href="#四、外键" class="headerlink" title="四、外键"></a>四、外键</h2><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相互联系。以另一个关系的外键作为主关键字的表称为<code>主表</code>，具有此外建的表被称为主表的<code>从表</code>。</p>
<p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的的值是第一个表的主键值（在必要时可包括复合主键值）。此时，第二个表中保存这些值的属性称为外键（<strong>foreign key</strong>）。</p>
<div class="note success">
            <p>外键可以保持数据一致性，完整性，主要目的是约束存储在外键表中的数据。使两张表形成关联，外键只能引用主表中的列的值或使用空值。</p>
          </div>
<p><strong>1、建表时指定外键约束</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>),</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">tid <span class="type">INT</span>(<span class="number">11</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> FK_tid</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (tid) <span class="keyword">REFERENCES</span> teacher(id)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>关联的两张表引擎必须相同</li>
<li>外键名不能重复</li>
<li>关联的两个类型必须相同</li>
</ul>
<p><strong>2、建表后添加外键</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `study`.`student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_tid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `study`.`teacher`(`id`); </span><br></pre></td></tr></tbody></table></figure>
<p><strong>3、删除外键</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `study`.`student` <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY `FK_tid`; </span><br><span class="line"><span class="comment">-- 删除外键索引，这个索引是建立外键时自动生成的</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `study`.`student` <span class="keyword">DROP</span> INDEX `FK_tid`;  </span><br></pre></td></tr></tbody></table></figure>
<p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用！（避免数据库过多造成困扰，了解即可！）</p>
<p><strong>最佳实践</strong></p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li>
<li>我们想使用多张表的数据，想使用外键一般使用程序去实现</li>
</ul>
<h2 id="五、DML"><a href="#五、DML" class="headerlink" title="五、DML"></a>五、DML</h2><p><strong>数据库意义</strong>：数据存储、数据管理</p>
<p><strong>管理数据库数据方法</strong>：</p>
<ul>
<li>通过 SQLyog 等管理工具管理数据库数据</li>
<li>通过 <strong>DML</strong> 语句管理数据库数据</li>
</ul>
<p><strong><code>DML 语言</code>：Data Manipulaiton Language，数据操作语言</strong></p>
<ul>
<li>用于操作数据库对象中所包含的数据</li>
<li>包括：<ul>
<li>INSERT（添加数据语句）</li>
<li>UPDATE（更新数据语句）</li>
<li>DELETE（删除数据语句）</li>
</ul>
</li>
</ul>
<h4 id="1、INSERT"><a href="#1、INSERT" class="headerlink" title="1、INSERT"></a>1、INSERT</h4><p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">'值1'</span>,<span class="string">'值2'</span>,<span class="string">'值3'</span>),(<span class="string">'值1'</span>,<span class="string">'值2'</span>,<span class="string">'值3'</span>)...</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意 :</strong> </p>
<ul>
<li>字段或值之间用英文逗号隔开 .</li>
<li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li>
<li>可同时插入多条数据 , values 后用英文逗号隔开 .</li>
</ul>
<h4 id="2、UPDATE"><a href="#2、UPDATE" class="headerlink" title="2、UPDATE"></a>2、UPDATE</h4><p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span> column_name<span class="operator">=</span><span class="keyword">value</span> [column_name2<span class="operator">=</span>value2,...] [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意 :</strong> </p>
<ul>
<li>column_name 为要更改的数据列</li>
<li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li>
<li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li>
</ul>
<h4 id="3、DELETE"><a href="#3、DELETE" class="headerlink" title="3、DELETE"></a>3、DELETE</h4><p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></tbody></table></figure>
<p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除id为5的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> grade <span class="keyword">WHERE</span> gradeid <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4、TRUNCATE"><a href="#4、TRUNCATE" class="headerlink" title="4、TRUNCATE"></a>4、TRUNCATE</h4><p>用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 。</p>
<p><strong>语法：</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空年级表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> grade</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意：区别于DELETE命令</strong></p>
<ul>
<li><p>相同 : 都能删除数据 , 不删除表结构 , 但 TRUNCATE <strong>速度更快</strong></p>
</li>
<li><p>不同 :</p>
</li>
<li><ul>
<li>使用 TRUNCATE TABLE 重新设置 AUTO_INCREMENT 计数器</li>
<li>使用 TRUNCATE TABLE 不会对事务有影响</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入几个测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test(coll) <span class="keyword">VALUES</span>(<span class="string">'row1'</span>),(<span class="string">'row2'</span>),(<span class="string">'row3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(不带where条件的delete)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test;</span><br><span class="line"><span class="comment">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(truncate)</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test;</span><br><span class="line"><span class="comment">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span></span><br></pre></td></tr></tbody></table></figure>
<p>拓展：使用DELETE清空不同引擎的数据库表数据.重启数据库服务后<br><strong>InnoDB</strong> : 自增列从初始值重新开始 (存储在内存中,断电即失)<br><strong>MyISAM</strong> : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</p>
<h2 id="六、DQL-【重点】"><a href="#六、DQL-【重点】" class="headerlink" title="六、DQL 【重点】"></a>六、DQL 【重点】</h2><p><strong>DQL（Data Qeury Language 数据查询语言）</strong></p>
<ul>
<li>查询数据库数据，如 <strong>SELECT</strong> 语句</li>
<li>简单的单表查询或多表的复杂查询和嵌套查询</li>
<li>是数据库语言中最核心、最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<p><code>SELECT 语法</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">{<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]}</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [LIMIT {[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>}];</span><br><span class="line">   <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p>
<h4 id="1、简单查询语句"><a href="#1、简单查询语句" class="headerlink" title="1、简单查询语句"></a>1、简单查询语句</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表中所有的数据列结果，但是效率低，不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定列(学号 , 姓名)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname <span class="keyword">FROM</span> student;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>AS  子句作为别名</strong></p>
<p><strong>作用：</strong></p>
<ul>
<li>可给数据列取一个新别名</li>
<li>可给表取一个新别名</li>
<li>可把经计算或总结的结果用另一个新名称来代替</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 为列和表取别名</span></span><br><span class="line"><span class="comment">-- as可以省略不写</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">AS</span> 学号, studentname 姓名 <span class="keyword">FROM</span> student s;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为查询结果取一个新名字</span></span><br><span class="line"><span class="comment">-- concat()函数用于拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">'姓名:'</span>, studentname) 新姓名 <span class="keyword">FROM</span> student</span><br></pre></td></tr></tbody></table></figure>
<p><strong>DISTINCT 去重</strong></p>
<p><strong>作用：去掉 SELECT 查询返回的记录结果中重复的记录（返回所有列的值都相同）</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看哪儿些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去掉参加多门考试的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>表达式</strong></p>
<p><code>数据库中的表达式一般由文本值，列值，NULL，函数和操作符等组成</code>。</p>
<p>应用场景：</p>
<ul>
<li>SELECT 语句返回结果列中使用</li>
<li>SELECT 语句中的 ORDER BY，HAVING 等子句中使用</li>
<li>DML 语句中的 where 条件语句中使用表达式</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询自增步长</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@auto</span>_increment_increment;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 计算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">2</span> <span class="operator">-</span> <span class="number">1</span> 计算结果</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 考试分数全部加1分</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno 学号, studentresult 加分前, (studentresult <span class="operator">+</span> <span class="number">1</span>) 加分后 <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2、where-条件语句"><a href="#2、where-条件语句" class="headerlink" title="2、where 条件语句"></a>2、where 条件语句</h4><p>作用：用于检索数据库中<code>符合条件</code>的记录。</p>
<p>搜索条件可由一个或多个逻辑表达式组成，结果一般为真或假。</p>
<p><strong>逻辑操作符</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>逻辑操作符</strong></th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>AND 或 &amp;&amp;</td>
<td>a AND b 或 a &amp;&amp; b</td>
<td>逻辑与，同时为真结果才为真</td>
</tr>
<tr>
<td>OR 或 \</td>
<td>\</td>
<td></td>
<td>a OR b 或 a \</td>
<td>\</td>
<td>b</td>
<td>逻辑或，只要一个为真，则结果为真</td>
</tr>
<tr>
<td>NOT 或 ！</td>
<td>NOT a 或 !a</td>
<td>逻辑非，若操作数为假，则结果为真</td>
</tr>
</tbody>
</table>
</div>
<p><strong>比较运算符</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">比较运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">等号，检测两个值是否相等，如果相等返回true</td>
<td style="text-align:left">(A = B) 返回false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;&gt;, !=</td>
<td style="text-align:left">不等于，检测两个值是否相等，如果不相等返回true</td>
<td style="text-align:left">(A != B) 返回 true。</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td>
<td style="text-align:left">(A &gt; B) 返回false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td>
<td style="text-align:left">(A &lt; B) 返回 true。</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td>
<td style="text-align:left">(A &gt;= B) 返回false。</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td>
<td style="text-align:left">(A &lt;= B) 返回 true。</td>
</tr>
</tbody>
</table>
</div>
<p><code>注意：&lt;&gt; 和 != 都是不等于的意思。</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询考试成绩区间在[95, 100]</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用逻辑与</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="operator">&gt;=</span> <span class="number">95</span> <span class="keyword">AND</span> studentresult <span class="operator">&lt;=</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- AND 换成 &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="operator">&gt;=</span> <span class="number">95</span> <span class="operator">&amp;&amp;</span> studentresult <span class="operator">&lt;=</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 逻辑或</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">OR</span> studentno <span class="operator">=</span> <span class="number">1003</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- OR 换成 ||</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult <span class="operator">&lt;</span> <span class="number">60</span> <span class="operator">||</span> studentno <span class="operator">=</span> <span class="number">1003</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 逻辑非</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno <span class="operator">!=</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ! 换成 NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentno <span class="operator">=</span> <span class="number">1000</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、模糊查询"><a href="#3、模糊查询" class="headerlink" title="3、模糊查询"></a>3、模糊查询</h4><div class="table-container">
<table>
<thead>
<tr>
<th>操作符名称</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>IS NULL</td>
<td>a IS NULL</td>
<td>若操作符为 NULL，则结果为真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a IS NOT NULL</td>
<td>若操作符不为 NULL，则结果为真</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>a BETWEEN b AND c</td>
<td>若 a 范围在 b 与 c 之间，则结果为真</td>
</tr>
<tr>
<td>LIKE</td>
<td>a LIKE b</td>
<td>SQL 模式匹配，若a 匹配 b，则结果为真</td>
</tr>
<tr>
<td>IN</td>
<td>a IN(a1, a2, a3, ……)</td>
<td>若 a 等于 a1,a2…… 中的某一个，则结果为真</td>
</tr>
</tbody>
</table>
</div>
<p>注意：</p>
<ul>
<li>数据数据类型的记录之间才能进行算术运算</li>
<li>相同数据类型的数据之间才能进行比较</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- LIKE</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学的学号及姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'张%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘且姓名两个字的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'张_'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘且姓名三个字的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'张__'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中含有嘉字的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'%嘉%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- IN</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学号为1001,1002,1003的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> studentno <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址在北京，南京，河南洛阳的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentname, address</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IN</span>(<span class="string">'北京'</span>, <span class="string">'南京'</span>, <span class="string">'河南洛阳'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"><span class="comment">-- NULL</span></span><br><span class="line"><span class="comment">-- =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出生日期没有填写的同学</span></span><br><span class="line"><span class="comment">-- 不能直接写=NULL，一定要用IS NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,studentname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `borndate` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出生日期填写的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname, borndate <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> borndate <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有写家庭住址的同学</span></span><br><span class="line"><span class="comment">-- 空字符串不等于NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname, address <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">OR</span> address <span class="operator">=</span> <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>踩雷</strong></p>
<ul>
<li>没有 <code>a = NULL</code>这种写法，必须写成 <code>a IS NULL</code></li>
<li>空字符串即<strong>``</strong>，并不等于 <strong>NULL</strong></li>
</ul>
<h4 id="4、连接查询"><a href="#4、连接查询" class="headerlink" title="4、连接查询"></a>4、连接查询</h4><p><strong>Join</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作符名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>INNER JOIN</td>
<td>如果左右表都匹配到，则返回行</td>
</tr>
<tr>
<td>LEFT JOIN</td>
<td>即使右表中没有匹配，也从左表中返回所有的行</td>
</tr>
<tr>
<td>RIGHT JOIN</td>
<td>即使左边中没有匹配，也从右表中返回所有的行</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://z3.ax1x.com/2021/11/18/II1hFJ.png" alt=""></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">连接查询</span></span><br><span class="line"><span class="comment">    如果需要多张数据表的数据进行查询，则可以通过连接运算符实现多个查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">内连接 INNER JOIN</span></span><br><span class="line"><span class="comment">    查询两个表中的结果集中的交集</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">外连接 OUTER JOIN</span></span><br><span class="line"><span class="comment">    左外连接 LEFT JOIN</span></span><br><span class="line"><span class="comment">        以左表为基准，右表来一一匹配，匹配不上的，返回左表的记录，右表以NULL填充</span></span><br><span class="line"><span class="comment">    右外连接 RIGHT JOIN</span></span><br><span class="line"><span class="comment">        以右表为基准，左表来一一匹配，匹配不上的，返回右表的记录，左表以NULL填充    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span></span><br><span class="line"><span class="comment">-- INNER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="comment">-- 此时会出现问题，会将存在于student中但没有参加考试的学生也一并打印</span></span><br><span class="line"><span class="comment">-- 可以使用where进一步筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> r.`studentresult` <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="comment">-- 将左表更换为result即可，重点是参加考试的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> r.`studentresult` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INNER JOIN</span></span><br><span class="line"><span class="comment">-- 需要双方都匹配到，而缺考并没有记录在成绩表中</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> r.`studentresult` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="comment">-- 同上，缺考没有记录在成绩表中</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> r.`studentresult` <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span></span><br><span class="line"><span class="comment">-- 第一次查询以成绩表为主，查询结果作为左表，使用RIGHT JOIN</span></span><br><span class="line"><span class="comment">-- 第二次查询以左表（第一次的查询结果）为主，使用LEFT JOIN</span></span><br><span class="line"><span class="comment">-- 当然，两次都是用INNER JOIN也是没问题的</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> u.subjectno</span><br></pre></td></tr></tbody></table></figure>
<p>加强练习</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> r.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> r.studentno <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> u.subjectno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学员及所属的年级(学号,学生姓名,年级名)</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentname, gradename</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> grade g</span><br><span class="line"><span class="keyword">ON</span> s.gradeid <span class="operator">=</span> g.gradeid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目及所属的年级(科目名称,年级名称)</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectname, gradename</span><br><span class="line"><span class="keyword">FROM</span> `subject` s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> grade g</span><br><span class="line"><span class="keyword">ON</span> s.gradeid <span class="operator">=</span> g.gradeid</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 C语言-2 的所有考试结果(学号 学生姓名 科目名称 成绩)</span></span><br><span class="line"><span class="keyword">SELECT</span> t.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">ON</span> s.subjectno <span class="operator">=</span> r.subjectno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student t</span><br><span class="line"><span class="keyword">ON</span> t.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">WHERE</span> s.subjectname <span class="operator">=</span> <span class="string">'C语言-2'</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>WHERE 不能写在两个 JOIN 语句之间，要放在后面！详情请看这节开头的 <code>SELECT 语法</code></p>
          </div>
<h4 id="5、自查询"><a href="#5、自查询" class="headerlink" title="5、自查询"></a>5、自查询</h4><p>顾名思义，即数据表与自身进行连接。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category` (</span><br><span class="line">`categoryid` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'主题id'</span>,</span><br><span class="line">`pid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'父id'</span>,</span><br><span class="line">`categoryName` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'主题名字'</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`categoryid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category` (`categoryid`, `pid`, `categoryName`)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'信息技术'</span>),</span><br><span class="line">(<span class="string">'3'</span>,<span class="string">'1'</span>,<span class="string">'软件开发'</span>),</span><br><span class="line">(<span class="string">'4'</span>,<span class="string">'3'</span>,<span class="string">'数据库'</span>),</span><br><span class="line">(<span class="string">'5'</span>,<span class="string">'1'</span>,<span class="string">'美术设计'</span>),</span><br><span class="line">(<span class="string">'6'</span>,<span class="string">'3'</span>,<span class="string">'web开发'</span>),</span><br><span class="line">(<span class="string">'7'</span>,<span class="string">'5'</span>,<span class="string">'ps技术'</span>),</span><br><span class="line">(<span class="string">'8'</span>,<span class="string">'2'</span>,<span class="string">'办公信息'</span>);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span></span><br><span class="line"><span class="comment">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span></span><br><span class="line"><span class="keyword">SELECT</span> a.categoryName <span class="keyword">AS</span> <span class="string">'父栏目'</span>,b.categoryName <span class="keyword">AS</span> <span class="string">'子栏目'</span></span><br><span class="line"><span class="keyword">FROM</span> category <span class="keyword">AS</span> a,category <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`categoryid`<span class="operator">=</span>b.`pid`</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6、排序和分页"><a href="#6、排序和分页" class="headerlink" title="6、排序和分页"></a>6、排序和分页</h4><p><strong>ORDER BY</strong></p>
<ul>
<li>用于根据指定的列对结果集进行排序</li>
<li>默认按照 <code>ASC</code> 升序进行排序</li>
<li>如果需要进行降序排序，可以使用 DESC 关键字</li>
</ul>
<p><strong>LIMIT</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> LIMIT [<span class="keyword">offset</span>,] <span class="keyword">rows</span> <span class="operator">|</span> <span class="keyword">rows</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>第一个参数指定第一个返回记录行的偏移量，注意从<code>0</code>开始</li>
<li>第二个参数指定返回记录行的最大数目</li>
<li>如果只给定一个参数：它表示返回最大的记录行数目</li>
<li>第二个参数为 -1 表示检索从某一个偏移量到记录集的结束所有的记录行</li>
<li>初始记录行的偏移量是 0(而不是 1)</li>
</ul>
<p><strong>分页优点：</strong></p>
<ul>
<li>用户体验</li>
<li>网络传输</li>
<li>查询压力</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span></span><br><span class="line"><span class="comment">-- 注意是 LEFT JOIN 而不是 JOIN LEFT</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> r.`studentno` <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> u.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'C语言-2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按成绩升序排序</span></span><br><span class="line"><span class="comment">-- ORDER BY 默认就是升序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> r.`studentno` <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> u.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'C语言-2'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 每页显示5条数据</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> r.`studentno` <span class="operator">=</span> s.studentno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> u.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'C语言-2'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">ASC</span></span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, subjectname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> s.`studentno` <span class="operator">=</span> r.`studentno`</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` u</span><br><span class="line"><span class="keyword">ON</span> u.`subjectno` <span class="operator">=</span> r.`subjectno`</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span> <span class="keyword">AND</span> studentresult <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="7、子查询"><a href="#7、子查询" class="headerlink" title="7、子查询"></a>7、子查询</h4><p>子查询就是在查询语句的 WHERE 条件子句中，又嵌套了另一个查询语句，嵌套查询可由多个子查询组成，求解的方式是由里及外。子查询返回的结果一般都是集合，故而建议使用 IN 关键字。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 Java程序设计-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span></span><br><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, r.subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">ON</span> s.`subjectno` <span class="operator">=</span> r.`subjectno`</span><br><span class="line"><span class="keyword">WHERE</span> s.`subjectname` <span class="operator">=</span> <span class="string">'Java程序设计-1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, subjectno, studentresult</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> subjectno <span class="operator">=</span> (<span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询课程为 Java程序设计-1 且分数不小于90分的学生的学号和姓名</span></span><br><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> r.studentno, studentname</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> s.`subjectno`</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student stu</span><br><span class="line"><span class="keyword">ON</span> r.`studentno` <span class="operator">=</span> stu.studentno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span> <span class="keyword">AND</span> studentresult <span class="operator">&gt;=</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="comment">-- 由于分数不小于90的同学是一个集合（数量大于1），因此在外层嵌套中需要使用IN</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno, studentname <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> studentno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> subjectno <span class="operator">=</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span>) </span><br><span class="line">	<span class="keyword">AND</span> studentresult <span class="operator">&gt;=</span> <span class="number">90</span>)</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 连接查询 + 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> r.studentno, studentname</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `student` s</span><br><span class="line"><span class="keyword">ON</span> r.`studentno` <span class="operator">=</span> s.`studentno`</span><br><span class="line"><span class="keyword">WHERE</span> subjectno <span class="operator">=</span> (<span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span>) <span class="keyword">AND</span> studentresult <span class="operator">&gt;=</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查Java程序设计-1 的前5名学生的成绩信息(学号,姓名,分数)</span></span><br><span class="line"><span class="comment">-- 连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> s.studentno, studentname, studentresult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.studentno <span class="operator">=</span> r.studentno</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`subjectno` <span class="operator">=</span> sub.subjectno</span><br><span class="line"><span class="keyword">WHERE</span> subjectname <span class="operator">=</span> <span class="string">'Java程序设计-1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> studentresult <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询张伟同学所在的年级名称</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname, gradename</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> grade g</span><br><span class="line"><span class="keyword">ON</span> s.`gradeid` <span class="operator">=</span> g.gradeid</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="operator">=</span> <span class="string">'张伟'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8、分组查询"><a href="#8、分组查询" class="headerlink" title="8、分组查询"></a>8、分组查询</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">-- 查询不同课程的课程编号，课程名称，平均分(大于60),最高分,最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> r.subjectno 课程编号, subjectname 课程名称, <span class="built_in">MAX</span>(studentresult) 最高分, <span class="built_in">MIN</span>(studentresult) 最低分, <span class="built_in">AVG</span>(studentresult) 平均分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` s</span><br><span class="line"><span class="keyword">ON</span> r.subjectno <span class="operator">=</span> s.subjectno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 课程编号</span><br><span class="line"><span class="keyword">HAVING</span> 平均分 <span class="operator">&gt;</span> <span class="number">60</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>WHERE 必须写在 GROUP BY 前面，分组后筛选要使用 HAVING，因为 HAVING 是根据前面筛选的字段再筛选，而 WHERE 是根据数据表中的字段直接进行筛选。</p>
          </div>
<h2 id="七、MySQL-函数"><a href="#七、MySQL-函数" class="headerlink" title="七、MySQL 函数"></a>七、MySQL 函数</h2><h4 id="1、没那么常用的常用函数"><a href="#1、没那么常用的常用函数" class="headerlink" title="1、没那么常用的常用函数"></a>1、没那么常用的常用函数</h4><p><strong>数据函数</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>);  <span class="comment">/*绝对值*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>); <span class="comment">/*向上取整*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>);   <span class="comment">/*向下取整*/</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND();  <span class="comment">/*随机数,返回一个0-1之间的随机数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">0</span>); <span class="comment">/*符号函数: 负数返回-1,正数返回1,0返回0*/</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>字符串函数</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'狂神说坚持就能成功'</span>); <span class="comment">/*返回字符串包含的字符数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">'我'</span>,<span class="string">'爱'</span>,<span class="string">'程序'</span>);  <span class="comment">/*合并字符串,参数可以有多个*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">'我爱编程helloworld'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'超级热爱'</span>);  <span class="comment">/*替换字符串,从某个位置开始替换某个长度*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">'KuangShen'</span>); <span class="comment">/*小写*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">'KuangShen'</span>); <span class="comment">/*大写*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'hello,world'</span>,<span class="number">5</span>);   <span class="comment">/*从左边截取*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">'hello,world'</span>,<span class="number">5</span>);  <span class="comment">/*从右边截取*/</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">'狂神说坚持就能成功'</span>,<span class="string">'坚持'</span>,<span class="string">'努力'</span>);  <span class="comment">/*替换字符串*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">'狂神说坚持就能成功'</span>,<span class="number">4</span>,<span class="number">6</span>); <span class="comment">/*截取字符串,开始和长度*/</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">'狂神说坚持就能成功'</span>); <span class="comment">/*反转*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓周的同学,改成邹</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(studentname,<span class="string">'周'</span>,<span class="string">'邹'</span>) <span class="keyword">AS</span> 新名字</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">'周%'</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>日期和时间函数</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();   <span class="comment">/*获取当前日期*/</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();   <span class="comment">/*获取当前日期*/</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE();   <span class="comment">/*获取当前日期和时间*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取年月日,时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW());</span><br></pre></td></tr></tbody></table></figure>
<p><strong>系统信息函数</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VERSION();  <span class="comment">/*版本*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();     <span class="comment">/*用户*/</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2、聚合函数"><a href="#2、聚合函数" class="headerlink" title="2、聚合函数"></a>2、聚合函数</h4><div class="table-container">
<table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>COUNT()</td>
<td>返回满足Select条件的记录总和数，如 select count(*)</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回数字字段或表达式列作统计，返回一列的总和。</td>
</tr>
<tr>
<td>AVG()</td>
<td>通常为数值字段或表达列作统计，返回一列的平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td>
</tr>
<tr>
<td>MIN()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td>
</tr>
</tbody>
</table>
</div>
<p><strong>COUNT</strong></p>
<p>以下三种统计表行数的方法，返回的结果都是一致的，那么有什么区别呢？</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(studentno) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>COUNT(ColumnName)<ul>
<li>查询某一字段的记录数，会忽略掉为 NULL 的记录。</li>
<li>如果上面查询的是 sex 列，就会发现记录数只有两条。</li>
</ul>
</li>
<li>COUNT(*)<ul>
<li>因为是 SQL92 定义的标准统计行数的语法，因此 MySQL 对他进行了很多优化。</li>
<li>MyISAM 会将表的总行数单独记录下来供 <code>COUNT(*)</code> 查询。</li>
<li>InnoDB 会在扫表的时候选择最小的索引来降低成本。</li>
<li>上述两个引擎优化的前提是<strong>没有进行 WHERE 和 GROUP 的条件查询</strong>。</li>
</ul>
</li>
</ul>
<p>在 InnoDB 中 <code>COUNT(*)</code> 和 <code>COUNT(1)</code> 实现上没有区别，而且效率一样，但是 <code>COUNT(字段)</code> 需要进行字段的非 NULL 判断，所以效率会低一些。</p>
<p>因为 <code>COUNT(*)</code> 是 SQL92 定义的标准统计行数的语法，并且效率高，所以请直接使用 <code>COUNT(*)</code> 查询表的行数！</p>
<p><strong>练习</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(StudentResult) <span class="keyword">AS</span> 总和 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 最高分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="comment">-- 最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、MD5加密"><a href="#3、MD5加密" class="headerlink" title="3、MD5加密"></a>3、MD5加密</h4><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p>
<p><strong>实现数据加密</strong></p>
<p>新建一个测试表</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `testmd5` (</span><br><span class="line"> `id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></tbody></table></figure>
<p>插入数据</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'yqx'</span>,<span class="string">'123456'</span>),(<span class="number">2</span>,<span class="string">'yqx'</span>,<span class="string">'456789'</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>加密</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">update testmd5 <span class="keyword">set</span> pwd <span class="operator">=</span> md5(pwd);</span><br></pre></td></tr></tbody></table></figure>
<p>或者在插入数据时加密</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'yqx3'</span>,md5(<span class="string">'123456'</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>用户登录（将用户输入的密码加密后与数据库的密码进行比对）</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> testmd5 <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">'yqx'</span> <span class="keyword">AND</span> pwd<span class="operator">=</span>MD5(<span class="string">'123456'</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- ================ 内置函数 ================</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line"><span class="built_in">abs</span>(x)            <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line"><span class="built_in">ceil</span>(x)            <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line"><span class="built_in">floor</span>(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line"><span class="built_in">mod</span>(m, n)        <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)        <span class="comment">-- m^n</span></span><br><span class="line"><span class="built_in">sqrt</span>(x)            <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()            <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)    <span class="comment">-- 截取d位小数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line">now(), <span class="built_in">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="built_in">current_date</span>();                    <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="built_in">current_time</span>();                    <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="type">date</span>(<span class="string">'yyyy-mm-dd hh:ii:ss'</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line"><span class="type">time</span>(<span class="string">'yyyy-mm-dd hh:ii:ss'</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format(<span class="string">'yyyy-mm-dd hh:ii:ss'</span>, <span class="string">'%d %y %a %d %m %b %j'</span>);    <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();                <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)            <span class="comment">-- string长度，字节</span></span><br><span class="line"><span class="keyword">char_length</span>(string)        <span class="comment">-- string的字符个数</span></span><br><span class="line"><span class="built_in">substring</span>(str, position [,length])        <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line">replace(str ,search_str ,replace_str)    <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">instr(string ,substring)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line">concat(string [,...])    <span class="comment">-- 连接字串</span></span><br><span class="line">charset(str)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line">lcase(string)            <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(string, length)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line">load_file(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line">locate(substring, string [,start_position])    <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line">lpad(string, length, pad)    <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line">ltrim(string)            <span class="comment">-- 去除前端空格</span></span><br><span class="line">repeat(string, count)    <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(string, length, pad)    <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line">rtrim(string)            <span class="comment">-- 去除后端空格</span></span><br><span class="line">strcmp(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="built_in">count</span>()</span><br><span class="line"><span class="built_in">sum</span>();</span><br><span class="line"><span class="built_in">max</span>();</span><br><span class="line"><span class="built_in">min</span>();</span><br><span class="line"><span class="built_in">avg</span>();</span><br><span class="line">group_concat()</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line"><span class="keyword">default</span>();</span><br></pre></td></tr></tbody></table></figure>
<h2 id="八、事务（transaction）"><a href="#八、事务（transaction）" class="headerlink" title="八、事务（transaction）"></a>八、事务（transaction）</h2><h4 id="1、ACID-原则"><a href="#1、ACID-原则" class="headerlink" title="1、ACID 原则"></a>1、ACID 原则</h4><p><strong>原子性（Atomicity）</strong></p>
<p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p>
<p><strong>一致性（Consistency）</strong></p>
<p>一致性是指事务前后数据的完整性必须保持一致。</p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事物的操作数据所干扰，多个并发事物之间要相互隔离。</p>
<p><strong>持久性（Durability）</strong></p>
<p>持久性是指一个事物一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p>
<p>接下来举例进行说明。</p>
<p><strong><font size="5px">原子性</font></strong></p>
<p>针对同一个事务</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IbK26I.png" alt=""></p>
<p>在个过程包含两个步骤</p>
<p>A：800 - 200 = 600</p>
<p>B：200 + 200 = 400</p>
<p>原子性表示，这两个步骤要么一起成功，要么一起失败，不可能 A 的钱扣掉了，而 B 却没有收到钱。</p>
<p><strong><font size="5px">一致性</font></strong></p>
<p>针对一个事物操作前与操作后的状态一致</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IbK26I.png" alt=""></p>
<p>操作前A：800，B：200<br>操作后A：600，B：400</p>
<p>一致性表示事务完成后，符合逻辑运算（A + B = 1000）</p>
<p><strong><font size="5px">持久性</font></strong></p>
<p>表示事务结束后的数据不随着外界原因导致数据丢失</p>
<p>操作前A：800，B：200<br>操作后A：600，B：400<br>如果在操作前（事务还没有提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：800，B：200<br>如果在操作后（事务已经提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为<br>A：600，B：400</p>
<p><strong><font size="5px">隔离性</font></strong></p>
<p>针对多个用户同时操作，主要是排除其他事务对本次事务的影响</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IbMIDx.png" alt=""></p>
<p>事务一）C向B转账100<br>事务二）A向B转账200</p>
<p>两个事务同时进行，其中一个事务读取到另外一个事务还没有提交的数据。</p>
<p>例如 C 先给 B 转100元，在事务还没有提交之前，A 给 B 转了200元，而此时数据库中 B 的金额仍然是 200 元。待 C 给 B 的事务完成后，A 也完成了他的事务，此时数据库中 B 的金额将会是后手事务二提交的，也就是200 + 200 = 400，直接少了100元。</p>
<p>隔离性用于解决以上问题。</p>
<h4 id="2、隔离级别"><a href="#2、隔离级别" class="headerlink" title="2、隔离级别"></a>2、隔离级别</h4><p><strong><font size="5px">脏读：</font></strong></p>
<p>指一个事务读取到另一个事务未提交的数据。（具体查看上面的隔离性）</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IbMIDx.png" alt=""></p>
<p><strong><font size="5px">不可重复读：</font></strong></p>
<p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p>
<p>页面统计查询值</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IblstU.png" alt=""></p>
<p>生成报表时，有人又转给 B 300 元</p>
<p><img src="https://z3.ax1x.com/2021/11/19/IblstU.png" alt=""></p>
<p><strong><font size="5px">虚读：</font></strong></p>
<p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取数量总量不一致。<br>（一般是行影响，如下图所示：多了一行）</p>
<p><img src="https://z3.ax1x.com/2021/11/19/Ib1KCF.png" alt=""></p>
<p><strong><font size="5px">四种隔离级别设置</font></strong></p>
<p><strong>数据库</strong></p>
<p>set transaction isolation level 设置事务隔离级别<br>select @@tx_isolation 查询当前事务隔离级别</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Serializable</td>
<td>可避免脏读、不可重复读、虚读的发生。（串行化）</td>
</tr>
<tr>
<td>Repeatable read</td>
<td>可避免脏读、不可重复读情况的发生。（可重复读）</td>
</tr>
<tr>
<td>Repeatable read</td>
<td>可避免脏读情况发生。（读已提交）</td>
</tr>
<tr>
<td>Read uncommitted</td>
<td>最低级别，以上情况均无法保证。(读未提交)</td>
</tr>
</tbody>
</table>
</div>
<p><strong>java</strong></p>
<p>适当的 Connection 方法，比如 setAutoCommit 或 setTransactionIsolation</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>设置</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TRANSACTION_SERIALIZABLE</td>
<td>指示不可以发生脏读、不可重复读和虚读的常量。</td>
</tr>
<tr>
<td>TRANSACTION_REPEATABLE_READ</td>
<td>指示不可以发生脏读和不可重复读的常量；虚读可以发生。</td>
</tr>
<tr>
<td>TRANSACTION_READ_UNCOMMITTED</td>
<td>指示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom read) 的常量。</td>
</tr>
<tr>
<td>TRANSACTION_READ_COMMITTED</td>
<td>指示不可以发生脏读的常量；不可重复读和虚读可以发生。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="3、基本语法"><a href="#3、基本语法" class="headerlink" title="3、基本语法"></a>3、基本语法</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用set语句来改变事务自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span> <span class="comment">-- 关闭事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：</span></span><br><span class="line"><span class="comment">-- 1. MySQL中默认是自动提交</span></span><br><span class="line"><span class="comment">-- 2. 使用事务时应先关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启一个事务，标记事务的起始点</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务到数据库</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将事务回滚，数据回到本次事务的初始状态</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原MySQL数据库的自动提交</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> pointname <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> pointname <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> pointname <span class="comment">-- 删除保存点</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试题目</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A在线购买一款价格为500元商品，网上银行转账</span></span><br><span class="line"><span class="comment">A的银行卡余额为2000元，然后支付给B商家500元</span></span><br><span class="line"><span class="comment">商家B一开始的银行卡余额为10000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库shop和创建表account并插入2条数据</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE shop <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line">USE shop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">id <span class="type">INT</span>(<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">cash <span class="type">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account(`name`, cash) <span class="keyword">VALUES</span>(<span class="string">'A'</span>, <span class="number">2000</span>),(<span class="string">'B'</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭自动提交事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> cash <span class="operator">=</span> cash <span class="operator">-</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">'A'</span>;  <span class="comment">-- A支付给B 500元</span></span><br><span class="line">UPDATE account <span class="keyword">SET</span> cash <span class="operator">=</span> cash <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">'B'</span>;  <span class="comment">-- B收到A的 500元</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务回滚(事务提交失败时执行，成功则不会发生回滚)</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启自动提交事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="九、索引"><a href="#九、索引" class="headerlink" title="九、索引"></a>九、索引</h2><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</p>
<p>索引在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。<br>索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。</p>
<p>索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。</p>
<p><strong>索引的作用</strong></p>
<ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化.</li>
</ul>
<p><strong>分类</strong></p>
<ul>
<li>主键索引 (Primary Key)</li>
<li>唯一索引 (Unique)</li>
<li>常规索引 (Index)</li>
<li>全文索引 (FullText)</li>
</ul>
<h4 id="2、各索引区别"><a href="#2、各索引区别" class="headerlink" title="2、各索引区别"></a>2、各索引区别</h4><p><strong>主键索引</strong></p>
<ul>
<li>最常见的索引类型</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
<li>一张表只能有一个主键索引</li>
</ul>
<p><strong><code>不唯一的</code>唯一索引</strong></p>
<ul>
<li>避免同一个表中某数据列的值重复</li>
<li>一张表可以有多个唯一索引</li>
</ul>
<p><strong>常规索引</strong></p>
<ul>
<li>快速定位特定数据</li>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在需要查询的字段</li>
<li>不宜添加太多常规索引，会影响数据增删改的效率，因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</li>
</ul>
<p><strong>全文索引</strong></p>
<ul>
<li><p>百度搜索</p>
</li>
<li><p>快速定位特定数据</p>
</li>
<li>只能用于 MyISAM 类型的数据表（INNODB 在 MySQL 5.6 之后也支持全文索引)</li>
<li>只能用于 CHAR，VARCHAR，TEXT 等文本类型数据</li>
<li>适合大型数据集</li>
</ul>
<div class="note success">
            <p>建立索引会占用磁盘空间的索引文件。</p>
          </div>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 方法一：建表时</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">    字段名<span class="number">1</span> 数据类型 [完整性约束条件…],</span><br><span class="line">    字段名<span class="number">2</span> 数据类型 [完整性约束条件…],</span><br><span class="line">    [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT <span class="operator">|</span> SPATIAL ]   INDEX <span class="operator">|</span> KEY</span><br><span class="line">    [索引名] (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二：建表后创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT <span class="operator">|</span> SPATIAL ] INDEX 索引名 <span class="keyword">ON</span> 表名 (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>]) ;</span><br><span class="line">                    </span><br><span class="line"><span class="comment">-- 方法三：建表后修改索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT <span class="operator">|</span> SPATIAL ] INDEX 索引名 (字段名[(长度)] [<span class="keyword">ASC</span> <span class="operator">|</span><span class="keyword">DESC</span>]) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名字;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析SQL语句执行性能</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno<span class="operator">=</span><span class="string">'1000'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用全文索引</span></span><br><span class="line"><span class="comment">-- 全文索引通过MATCH()函数完成</span></span><br><span class="line"><span class="comment">-- 搜索字符串作为AGAINST()的参数被给定。</span></span><br><span class="line"><span class="comment">-- 搜索以忽略字母大小写的方式执行。</span></span><br><span class="line"><span class="comment">-- 对于表中的每个记录行，MATHCH()会返回一个相关性值。即在搜索字符串与MATCH()参数列表中指定的列的文本之间的相似性尺度。</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentno<span class="operator">=</span><span class="string">'1000'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3、测试各索引性能"><a href="#3、测试各索引性能" class="headerlink" title="3、测试各索引性能"></a>3、测试各索引性能</h4><p>建立测试表</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `app_user` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'用户昵称'</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户邮箱'</span>,</span><br><span class="line">`phone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'手机号'</span>,</span><br><span class="line">`gender` TINYINT(<span class="number">4</span>) UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">'性别（0:男；1：女）'</span>,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'密码'</span>,</span><br><span class="line">`age` TINYINT(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">'app用户表'</span></span><br></pre></td></tr></tbody></table></figure>
<p>插入100W 测试数据</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;</span> num DO</span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)</span><br><span class="line">   <span class="keyword">VALUES</span>(CONCAT(<span class="string">'用户'</span>, i), <span class="string">'24736743@qq.com'</span>, CONCAT(<span class="string">'18'</span>, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span>(<span class="number">999999999</span><span class="number">-100000000</span>)<span class="operator">+</span><span class="number">100000000</span>)),<span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">2</span>),UUID(), <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">100</span>));</span><br><span class="line">  <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> mock_data();</span><br></pre></td></tr></tbody></table></figure>
<p>测试结果</p>
<p>每个索引效率都差不多，会比没有索引快十倍，创建索引的时候会耗点时间。</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 无索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">'用户1000000'</span> <span class="comment">-- 4.564 sec</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> phone <span class="operator">=</span> <span class="string">'18586428336'</span> <span class="comment">-- 4.316 sec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2878891</span> <span class="comment">-- 0.392 sec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="comment">-- 先添加唯一索引，建立索引比较费时</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> app_user <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uidx(`name`) <span class="comment">-- 23.014 sec</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">'用户1234567'</span> <span class="comment">-- 0.341 sec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 常规索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> app_user <span class="keyword">ADD</span> INDEX idx(`phone`) <span class="comment">-- 24.027 sec</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> phone <span class="operator">=</span> <span class="string">'18586428336'</span> <span class="comment">-- 0.408 sec</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4、小结-1"><a href="#4、小结-1" class="headerlink" title="4、小结"></a>4、小结</h4><p><strong>索引准则</strong></p>
<ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表建议不要加索引</li>
<li>索引一般应加在查找条件的字段</li>
</ul>
<p><strong>索引的数据结构</strong></p>
<p>我们在创建上述索引的时候，可以为其指定索引类型</p>
<ul>
<li>hash 类型的索引：查询单条快，范围查询慢</li>
<li>btree 类型的索引：b+ 数，层数越多，数据量呈指数级增长（INNODB 默认）</li>
</ul>
<p>不同的存储引擎支持的索引类型也不一样</p>
<ul>
<li>INNODB 支持事务，支持行级别锁定，支持 B-tree、Full-Text 等索引，不支持 Hash 索引。</li>
<li>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-Text等索引，不支持 Hash 索引。</li>
<li>Memory 不支持事务，支持表级别锁定，支持B-tree、Hash 等索引，不支持 Full-Text 索引。</li>
<li>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-Text 等索引。</li>
<li>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引。</li>
</ul>
<p>参考文章：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">CodingLabs - MySQL索引背后的数据结构及算法原理</a></p>
<h2 id="十、权限管理和备份"><a href="#十、权限管理和备份" class="headerlink" title="十、权限管理和备份"></a>十、权限管理和备份</h2><h4 id="1、权限管理"><a href="#1、权限管理" class="headerlink" title="1、权限管理"></a>1、权限管理</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 用户和权限管理 */</span></span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加用户 CREATE USER kuangshen IDENTIFIED BY '123456'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 IDENTIFIED <span class="keyword">BY</span> [PASSWORD] 密码(字符串)</span><br><span class="line">  <span class="operator">-</span> 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">  <span class="operator">-</span> 只能创建用户，不能赋予权限。</span><br><span class="line">  <span class="operator">-</span> 用户名，注意引号：如 <span class="string">'user_name'</span>@<span class="string">'192.168.1.1'</span></span><br><span class="line">  <span class="operator">-</span> 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  <span class="operator">-</span> 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名用户 RENAME USER kuangshen TO kuangshen2</span></span><br><span class="line">RENAME <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">'密码'</span>)    <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> 用户名 <span class="operator">=</span> PASSWORD(<span class="string">'密码'</span>)    <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户 DROP USER kuangshen2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [IDENTIFIED <span class="keyword">BY</span> [PASSWORD] <span class="string">'password'</span>]</span><br><span class="line">  <span class="operator">-</span> <span class="keyword">all</span> privileges 表示所有权限</span><br><span class="line">  <span class="operator">-</span> <span class="operator">*</span>.<span class="operator">*</span> 表示所有库的所有表</span><br><span class="line">  <span class="operator">-</span> 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限   SHOW GRANTS FOR root@localhost;</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS; </span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES, <span class="keyword">GRANT</span> OPTION <span class="keyword">FROM</span> 用户名    <span class="comment">-- 撤销所有权限</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>权限解释</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [PRIVILEGES]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>    <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE    <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>    <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE    <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY TABLES        <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>        <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>        <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>    <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>        <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">FILE    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line">INDEX     <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>    <span class="comment">-- 允许使用INSERT</span></span><br><span class="line">LOCK TABLES        <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>    <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD    <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line">REPLICATION CLIENT    <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line">REPLICATION SLAVE    <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>    <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES    <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>    <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line">SHUTDOWN    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER    <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line">UPDATE    <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line">USAGE    <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> OPTION    <span class="comment">-- 允许授予权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 表维护 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line">ANALYZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option <span class="operator">=</span> {QUICK <span class="operator">|</span> FAST <span class="operator">|</span> MEDIUM <span class="operator">|</span> EXTENDED <span class="operator">|</span> CHANGED}</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line">OPTIMIZE [<span class="keyword">LOCAL</span> <span class="operator">|</span> NO_WRITE_TO_BINLOG] <span class="keyword">TABLE</span> tbl_name [, tbl_name] </span><br></pre></td></tr></tbody></table></figure>
<h4 id="2、MySQL-备份"><a href="#2、MySQL-备份" class="headerlink" title="2、MySQL 备份"></a>2、MySQL 备份</h4><p><strong>数据备份的重要性</strong></p>
<ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<p><strong>MySQL 数据库备份方法</strong></p>
<ul>
<li>数据库管理工具，如 SQLyog</li>
<li>直接拷贝数据库物理文件（/data/*）</li>
<li>使用命令行，mysqldump</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 导出</span></span><br><span class="line"><span class="number">1.</span> 导出一张表 </span><br><span class="line"><span class="comment">-- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line">　　</span><br><span class="line"><span class="number">2.</span> 导出多张表 </span><br><span class="line"><span class="comment">-- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line">　　</span><br><span class="line"><span class="number">3.</span> 导出所有表 </span><br><span class="line"><span class="comment">-- mysqldump -uroot -p123456 school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line">　　</span><br><span class="line"><span class="number">4.</span> 导出一个库 </span><br><span class="line"><span class="comment">-- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span></span><br><span class="line">　　mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="operator">-</span>B 库名 <span class="operator">&gt;</span> 文件名(D:<span class="operator">/</span>a.sql)</span><br><span class="line"></span><br><span class="line">可以<span class="operator">-</span>w携带备份条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：</span><br><span class="line"><span class="comment">-- source D:/a.sql</span></span><br><span class="line">　　source 备份文件</span><br><span class="line">　　</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line"><span class="comment">-- mysqldump -uroot -p123456 school &lt;D:/a.sql</span></span><br><span class="line">　　mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 <span class="operator">&lt;</span> 备份文件</span><br></pre></td></tr></tbody></table></figure>
<h2 id="十一、规范化数据库设计"><a href="#十一、规范化数据库设计" class="headerlink" title="十一、规范化数据库设计"></a>十一、规范化数据库设计</h2><h4 id="1、为什么需要数据库设计"><a href="#1、为什么需要数据库设计" class="headerlink" title="1、为什么需要数据库设计"></a>1、为什么需要数据库设计</h4><blockquote>
<p>当数据库比较复杂时我们需要设计数据库</p>
</blockquote>
<p><strong>糟糕的数据库设计 :</strong> </p>
<ul>
<li>数据冗余,存储空间浪费</li>
<li>数据更新和插入的异常</li>
<li>程序性能差</li>
</ul>
<p><strong>良好的数据库设计 :</strong> </p>
<ul>
<li>节省数据的存储空间</li>
<li>能够保证数据的完整性</li>
<li>方便进行数据库应用系统的开发</li>
</ul>
<p> <strong>软件项目开发周期中数据库设计 :</strong></p>
<ul>
<li>需求分析阶段：分析客户的业务和数据处理需求。</li>
<li>概要设计阶段：设计数据库的E-R模型图 , 确认需求信息的正确和完整。</li>
</ul>
<p><strong>设计数据库步骤</strong></p>
<ul>
<li>收集信息，与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务。</li>
<li>标识数据库要管理的关键对象或实体,实体一般是名词。</li>
<li>标识每个实体需要存储的详细信息。</li>
<li>标识实体之间的关系。</li>
</ul>
<h4 id="2、三大范式"><a href="#2、三大范式" class="headerlink" title="2、三大范式"></a>2、三大范式</h4><p><strong>问题 : 为什么需要数据规范化?</strong></p>
<p>不合规范的表设计会导致的问题：</p>
<ul>
<li><p>信息重复</p>
</li>
<li><p>更新异常</p>
</li>
<li><p>插入异常</p>
</li>
<li><ul>
<li>无法正确表示信息</li>
</ul>
</li>
<li><p>删除异常</p>
</li>
<li><ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<p><strong>第一范式 (1st NF)</strong></p>
<p>第一范式是最基本的范式。如果<strong>数据库表中的所有字段值都是不可分解的原子值</strong>，就说明该数据库表满足了第一范式。</p>
<p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。</p>
<p><img src="https://z3.ax1x.com/2021/11/20/ILtAbQ.png" alt=""></p>
<p><strong>第二范式(2nd NF)</strong></p>
<p>第二范式在第一范式的基础之上更进一层。第二范式需要<strong>确保数据库表中的每一列都和主键相关</strong>，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p>
<p>比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键，如下表所示。</p>
<p><img src="https://z3.ax1x.com/2021/11/20/ILte5n.png" alt=""></p>
<p>这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。</p>
<p>而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。如下所示。</p>
<p><img src="https://z3.ax1x.com/2021/11/20/ILtNP1.png" alt=""></p>
<p>这样设计，在很大程度上减小了数据库的冗余。如果要获取订单的商品信息，使用商品编号到商品信息表中查询即可。</p>
<p><strong>第三范式(3rd NF)</strong></p>
<p>第三范式需要确保数据表中的每一列数据都<strong>和主键直接相关，而不能间接相关</strong>。</p>
<p>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。如下面这两个表所示的设计就是一个满足第三范式的数据库表。</p>
<p><img src="https://z3.ax1x.com/2021/11/20/ILNPiR.png" alt=""></p>
<p>这样在查询订单信息的时候，就可以使用客户编号来引用客户信息表中的记录，也不必在订单信息表中多次输入客户信息的内容，减小了数据冗余。</p>
<p>但很多时候我们会<strong>为了性能而抛弃这些规范化的操作</strong>，因为一个复杂的表如果按照三大范式来设计，很有可能会拆成十多个表，这样在数据库查询时会十分影响效率（多表查询）。</p>
<p><strong>规范化和性能的关系</strong></p>
<ul>
<li><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p>
</li>
<li><p>在数据规范化的同时 , 要综合考虑数据库的性能</p>
</li>
<li><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p>
</li>
<li><p>通过在给定的表中插入计算列,以方便查询</p>
</li>
</ul>
]]></content>
      <categories>
        <category>DataBase System</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>23种设计模式</title>
    <url>/2021/11/29/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>编写软件的过程中，程序员面临着来自<strong>耦合性</strong>、<strong>内聚性</strong>、<strong>可维护性</strong>、<strong>可拓展性</strong>、<strong>重用性</strong>、<strong>灵活性</strong>等多方面的挑战，而设计模式是为了让软件具有更好的</p>
<ul>
<li><strong>代码重用性</strong>：相同功能的代码，不用多次编写</li>
<li><strong>可读性</strong>：编程规范性，便于其他程序员的阅读和理解</li>
<li><strong>可拓展性</strong>：当需要增加新的功能时，非常的方便，不用大量修改原代码</li>
<li><strong>可靠性</strong>：当增加新的功能后，对原来的功能没有任何的影响</li>
<li><strong>高内聚</strong>：尽量一个方法（类）完成一个（类）事情</li>
<li><strong>低耦合</strong>：减少方法（类）内部对其他方法（类）的使用，降低模块之间的依赖作用</li>
</ul>
<h2 id="2-七大原则"><a href="#2-七大原则" class="headerlink" title="2. 七大原则"></a>2. 七大原则</h2><h3 id="2-1-单一职责原则"><a href="#2-1-单一职责原则" class="headerlink" title="2.1 单一职责原则"></a>2.1 单一职责原则</h3><p>一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p>
<p>例如，类 A 负责两个不同职责：职责1，职责2。当职责1需求变更而改变 A 时，可能导致职责 2 出错，所以要将类 A 的粒度分解为 A1，A2。</p>
<p><strong>代码如下</strong>，所有的交通工具都用的一个run方法，以至于潜艇能在路上跑，这肯定是不行的，因此我们要加以修改。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"汽车"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"飞机"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"潜艇"</span>).run();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不满足职责单一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>{</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在路上跑"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">汽车在路上跑</span><br><span class="line">飞机在路上跑</span><br><span class="line">潜艇在路上跑</span><br></pre></td></tr></tbody></table></figure>
<p><strong>方案1</strong>，将 <strong>Vehicle</strong> 分解为三个类，这样子改动非常大，还要同时修改客户端！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.designpattern.principle.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility1</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> LandVehicle(<span class="string">"汽车"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> SeaVehicle(<span class="string">"飞机"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> SkyVehicle(<span class="string">"潜艇"</span>).run();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandVehicle</span></span>{</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LandVehicle</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在路上跑"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeaVehicle</span></span>{</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeaVehicle</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在海里游"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkyVehicle</span></span>{</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkyVehicle</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在天上飞"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>方案2</strong>，将原 <strong>Vehicle</strong> 中的 run 方法拆解为三个方法，虽然没有在类上遵循单一职责的方法，但是在方法上遵守了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"汽车"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"飞机"</span>).swim();</span><br><span class="line">        <span class="keyword">new</span> Vehicle(<span class="string">"潜艇"</span>).fly();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span></span>{</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在路上跑"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在海里游"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在天上飞"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p><strong>单一职责原则注意事项：</strong></p>
          </div>
<ol>
<li>降低类的复杂度，一个类只负责一项职责。</li>
<li>提高类的可读性，可维护性。</li>
<li>降低变更引起的风险。</li>
<li>通常情况下，我们应当遵守单一职责原则，只有当逻辑足够简单且类中的方法足够少时，才可以在代码级违反单一职责原则（见方案2）。</li>
</ol>
<p><br></p>
<h3 id="2-2-接口隔离原则"><a href="#2-2-接口隔离原则" class="headerlink" title="2.2 接口隔离原则"></a>2.2 接口隔离原则</h3><ol>
<li>创建类时要使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</li>
<li>类间的依赖关系应该建立在最小的接口上。</li>
</ol>
<p><strong>接口的含义</strong>：</p>
<ol>
<li>一个接口代表一个角色，不应该将不同的角色都交给一个接口，因为这样可能会形成一个臃肿的大接口（参考 jdk 中的 stack 类）</li>
<li>特定语言的接口，表示接口仅仅是提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。</li>
</ol>
<p><strong>代码如下</strong>，动物接口中定义了三个方法，<strong>eat</strong>、<strong>work</strong> 和 <strong>fly</strong>，可是对于实现类 <strong>Person</strong> 而言，根本就用不到 fly() 这个方法。同理实现类 <strong>Bird</strong> 也不需要 work()。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAnimal</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">IAnimal</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在吃饭"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在工作"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"不会飞"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">IAnimal</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在吃饭"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"不工作"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在翱翔"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这是对应的 UML 图。</p>
<p><img src="https://z3.ax1x.com/2021/12/01/oGTBs1.png" alt="image"></p>
<p><strong>修改如下</strong>，将作为动物都拥有的 <strong>eat</strong> 方法保留下来，而 <strong>fly</strong> 和 <strong>work</strong> 则单独拎出来作为两个接口。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IAnimal</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWork</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IFly</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">IAnimal</span>, <span class="title">IWork</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在吃饭"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在工作"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">IAnimal</span>, <span class="title">IFly</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在吃饭"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">"在翱翔"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UML 图如下。</p>
<p><img src="https://z3.ax1x.com/2021/12/01/oGT3q0.png" alt="image"></p>
<p><br></p>
<h3 id="2-3-依赖倒转原则"><a href="#2-3-依赖倒转原则" class="headerlink" title="2.3 依赖倒转原则"></a>2.3 依赖倒转原则</h3><ol>
<li>高层模块不应该依赖底层模块，二者都应该依赖其抽象。</li>
<li>抽象不应该依赖细节，而细节应该依赖抽象。</li>
<li>依赖倒转的中心思想是<strong>面向接口编程</strong>。</li>
<li>相较于细节的多变性，抽象的东西要稳定得多，以抽象为基础搭建的架构要比以细节为基础所搭建的架构要稳定得多。</li>
<li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，<strong>把展现细节的任务交给他们的实现类</strong>去完成。</li>
</ol>
<p><strong>代码如下</strong>，Person 类中有 <strong>receiveEmail()</strong> 来专门接受邮件消息，可万一后面程序拓展，需要接受短信、qq、微信等消息呢？那就只能添加数个方法对应数个接受信息格式，麻烦之至！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseDependency</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Person().receiveEmail(<span class="keyword">new</span> Email(<span class="string">"每日一报未填报!"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveEmail</span><span class="params">(Email email)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"收到一封邮件："</span> + email.getMsg());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>修改如下</strong>，方法中只需传入类的抽象类型（接口）即可，让所有的实体类去实现这个抽象类型（接口），记住：<strong>依赖于接口</strong>！！！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseDependency</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Person1 person1 = <span class="keyword">new</span> Person1();</span><br><span class="line">        Person2 person2 = <span class="keyword">new</span> Person2();</span><br><span class="line">        Person3 person3 = <span class="keyword">new</span> Person3(<span class="keyword">new</span> Wechat(<span class="string">"每日一报未填报!"</span>));</span><br><span class="line">        person1.receiveEmail(<span class="keyword">new</span> Email(<span class="string">"每日一报未填报!"</span>));</span><br><span class="line">        person2.setReceiver(<span class="keyword">new</span> QQ(<span class="string">"每日一报未填报!"</span>));</span><br><span class="line">        person2.receiveEmail();</span><br><span class="line">        person3.receiveEmail();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span></span>{</span><br><span class="line">    <span class="function">String <span class="title">getMsg</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Email"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQ</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"QQ"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQ</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wechat</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Wechat"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wechat</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 接口传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveEmail</span><span class="params">(IReceiver receiver)</span></span>{</span><br><span class="line">        System.out.println(receiver.getName() + <span class="string">"收到一条消息："</span> + receiver.getMsg());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.set方法传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>{</span><br><span class="line">    <span class="keyword">private</span> IReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReceiver</span><span class="params">(IReceiver receiver)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveEmail</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(receiver.getName() + <span class="string">"收到一条消息："</span> + receiver.getMsg());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.构造方法传递</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person3</span></span>{</span><br><span class="line">    <span class="keyword">private</span> IReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person3</span><span class="params">(IReceiver receiver)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveEmail</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(receiver.getName() + <span class="string">"收到一条消息："</span> + receiver.getMsg());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="2-4-里氏替换原则"><a href="#2-4-里氏替换原则" class="headerlink" title="2.4 里氏替换原则"></a>2.4 里氏替换原则</h3><div class="note success">
            <p><strong>Barbara Liskov</strong>提出：</p><p>标准定义：如果对每一个类型为 S 的对象 o1，都有类型为 T 的对象 o2，使得以 T 定义的所有程序 P 在所有的对象 o1 代换 o2 时，程序 P 的行为没有变化，那么类型 S 是类型 T 的子类型。</p>
          </div>
<p>说人话就是，<strong>所有引用基类（父类的）地方都可以用子类来替换，且程序不会有任何的异常</strong>，但反过来通常来说就是错误的！！！毕竟可以说人是动物，但不能说动物是人。</p>
<p>里氏替换原则是实现开闭原则的重要方式之一，由于使用基类的所有地方都可以用子类来替换，因此在程序中尽量使用基类来定义对象，在运行时确定其子类类型。</p>
<h4 id="2-4-1-里氏替换原则约束"><a href="#2-4-1-里氏替换原则约束" class="headerlink" title="2.4.1 里氏替换原则约束"></a>2.4.1 里氏替换原则约束</h4><ul>
<li>子类必须实现父类的抽象方法，但尽量不要重写（覆盖）父类的非抽象（已实现）方法，会让逻辑关系变得混乱。</li>
<li>子类中可以添加特有方法，此时则无法在以父类定义的对象中使用该方法，除非在使用的时候强转成子类进行调用。</li>
<li><p>当子类覆盖或实现父类的方法时，方法的前置条件（形参）要比父类的形参更宽松。</p>
</li>
<li><p>当子类覆盖或实现父类的方法时，方法的后置条件（返回值）要比父类的返回值更宽松。</p>
</li>
</ul>
<p><strong><font size="4px">为什么子类的前置条件要比父类更宽松？</font></strong></p>
<p>下述代码中，Father 类中的 doSomething() 是 HashMap 类型的，而其子类 Son 则是 HashMap 的实现接口 Map 类型，显然，更宽松了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Father father = <span class="keyword">new</span> Father();</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        father.doSomething(map);</span><br><span class="line">        son.doSomething(map);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(HashMap map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"父类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(Map map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"子类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果正如里氏替换原则说的那样：<strong>所有引用基类（父类的）地方都可以用子类来替换，且程序不会有任何的异常</strong>，子类代替父类，子类的方法不被执行</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">父类被执行</span><br><span class="line">父类被执行</span><br><span class="line">    </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p>
<p>设置子类的方法比父类的形参条件更宽松，在没有重写的情况下，父类对象调用方法是就会优先调用父类中的方法，而不是子类中重载的方法。</p>
<p><strong>下面我们反过来</strong>，假如子类前置条件更严格呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Father father = <span class="keyword">new</span> Father();</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        father.doSomething(map);</span><br><span class="line">        son.doSomething(map);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(Map map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"父类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">doSomething</span><span class="params">(HashMap map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"子类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> map.values();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>毫无疑问地，会执行子类的方法。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">父类被执行</span><br><span class="line">父类被执行</span><br><span class="line">    </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>调用了子类，子类在没有覆写父类的方法的前提下，子类方法被执行了，这会引起业务逻辑混乱，因为在实际应用中父类一般是抽象类，子类是实现类，你传递一个这样的实现类就会歪曲了父类的意图，引起业务逻辑混乱，所以子类中方法的前置条件必须与超类中被覆写的方法的前置条件相同或更宽松。</p>
<p><strong><font size="4px">为什么子类的后置条件要比父类更严格？</font></strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Father father = <span class="keyword">new</span> Father();</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        father.doSomething(map);</span><br><span class="line">        son.doSomething(map);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">doSomething</span><span class="params">(Map map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"父类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(map.values());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">doSomething</span><span class="params">(Map map)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"子类被执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(map.values());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果直接报兼容异常的错误，不过想想也能知道</p>
<ul>
<li>如果子类方法返回值类型比父类更严格，那么子类的返回值是可以隐式转换为父类的。</li>
<li>而如果子类方法返回值类型比父类更宽松，那么子类的返回值则无法与原代码兼容！！！需要强转等手段，但现在从编译期间就解决了这个问题，直接报错。</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">java: com.yqx.designpattern.Son中的doSomething(java.util.Map)无法覆盖com.yqx.designpattern.Father中的doSomething(java.util.Map)</span><br><span class="line">    返回类型java.util.List与java.util.ArrayList不兼容</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="2-4-2-代码"><a href="#2-4-2-代码" class="headerlink" title="2.4.2 代码"></a>2.4.2 代码</h4><p>下述代码中，子类 B 重写了父类 A 中的 func1() 方法，而自己却不自知。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11 - 3 = "</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 - 8 = "</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"11 - 3 = "</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 - 8 = "</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11 + 3 + 9 = "</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="comment">// 返回两个数的差</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="comment">// 这里重写了A类的方法，可能是无意识的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> func1(num1, num2) + <span class="number">9</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果则出现了很离谱的情况，以为自己还调用的是父类的 func1()，导致加减颠倒。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">11</span> - <span class="number">3</span> = <span class="number">8</span></span><br><span class="line"><span class="number">1</span> - <span class="number">8</span> = -<span class="number">7</span></span><br><span class="line">==================================</span><br><span class="line"><span class="number">11</span> - <span class="number">3</span> = <span class="number">14</span></span><br><span class="line"><span class="number">1</span> - <span class="number">8</span> = <span class="number">9</span></span><br><span class="line"><span class="number">11</span> + <span class="number">3</span> + <span class="number">9</span> = <span class="number">23</span></span><br></pre></td></tr></tbody></table></figure>
<p>在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差，特别是运行多态比较频繁的时候。</p>
<p>通用的方法是：<strong>让原来的父类和子类都继承一个更通俗的基类</strong>，将原有的继承关系取消，进而采用<strong>依赖，组合，聚合</strong>等关系代替。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11 - 3 = "</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 - 8 = "</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">        <span class="comment">// 因为B类不在继承A类，因此调用者很清楚，func1不再是求减法</span></span><br><span class="line">        System.out.println(<span class="string">"11 + 3 = "</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 + 8 = "</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"1 - 8 = "</span> + b.func3(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11 + 3 + 9 = "</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span></span>{</span><br><span class="line">    <span class="comment">// 返回两个数的差</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span></span>{</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> func1(num1, num2) + <span class="number">9</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用组合的方式来调用A的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> a.func1(num1, num2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UML 图如下。</p>
<p><img src="https://s1.ax1x.com/2021/12/01/oJayFO.png" alt="image"></p>
<p><br></p>
<h3 id="2-5-开闭原则"><a href="#2-5-开闭原则" class="headerlink" title="2.5 开闭原则"></a>2.5 开闭原则</h3><p>开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则，定义如下：</p>
<blockquote>
<p> <strong>一个软件实体应当对扩展开放，对修改关闭，即软件实体应尽量在不修改原有代码的情况下进行扩展。</strong></p>
</blockquote>
<p><strong>开闭原则的优势：</strong></p>
<ul>
<li>可以使原有代码依旧可以运行，只需要对扩展的代码进行测试即可</li>
<li>可以提高代码的复用性</li>
<li>可以提高系统的维护性</li>
</ul>
<p><strong>如何使用开闭原则：</strong></p>
<ul>
<li>抽象约束<ul>
<li>通过接口或者抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的 public 方法。</li>
<li>参数类型、引用对象尽量使用接口或者抽象类，而不是实现类。</li>
<li>抽象层尽量保持稳定，一旦确定就不允许修改。</li>
</ul>
</li>
<li>元数据控制模块行为，通俗点来说就是通过配置文件来操控数据（Spring）</li>
<li>约定由于配置</li>
<li>封装变化<ul>
<li>将相同的变化封装到一个接口或者类中</li>
<li>将不同的变化封装到不同的接口或者类中</li>
</ul>
</li>
</ul>
<p><strong>代码部分</strong></p>
<p>UML 图如下。</p>
<p><img src="https://s1.ax1x.com/2021/12/01/oJDIJK.png" alt="image"></p>
<p>代码如下，一个简易绘制图形的类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.designpattern.principle.ocp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (s.type == <span class="number">1</span>){</span><br><span class="line">            drawRectangle();</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(s.type == <span class="number">2</span>){</span><br><span class="line">            drawCircle();</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            drawTriangle();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形状基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>当我们想要扩展性内容，比如画一个五角星时，改动非常多，还违背了 ocp 原则！！！</p>
<p>修改如下，有点类似于依赖倒转里面的例子，这不过这里改成了抽象类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>{</span><br><span class="line">        s.draw();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形状基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.type = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="2-6-迪米特法则"><a href="#2-6-迪米特法则" class="headerlink" title="2.6 迪米特法则"></a>2.6 迪米特法则</h3><ol>
<li>一个对象应该对其他对象保持最少的了解。</li>
<li>类与类的关系越密切，耦合度越大。</li>
<li>迪米特法则（Demeter Principle）又叫最少知道原则，即<strong>一个类对自己依赖的类知道的越少越好</strong>。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息。</li>
<li>迪米特法则还有个更简单的定义，只与<code>直接的朋友</code>通信。</li>
<li><strong>直接的朋友</strong>：每个对象都会和其他对象有<strong>耦合关系</strong>，只要两个对象之间有耦合关系，那我们就说这两个对象之间是朋友关系。耦合的方式有很多中：依赖、关联、组合、聚合等。其中，我们称出现在<strong>成员变量、方法参数、方法返回值</strong>中的类为<code>直接的朋友</code>，而出现在局部变量中的类为<code>间接的朋友</code>，也就是说，<strong>陌生的类最好不要以局部变量的形式出现在类的内部</strong>。</li>
</ol>
<p><strong>代码如下</strong>，只能说是稀碎的耦合度了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> SchoolManager().printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接朋友：CollegeEmployee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployees</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            CollegeEmployee manager = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            manager.setId(i + <span class="number">1</span>);</span><br><span class="line">            list.add(manager);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接朋友：Employee，CollegeManager</span></span><br><span class="line"><span class="comment">// 间接朋友：CollegeEmployee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployees</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            Employee manager = <span class="keyword">new</span> Employee();</span><br><span class="line">            manager.setId(i + <span class="number">1</span>);</span><br><span class="line">            list.add(manager);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManager manager)</span></span>{</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = manager.getAllEmployees();</span><br><span class="line">        System.out.println(<span class="string">"----------学院员工---------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee employee : list1) {</span><br><span class="line">            System.out.print(employee.getId() + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        List&lt;Employee&gt; list2 = getAllEmployees();</span><br><span class="line">        System.out.println(<span class="string">"---------学校总部员工----------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : list2) {</span><br><span class="line">            System.out.print(employee.getId() + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>SchoolManager 违反了迪米特法则，局部变量中还包含了一个陌生的类！！！要避免类中出现这样非直接朋友关系的耦合。</p>
<p><strong>修改如下</strong>，将打印学院员工的实现放在 CollegeManager 类中，而在 SchoolEmployee 类中直接调用 CollegeManager 的打印方法即可！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> SchoolManager().printSchoolEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接朋友：CollegeEmployee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployees</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            CollegeEmployee manager = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            manager.setId(i + <span class="number">1</span>);</span><br><span class="line">            list.add(manager);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollegeManager</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = getAllEmployees();</span><br><span class="line">        System.out.println(<span class="string">"----------学院员工---------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee employee : list1) {</span><br><span class="line">            System.out.print(employee.getId() + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接朋友：Employee，CollegeManager</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployees</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            Employee manager = <span class="keyword">new</span> Employee();</span><br><span class="line">            manager.setId(i + <span class="number">1</span>);</span><br><span class="line">            list.add(manager);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printSchoolEmployee</span><span class="params">(CollegeManager manager)</span></span>{</span><br><span class="line">        manager.printCollegeManager();;</span><br><span class="line">        System.out.println();</span><br><span class="line">        List&lt;Employee&gt; list2 = getAllEmployees();</span><br><span class="line">        System.out.println(<span class="string">"---------学校总部员工----------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee employee : list2) {</span><br><span class="line">            System.out.print(employee.getId() + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h3 id="2-7-合成复用原则"><a href="#2-7-合成复用原则" class="headerlink" title="2.7 合成复用原则"></a>2.7 合成复用原则</h3><p>原则是尽量使用合成/聚合的方式，而不是使用继承已达到复用的效果。</p>
<p>通过合成复用原则来使一些已有的对象使之成为对象的一部分，一般通过组合/聚合关系来实现，而尽量不要使用继承。因为组合和聚合可以降低类之间的耦合度，而继承会让系统更加复杂，最重要的一点会破坏系统的封装性，因为继承会把基类的实现细节暴露给子类，同时如果基类变化，子类也必须跟着改变，而且耦合度会很高。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/oYuqit.png" alt=""></p>
<p><br></p>
<h2 id="3-UML-类图"><a href="#3-UML-类图" class="headerlink" title="3. UML 类图"></a>3. UML 类图</h2><p>类图是面向对象系统建模中最常用和最重要的图，是定义其它图的基础。类图主要是用来显示系统中的类、接口以及它们之间的静态结构和关系的一种静态模型。类图中最基本的元素是类、接口。软件设计师设计出类图后，程序员就可以用代码实现类图中包含的内容。</p>
<h3 id="3-1-类，接口，包"><a href="#3-1-类，接口，包" class="headerlink" title="3.1 类，接口，包"></a>3.1 类，接口，包</h3><h4 id="3-1-1-具体类"><a href="#3-1-1-具体类" class="headerlink" title="3.1.1 具体类"></a>3.1.1 具体类</h4><p>具体类在类图中用矩形框表示，矩形框分为三层：第一层是类名字；第二层是成员变量；第三层是类的方法。成员变量以及方法前的访问修饰符用符号来表示：</p>
<ul>
<li>“<strong>+</strong>” 表示 <code>public</code></li>
<li>“<strong>-</strong>” 表示 <code>private</code></li>
<li>“<strong>#</strong>” 表示 <code>protected</code></li>
<li>没有符号表示 <code>default</code></li>
</ul>
<p><img src="https://z3.ax1x.com/2021/12/02/otVKN6.png" alt="image"></p>
<h4 id="3-1-2-抽象类"><a href="#3-1-2-抽象类" class="headerlink" title="3.1.2 抽象类"></a>3.1.2 抽象类</h4><p>抽象类在UML类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示：</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otVUEt.png" alt="image"></p>
<h4 id="3-1-3-接口"><a href="#3-1-3-接口" class="headerlink" title="3.1.3 接口"></a>3.1.3 接口</h4><p>接口在类图中也是用矩形框表示，但是与类的表示法不同的是，接口在类图中的第一层顶端用构造型 &lt;\<interface\>&gt;表示，下面是接口的名字，第二层是方法，如下图所示。</interface\></p>
<p><img src="https://z3.ax1x.com/2021/12/02/otVW5V.png" alt="image"></p>
<h4 id="3-1-4-包"><a href="#3-1-4-包" class="headerlink" title="3.1.4 包"></a>3.1.4 包</h4><p>类和接口一般都出现在包中，UML类图中包的表示形式如下图所示。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otVHbR.png" alt="image"></p>
<p><br></p>
<h3 id="3-2-类图中的关系"><a href="#3-2-类图中的关系" class="headerlink" title="3.2 类图中的关系"></a>3.2 类图中的关系</h3><p>类和类、类和接口、接口和接口之间存在一定关系，UML类图中一般会有连线指明它们之间的关系。关系共有六种类型，分别是实现关系、泛化关系、关联关系、依赖关系、聚合关系、组合关系。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/oteFOJ.png" alt="image"></p>
<h4 id="3-2-1-实现关系"><a href="#3-2-1-实现关系" class="headerlink" title="3.2.1 实现关系"></a>3.2.1 实现关系</h4><p>实现关系是指接口及其实现类之间的关系。在UML类图中，实现关系用空心三角和虚线组成的箭头来表示，从实现类指向接口，如图所示。在Java代码中，实现关系可以直接翻译为关键字 <code>implements</code>。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/ote80A.png" alt="image"></p>
<h4 id="3-2-2-泛化关系"><a href="#3-2-2-泛化关系" class="headerlink" title="3.2.2 泛化关系"></a>3.2.2 泛化关系</h4><p>泛化关系（Generalization）是指对象与对象之间的继承关系。如果对象A和对象B之间的“is a”关系成立，那么二者之间就存在继承关系，对象B是父对象，对象A是子对象。例如，一个年薪制员工“is a”员工，很显然年薪制员工Salary对象和员工Employee对象之间存在继承关系，Employee对象是父对象，Salary对象是子对象。</p>
<p>在UML类图中，泛化关系用空心三角和实线组成的箭头表示，从子类指向父类，如图8所示。在Java代码中，对象之间的泛化关系可以直接翻译为关键字 <code>extends</code>。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/oter0s.png" alt="image"></p>
<h4 id="3-2-3-关联关系"><a href="#3-2-3-关联关系" class="headerlink" title="3.2.3 关联关系"></a>3.2.3 关联关系</h4><p>关联关系（Association）是指对象和对象之间的连接，它使一个对象知道另一个对象的属性和方法。在Java中，关联关系的代码表现形式为一个对象含有另一个对象的引用。也就是说，如果一个对象的类代码中，包含有另一个对象的引用，那么这两个对象之间就是关联关系。</p>
<p>关联关系有单向关联和双向关联。如果两个对象都知道（即可以调用）对方的公共属性和操作，那么二者就是双向关联。如果只有一个对象知道（即可以调用）另一个对象的公共属性和操作，那么就是单向关联。大多数关联都是单向关联，单向关联关系更容易建立和维护，有助于寻找可重用的类。</p>
<p>在UML图中，双向关联关系用带双箭头的实线或者无箭头的实线双线表示。单向关联用一个带箭头的实线表示，箭头指向被关联的对象，如图9所示。这就是导航性（Navigatity）。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otehX4.png" alt="image"></p>
<p>一个对象可以持有其它对象的数组或者集合。在UML中，通过放置多重性（multipicity）表达式在关联线的末端来表示。多重性表达式可以是一个数字、一段范围或者是它们的组合。多重性允许的表达式示例如下：</p>
<ul>
<li>数字：精确的数量</li>
<li><code>*</code>或者<code>0..*</code>：表示0到多个</li>
<li><code>0..1</code>：表示0或者1个，在Java中经常用一个空引用来实现</li>
<li><code>1..*</code>：表示1到多个</li>
</ul>
<p>关联关系又分为依赖关联、聚合关联和组合关联三种类型。</p>
<h4 id="3-2-4-依赖关系"><a href="#3-2-4-依赖关系" class="headerlink" title="3.2.4 依赖关系"></a>3.2.4 依赖关系</h4><p>依赖（Dependency）关系是一种弱关联关系。如果对象A用到对象B，但是和B的关系不是太明显的时候，就可以把这种关系看作是依赖关系。如果对象A依赖于对象B，则 A “use a” B。比如驾驶员和汽车的关系，驾驶员使用汽车，二者之间就是依赖关系。</p>
<p>在 UML 类图中，依赖关系用一个带虚线的箭头表示，由使用方指向被使用方，表示使用方对象持有被使用方对象的引用，如图所示。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otmyKe.png" alt="image"></p>
<p>依赖关系在Java中的具体代码表现形式为<strong>B为A的构造器</strong>或<strong>方法中的局部变量</strong>、<strong>方法或构造器的参数</strong>、<strong>方法的返回值</strong>，或者<strong>A调用B的静态方法</strong>。</p>
<p>下面我们用代码清单1和代码清单2所示的Java代码来演示对象和对象之间的依赖关系。</p>
<p>代码清单1所示的<code>B</code>类定义了一个成员变量 <code>field1</code>，一个普通方法 <code>method1()</code> 和一个静态方法 <code>method2()</code>。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//代码清单1 B.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>{</span><br><span class="line">  <span class="keyword">public</span> String field1;   <span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>{</span><br><span class="line">    System.println(<span class="string">"在类B的方法1中"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>{                 <span class="comment">//静态方法</span></span><br><span class="line">    System.out.println(<span class="string">"在类B的静态方法2中"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>代码清单2所示的<code>A</code>类依赖于<code>B</code>类，在<code>A</code>类中定义了四个方法，分别演示四种依赖形式。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 代码清单2 A.java</span></span><br><span class="line"><span class="comment">  A依赖于B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//A依赖于B的第一种表现形式：B为A的局部变量</span></span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    b.method1();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//A依赖于B的第二种表现形式： 调用B的静态方法</span></span><br><span class="line">    B.method2();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(B b)</span>  </span>{</span><br><span class="line">    <span class="comment">//A依赖于B的第三种表现形式：B作为A的方法参数</span></span><br><span class="line">    String s = b.field1;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//A依赖于B的第四种表现形式：B作为A的方法的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> B <span class="title">method4</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-5-聚合关系"><a href="#3-2-5-聚合关系" class="headerlink" title="3.2.5 聚合关系"></a>3.2.5 聚合关系</h4><p>聚合（Aggregation）是关联关系的一种特例，它体现的是整体与部分的拥有关系，即 “has a” 的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享，所以聚合关系也常称为共享关系。例如，公司部门与员工的关系，一个员工可以属于多个部门，一个部门撤消了，员工可以转到其它部门。</p>
<p>在UML图中，聚合关系用空心菱形加实线箭头表示，空心菱形在整体一方，箭头指向部分一方，如图11所示。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otmx2T.png" alt="image"></p>
<h4 id="3-2-6-组合关系"><a href="#3-2-6-组合关系" class="headerlink" title="3.2.6 组合关系"></a>3.2.6 组合关系</h4><p>组合（Composition）也是关联关系的一种特例，它同样体现整体与部分间的包含关系，即 “contains a” 的关系。但此时整体与部分是不可分的，部分也不能给其它整体共享，作为整体的对象负责部分的对象的生命周期。这种关系比聚合更强，也称为强聚合。如果<code>A</code>组合<code>B</code>，则<code>A</code>需要知道<code>B</code>的生存周期，即可能<code>A</code>负责生成或者释放<code>B</code>，或者<code>A</code>通过某种途径知道<code>B</code>的生成和释放。</p>
<p>例如，人包含头、躯干、四肢，它们的生命周期一致。当人出生时，头、躯干、四肢同时诞生。当人死亡时，作为人体组成部分的头、躯干、四肢同时死亡。</p>
<p>在UML图中，组合关系用实心菱形加实线箭头表示，实心菱形在整体一方，箭头指向部分一方。</p>
<p><img src="https://z3.ax1x.com/2021/12/02/otniZ9.png" alt="image"></p>
<p>在Java代码形式上，聚合和组合关系中的部分对象是整体对象的一个成员变量。但是，在实际应用开发时，两个对象之间的关系到底是聚合还是组合，有时候很难区别。在Java中，仅从类代码本身是区分不了聚合和组合的。如果一定要区分，那么如果在删除整体对象的时候，必须删掉部分对象，那么就是组合关系，否则可能就是聚合关系。从业务角度上来看，如果作为整体的对象必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。</p>
<p>例如，汽车与轮胎，汽车作为整体，轮胎作为部分。如果用在二手车销售业务环境下，二者之间就是聚合关系。因为轮胎作为汽车的一个组成部分，它和汽车可以分别生产以后装配起来使用，但汽车可以换新轮胎，轮胎也可以卸下来给其它汽车使用。如果用在驾驶系统业务环境上，汽车如果没有轮胎，就无法完成行驶任务，二者之间就是一个组合关系。再比如网上书店业务中的订单和订单项之间的关系，如果订单没有订单项，也就无法完成订单的业务，所以二者之间是组合关系。而购物车和商品之间的关系，因为商品的生命周期并不被购物车控制，商品可以被多个购物车共享，因此，二者之间是聚合关系。</p>
<p><br></p>
<h2 id="4-设计模式详解"><a href="#4-设计模式详解" class="headerlink" title="4. 设计模式详解"></a>4. 设计模式详解</h2><p>设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，<strong>模式不是代码</strong>，而是<strong>某类问题的通用解决方法</strong>，类似于算法。设计模式代表了最佳的实践，这是众多软件开发人员在经过相当长的一段时间的试验和错误总结出来的。</p>
<p>设计模式的本意是提高 <strong>软件的维护性，通用性和扩展性，并降低软件的复杂度。</strong></p>
<p>设计模式并不局限于某种语言，java，php，c++ 都有设计模式。</p>
<h3 id="4-1-设计模式类型"><a href="#4-1-设计模式类型" class="headerlink" title="4.1 设计模式类型"></a>4.1 设计模式类型</h3><p>设计模式分为三种类型，共23个。</p>
<ol>
<li><strong>创建型模式：</strong>单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。</li>
<li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>
<li><strong>行为型模式</strong>：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式。</li>
</ol>
<h3 id="4-2-单例模式"><a href="#4-2-单例模式" class="headerlink" title="4.2 单例模式"></a>4.2 单例模式</h3><p>单例模式，就是采取一定的方法保证<strong>在整个软件系统中，对某个类只能存在一个对象实例</strong>，频繁创建销毁会消耗大量资源！并且该类只提供一个取得其对象实例的方法（静态方法）。</p>
<p>而单例模式的实现方法足足有8种之多，下面就一一讲解。</p>
<h4 id="4-2-1-饿汉式（静态常量）"><a href="#4-2-1-饿汉式（静态常量）" class="headerlink" title="4.2.1 饿汉式（静态常量）"></a>4.2.1 饿汉式（静态常量）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Test1 test1 = Test1.getInstance();</span><br><span class="line">        Test1 test2 = Test1.getInstance();</span><br><span class="line">        System.out.println(test1.hashCode());</span><br><span class="line">        System.out.println(test2.hashCode());</span><br><span class="line">        System.out.println(test1 == test2);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test1 test = <span class="keyword">new</span> Test1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有的构造方法很重要！可以防止外部创建对象！</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test1</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test1 <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>优点：</p>
<ul>
<li>这种写法比较简单</li>
<li>在类装载的时候便完成了实例化，避免了线程同步的问题。</li>
<li>线程安全</li>
</ul>
<p>缺点：</p>
<ul>
<li>也正是因为在类装载的时候就完成实例化，因此无法实现懒加载的效果。</li>
<li>如果自始至终都没有使用过这个实例，那么就会造成内存的浪费。</li>
</ul>
<p>结论：这种单例模式可以使用，但可能会造成内存浪费。</p>
<h4 id="4-2-2-饿汉式（静态代码块）"><a href="#4-2-2-饿汉式（静态代码块）" class="headerlink" title="4.2.2 饿汉式（静态代码块）"></a>4.2.2 饿汉式（静态代码块）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test2 test;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test2</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        test = <span class="keyword">new</span> Test2();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test2 <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>同上不解释，仅仅是将类的实例化放在了静态代码块中。</p>
<h4 id="4-2-3-懒汉式（线程不安全）"><a href="#4-2-3-懒汉式（线程不安全）" class="headerlink" title="4.2.3 懒汉式（线程不安全）"></a>4.2.3 懒汉式（线程不安全）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test3 test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test3</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test3 <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (test == <span class="keyword">null</span>) {</span><br><span class="line">            test = <span class="keyword">new</span> Test3();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>优点：</p>
<ul>
<li>实现了懒加载的效果，避免了空间浪费。</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>如果在多线程中，可能会<strong>产生多个实例</strong>！</p>
</li>
<li><p>线程不安全</p>
</li>
</ul>
<p>结论：在实际开发中，<code>不能使用</code>这种方式！</p>
<h4 id="4-2-4-懒汉式（同步方法）"><a href="#4-2-4-懒汉式（同步方法）" class="headerlink" title="4.2.4 懒汉式（同步方法）"></a>4.2.4 懒汉式（同步方法）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test4 test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test4</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Test4 <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (test == <span class="keyword">null</span>) {</span><br><span class="line">            test = <span class="keyword">new</span> Test4();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>优点：</p>
<ul>
<li>对比上述实现，只是在方法前添加了 <code>synchronized</code> 修饰，便可以解决线程不安全的问题。</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>在多线程的情况下，必须要等前面一个线程执行完该方法，才能轮到后面的线程。</p>
</li>
<li><p>效率极其低下！</p>
</li>
</ul>
<p>结论：在实际开发中，<strong>不推荐</strong>使用这种方式。</p>
<h4 id="4-25-懒汉式（同步代码块）"><a href="#4-25-懒汉式（同步代码块）" class="headerlink" title="4.25 懒汉式（同步代码块）"></a>4.25 懒汉式（同步代码块）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test5 test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test5</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test5 <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (test == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Test5.class){</span><br><span class="line">                test = <span class="keyword">new</span> Test5();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这个 <code>synchronized</code> 完全没有用！</p>
<p>因此优缺点和 <strong>4.2.3 懒汉式</strong> 一样，甚至因为加了同步锁，性能还更差了！</p>
<p>结论：瞎搞！</p>
<h4 id="4-2-6-懒汉式（双重检查）"><a href="#4-2-6-懒汉式（双重检查）" class="headerlink" title="4.2.6 懒汉式（双重检查）"></a>4.2.6 懒汉式（双重检查）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test6</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test6 test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test6</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test6 <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (test == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Test6.class){</span><br><span class="line">                <span class="keyword">if</span> (test == <span class="keyword">null</span>){</span><br><span class="line">                    test = <span class="keyword">new</span> Test6();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Double-Check 概念是多线程开发中常使用到的，如上述代码中，我们进行了两个 <strong>if(test == null)</strong> 的检查，这样就能保证线程安全了。</p>
<p>这样，实例化代码也只执行了一次，后续访问时，判断 <strong>test != null</strong>，便会直接 return 实例化对象，也避免了反复进行方法同步。</p>
<p><code>volatile</code> 貌似是为了解决指令重拍的问题，等后续我学了 <strong>JUC</strong> 再回来研究研究。</p>
<p>优点：</p>
<ul>
<li>线程安全</li>
<li>实现懒加载</li>
<li>效率较高</li>
</ul>
<p>结论：在实际开发中，<code>推荐使用</code>这种单例模式实现方式！</p>
<h4 id="4-2-7-静态内部类"><a href="#4-2-7-静态内部类" class="headerlink" title="4.2.7 静态内部类"></a>4.2.7 静态内部类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test7</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Test7</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test7 <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> StaticInnerClass.test;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span></span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Test7 test = <span class="keyword">new</span> Test7();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p>
<p>静态内部类方式 <strong>StaticInnerClass</strong> 在 <strong>Test7</strong> 被装载时并不会立刻实例化，而是在需要实例化时，调用 <strong>getInstance</strong> 方法，这时才开始装载 <strong>StaticInnerClass</strong> 类，从而完成 Test7 的实例化。</p>
<p>优点：</p>
<ul>
<li>避免了线程不安全。</li>
<li>利用静态内部类的特点实现延迟加载，效率高。</li>
</ul>
<p>结论：<code>推荐</code>使用！</p>
<h4 id="4-2-8-枚举"><a href="#4-2-8-枚举" class="headerlink" title="4.2.8 枚举"></a>4.2.8 枚举</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Test8</span> </span>{</span><br><span class="line">    test8;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>优点：</p>
<ul>
<li>这是借助 JDK1.5 中添加的枚举来实现单例模式，避免了多线程同步问题。</li>
<li><p>防止反序列化重新创建对象。</p>
</li>
<li><p><strong>Effective Java</strong> 作者 <strong>Josh Bloch</strong> 所提倡的方式。</p>
</li>
</ul>
<p>结论：<code>推荐</code>使用！</p>
<h4 id="4-2-9-单例模式在-JDK-中的应用"><a href="#4-2-9-单例模式在-JDK-中的应用" class="headerlink" title="4.2.9 单例模式在 JDK 中的应用"></a>4.2.9 单例模式在 JDK 中的应用</h4><p>在 JDK 中，Runtime 就是典型的单例模式，还是饿汉式的！毕竟程序运行肯定会有报运行时异常的时候。</p>
<p><img src="https://z3.ax1x.com/2021/12/03/oUPJH0.png" alt="image"></p>
<h4 id="4-2-10-小结"><a href="#4-2-10-小结" class="headerlink" title="4.2.10 小结"></a>4.2.10 小结</h4><ol>
<li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li>
<li>想要实例化单例类的时候，要使用获取对象的方法，而不是 <strong>new</strong>！</li>
<li>创建单例类的时候，必须要将构造方法私有化！！！</li>
<li>单例模式使用场景：需要频繁进行创建销毁的对象、创建对象时耗时过多或耗费资源过多，但又经常用到的对象（工具类对象）以及频繁访问数据库或文件的对象（数据源、session 工厂）。</li>
</ol>
<h3 id="4-3-工厂模式"><a href="#4-3-工厂模式" class="headerlink" title="4.3 工厂模式"></a>4.3 工厂模式</h3><h4 id="4-3-1-开一家披萨店！"><a href="#4-3-1-开一家披萨店！" class="headerlink" title="4.3.1 开一家披萨店！"></a>4.3.1 开一家披萨店！</h4><p>先来看一个披萨的项目</p>
<p>1） 披萨的种类有很多（比如 GreekPizza、CheesePizza 等）</p>
<p>2） 披萨的制作流程有 prepare，bake，cut，box</p>
<p>3） 完成披萨店订购功能</p>
<p><br></p>
<p><strong>传统代码如下</strong>，披萨基类以及它的实现类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"准备"</span> + name + <span class="string">"披萨的原材料..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"烘烤"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"切割"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"打包"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreekPizza</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"希腊"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"奶酪"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PepperPizza</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"胡椒"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>披萨店类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        PizzaStore pizzaStore = <span class="keyword">new</span> PizzaStore();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            Pizza pizza = pizzaStore.orderPizza(name);</span><br><span class="line">            <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"很抱歉，本店没有"</span>+ name +<span class="string">"披萨"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>以上代码虽然也可以正常工作，可是假如哪儿天老板觉得希腊披萨卖得不好，或者要添加新口味如蛤蜊披萨，那就需要修改 <strong>orderPizza()</strong> 中的代码，违反了<code>开闭原则</code>（对修改关闭，对扩展开启）。</p>
<p>UML 如下，耦合严重。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/orVt1A.png" alt="image"></p>
<h4 id="4-3-2-简单工厂实现"><a href="#4-3-2-简单工厂实现" class="headerlink" title="4.3.2 简单工厂实现"></a>4.3.2 简单工厂实现</h4><p>没有什么是加一层不能解决的，如果有就加两层！将制作披萨单独交给披萨工厂即可，以下是简单工厂的 UML 图。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/orueLn.png" alt="image"></p>
<p><strong>代码实现</strong></p>
<p><strong>Pizza</strong> 基类和实现类没有更改，新增了 <strong>PizzaFactory</strong> 类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>PizzaStore</strong> 类，组合了 <strong>PizzaFactory</strong>，当然也可以使用聚合，后续决定使用什么工厂，亦或是使用单例工厂模式（结合上一讲）。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>{</span><br><span class="line">    <span class="comment">// 组合</span></span><br><span class="line">    PizzaFactory pizzaFactory = <span class="keyword">new</span> PizzaFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = pizzaFactory.createPizza(name);</span><br><span class="line">        <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        PizzaStore pizzaStore = <span class="keyword">new</span> PizzaStore();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            Pizza pizza = pizzaStore.orderPizza(name);</span><br><span class="line">            <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"很抱歉，本店没有"</span>+ name +<span class="string">"披萨"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这样咋一看感觉和原先差不了多少，可是目前只有一家披萨店，当有数十家披萨店时，它们也都只需要组合 <strong>PizzaFactory</strong> 即可，而不是每家各自创建披萨！！！</p>
<p><img src="https://s4.ax1x.com/2021/12/06/oruVMj.png" alt="image"></p>
<h4 id="4-3-3-添加新风味！"><a href="#4-3-3-添加新风味！" class="headerlink" title="4.3.3 添加新风味！"></a>4.3.3 添加新风味！</h4><p>各种口味的披萨我们已经会创建了，那么接下来在这基础之上再添加不同的风味，如墨西哥奶酪披萨，老北京胡椒披萨等。</p>
<p>方案一，制作多个工厂类组合到 <strong>PizzaStore</strong> 类中，不过这种方案缺陷同一开始传统代码一样，新增或减少多种风味都需要修改 <strong>PizzaStore</strong> 中的代码！</p>
<p><img src="https://s4.ax1x.com/2021/12/06/orQneA.png" alt="image"></p>
<p>方案二，再加一层！这样无论如何修改风味，<strong>PizzaStore</strong> 中的代码都绝不会再变了。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/orQeLd.png" alt="image"></p>
<p>披萨基类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"准备"</span> + name + <span class="string">"披萨的原材料..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"烘烤"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"切割"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"打包"</span> + name + <span class="string">"披萨..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>披萨实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeijingCheesePizza</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"老北京风味奶酪"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingGreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeijingGreekPizza</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"老北京风味希腊"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>BeijingPizzaFactory</strong> 类，创建老北京风味的披萨。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingPizzaFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingGreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingCheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingPepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>MexicoPizzaFactory</strong> 类，创建墨西哥风味的披萨。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MexicoPizzaFactory</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoGreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoCheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoPepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>风味披萨工厂的工厂类，创建风味披萨工厂。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String style, String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (style){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"墨西哥"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoPizzaFactory().createPizza(name);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"老北京"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingPizzaFactory().createPizza(name);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>PizzaStore</strong> 测试类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>{</span><br><span class="line">    PizzaFactory pizzaFactory = <span class="keyword">new</span> PizzaFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String style, String name)</span></span>{</span><br><span class="line">        Pizza pizza = pizzaFactory.createPizza(style, name);</span><br><span class="line">        <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        PizzaStore pizzaStore = <span class="keyword">new</span> PizzaStore();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            String style = sc.next();</span><br><span class="line">            String name = sc.next();</span><br><span class="line">            Pizza pizza = pizzaStore.orderPizza(style, name);</span><br><span class="line">            <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"很抱歉，本店没有"</span>+ style + <span class="string">"风味"</span> + name +<span class="string">"披萨"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3-4-工厂方法模式"><a href="#4-3-4-工厂方法模式" class="headerlink" title="4.3.4 工厂方法模式"></a>4.3.4 工厂方法模式</h4><p><strong>工厂方法模式：</strong>定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式<code>将对象的实例化推迟到子类</code>。（这里将 <strong>orderPizza()</strong> 方法创建在工厂基类中，便于学习该模式效果）</p>
<p><strong>工厂方法模式设计方案：</strong>将披萨项目的实例化功能抽象成抽象方法，在不同的口味子类中具体实现。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/oy00y9.png" alt="image"></p>
<p>披萨店 UML 如下。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/osFtHS.png" alt="image"></p>
<p>工厂基类，<strong>createPizza()</strong> 方法等子类来实现，可以在<strong>orderPizza()</strong> 中先用起来。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止子类重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Pizza <span class="title">orderPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = createPizza(name);</span><br><span class="line">        <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>工厂子类，实现对象的实例化。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeijingPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingGreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingCheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> BeijingPepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MexicoPizzaFactory</span> <span class="keyword">extends</span> <span class="title">PizzaFactory</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoGreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoCheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoPepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>PizzaStore</strong> 测试类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PizzaFactory pizzaFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">            String style = sc.next();</span><br><span class="line">            String name = sc.next();</span><br><span class="line">            <span class="keyword">switch</span> (style){</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"墨西哥"</span>:</span><br><span class="line">                    pizzaFactory = <span class="keyword">new</span> MexicoPizzaFactory();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"老北京"</span>:</span><br><span class="line">                    pizzaFactory = <span class="keyword">new</span> BeijingPizzaFactory();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            pizza = pizzaFactory.orderPizza(name);</span><br><span class="line">            <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"很抱歉，本店没有"</span>+ style + <span class="string">"风味"</span> + name +<span class="string">"披萨"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3-5-抽象工厂模式"><a href="#4-3-5-抽象工厂模式" class="headerlink" title="4.3.5 抽象工厂模式"></a>4.3.5 抽象工厂模式</h4><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要指定具体类。</p>
<p>抽象工厂允许客户使用抽象的接口来创建<code>一组</code>相关的产品，而不需要知道（或关心）实际产出的具体产品是什么。这样一来，客户就从具体的产品中被解耦。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/oy0WSe.png" alt="image"></p>
<p>风味披萨店修改如下，为所有工厂添加抽象类（接口）。</p>
<p><img src="https://s4.ax1x.com/2021/12/06/oy09Re.png" alt="image"></p>
<p>抽象工厂类（接口）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaFactory</span> </span>{</span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>实现工厂类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MexicoPizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>{</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"希腊"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoGreekPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"奶酪"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoCheesePizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"胡椒"</span>:</span><br><span class="line">                pizza = <span class="keyword">new</span> MexicoPepperPizza();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>{</span><br><span class="line">    <span class="comment">// 聚合</span></span><br><span class="line">    <span class="keyword">private</span> PizzaFactory pizzaFactory;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 采用依赖翻转</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPizzaFactory</span><span class="params">(PizzaFactory pizzaFactory)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.pizzaFactory = pizzaFactory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type, String name)</span></span>{</span><br><span class="line">        <span class="keyword">switch</span> (type){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"墨西哥"</span>:</span><br><span class="line">                setPizzaFactory(<span class="keyword">new</span> MexicoPizzaFactory());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"老北京"</span>:</span><br><span class="line">                setPizzaFactory(<span class="keyword">new</span> BeijingPizzaFactory());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        Pizza pizza = pizzaFactory.createPizza(name);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">            String style = sc.next();</span><br><span class="line">            String name = sc.next();</span><br><span class="line">            PizzaStore pizzaStore = <span class="keyword">new</span> PizzaStore();</span><br><span class="line">            pizza = pizzaStore.orderPizza(style, name);</span><br><span class="line">            <span class="keyword">if</span> (pizza == <span class="keyword">null</span>){</span><br><span class="line">                System.out.println(<span class="string">"很抱歉，本店没有"</span>+ style + <span class="string">"风味"</span> + name +<span class="string">"披萨"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="4-3-6-工厂方法模式-vs-抽象工厂模式"><a href="#4-3-6-工厂方法模式-vs-抽象工厂模式" class="headerlink" title="4.3.6 工厂方法模式 vs 抽象工厂模式"></a>4.3.6 工厂方法模式 vs 抽象工厂模式</h4><ol>
<li><p><strong>产品 vs 产品集</strong></p>
<ul>
<li>工厂方法模式一般用于生产一个产品。</li>
<li>抽象工厂模式一般用于生成一个产品家族。</li>
</ul>
</li>
<li><p><strong>继承 vs 组合</strong></p>
<ul>
<li><p>工厂方法模式依赖继承来决定生产什么产品，在工厂实现类中不仅有用于创建产品的方法（实现父类的抽象方法），还有其它方法。</p>
<p>因此，我们必须创建一个完整的工厂实现类来创建一个新的不同的产品，而不可能创建一个独立的用于生产产品的专用类。</p>
</li>
<li><p>而在抽象工厂模式中，有一个专门的类用于创建一系列相关的产品，它的子类工厂对象可以传递给使用它的客户端（组合）。由此，客户端可以获得一个不同的对象（工厂）来创建产品，而不是像工厂方法创建自己（例如使用 factoryMethod() 强制继承）。</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// factory method</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anOperation</span><span class="params">()</span> </span>{</span><br><span class="line">        Product p = Factorymethod();</span><br><span class="line">        p.dosomething();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Product <span class="title">FactoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newclient</span> <span class="keyword">extends</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">Factorymethod</span><span class="params">()</span> </span>{	<span class="comment">// overriding</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> specificProduct();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract factory</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Factory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">client</span><span class="params">(Factory factory)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anOperation</span><span class="params">()</span> </span>{</span><br><span class="line">        Product p = factory.createProductA();</span><br><span class="line">        p.dosomething();	<span class="comment">// other products and operations as well</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>{</span><br><span class="line">    <span class="function">Producta <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Productb <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// concrete factories also, implementing factory interface</span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>方法 vs 对象</strong></li>
</ol>
<ul>
<li>工厂方法仅仅只是个方法，但含有工厂方法的类并不只能创建产品，它还做其他的工作。</li>
<li>而抽象工厂唯一的任务就是创建一个产品家族。</li>
</ul>
<h4 id="4-3-7-单例模式在-JDK-中的应用"><a href="#4-3-7-单例模式在-JDK-中的应用" class="headerlink" title="4.3.7 单例模式在 JDK 中的应用"></a>4.3.7 单例模式在 JDK 中的应用</h4><p>简单工厂应用</p>
<p><img src="https://s4.ax1x.com/2021/12/08/o2UUV1.png" alt="image"></p>
<h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4><h4 id="4-3-8-工厂模式小结"><a href="#4-3-8-工厂模式小结" class="headerlink" title="4.3.8 工厂模式小结"></a>4.3.8 工厂模式小结</h4><p>工厂模式就是将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦，从而提高项目的扩展和可维护性。</p>
<h3 id="4-4-原型模式"><a href="#4-4-原型模式" class="headerlink" title="4.4 原型模式"></a>4.4 原型模式</h3><h4 id="4-4-1-克隆羊问题"><a href="#4-4-1-克隆羊问题" class="headerlink" title="4.4.1 克隆羊问题"></a>4.4.1 克隆羊问题</h4><p>现在有一只羊，姓名为:tom，年龄为：1，颜色为：白色，请编写程序创建和 tom 羊属性完全相同的 10 只羊。</p>
<p><strong>传统代码</strong>如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        Sheep sheep1 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep2 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep3 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep4 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep5 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep6 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep7 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep8 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep9 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        Sheep sheep10 = <span class="keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>优点</strong>：</p>
<ul>
<li>便于理解，简单易操作。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>创建对象总是需要获取原始对象的属性，如果原对象有几十个属性呢？</li>
<li>总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活。</li>
</ul>
<h4 id="4-4-2-克隆技术的使用"><a href="#4-4-2-克隆技术的使用" class="headerlink" title="4.4.2 克隆技术的使用"></a>4.4.2 克隆技术的使用</h4><p>在 Java 中 Object 类是所有类的根类，Object 类提供了一个 <strong>clone()</strong> 方法，该方法可以将一个 Java 对象复制一份，但是需要实现一个接口 <code>Cloneable</code>，该接口表示该类能够复制且具有复制的能力，这就是原型模式。</p>
<p>Object 中的 <strong>clone()</strong> 方法。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// native关键字说明其修饰的方法是一个原生态方法，方法对应的实现不是在当前文件，而是在用其他语言（如C和C++）实现的文件中。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>假如不实现 <strong>Cloneable</strong> 接口就调用 <strong>clone()</strong> 会怎么样呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 未实现Cloneable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试如下，<code>CloneNotSupportedException</code> 不支持克隆异常。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line"></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.CloneNotSupportedException: </span><br></pre></td></tr></tbody></table></figure>
<p>所以还是老老实实加上吧。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>{}</span><br></pre></td></tr></tbody></table></figure>
<p>测试，<strong>clone()</strong> 会自动复制对象属性到新的对象上。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.hashCode());		<span class="comment">// 1836019240</span></span><br><span class="line">        System.out.println(sheep1.hashCode());		<span class="comment">// 325040804</span></span><br><span class="line">        <span class="comment">// 判断地址</span></span><br><span class="line">        System.out.println(sheep == sheep1);		<span class="comment">// false</span></span><br><span class="line">        <span class="comment">//重写equals方法用于判断两个对象的属性值是否相等</span></span><br><span class="line">        System.out.println(sheep.equals(sheep1));	<span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-4-3-克隆羊的克隆羊朋友"><a href="#4-4-3-克隆羊的克隆羊朋友" class="headerlink" title="4.4.3 克隆羊的克隆羊朋友"></a>4.4.3 克隆羊的克隆羊朋友</h4><p>有时克隆羊会觉得只有一个人很孤单，因此我们要给它找个朋友。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> Sheep friend;	<span class="comment">// 克隆羊朋友</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试，克隆羊朋友会不会克隆呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(<span class="keyword">new</span> Sheep(<span class="string">"friend"</span>, <span class="number">2</span>, <span class="string">"black"</span>));</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.getFriend().hashCode());	<span class="comment">// 1836019240</span></span><br><span class="line">        System.out.println(sheep1.getFriend().hashCode());	<span class="comment">// 1836019240</span></span><br><span class="line">        System.out.println(sheep.getFriend() == sheep1.getFriend());	<span class="comment">// true</span></span><br><span class="line">        System.out.println(sheep.getFriend().equals(sheep1.getFriend()));	<span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>显然，这里克隆羊朋友只是复制了引用而已，俗称<code>浅拷贝</code>。</p>
<p>但浅拷贝虽然效率高了（对于引用类型只需要复制引用），但它也带来了另外的问题，如下述代码所示。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(<span class="keyword">new</span> Sheep(<span class="string">"friend"</span>, <span class="number">2</span>, <span class="string">"black"</span>));</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        sheep.getFriend().setName(<span class="string">"renamed friend"</span>);</span><br><span class="line">        System.out.println(sheep1.getFriend().getName());	<span class="comment">// renamed friend</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>当更改原克隆羊的克隆羊朋友名字时，新克隆羊的克隆羊朋友名字也发生了更改，有的时候我们并不希望看到这样！这就引出了<code>深拷贝</code>。</p>
<h4 id="4-4-4-赋值-vs-浅拷贝-vs-深拷贝"><a href="#4-4-4-赋值-vs-浅拷贝-vs-深拷贝" class="headerlink" title="4.4.4 赋值 vs 浅拷贝 vs 深拷贝"></a>4.4.4 赋值 vs 浅拷贝 vs 深拷贝</h4><p><strong>赋值：</strong></p>
<p>当我们把一个对象赋值给一个新的变量时，<strong>赋的其实是该对象的在栈中的地址，而不是堆中的数据</strong>。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p>
<p><strong>浅拷贝：</strong></p>
<p>浅拷贝是按位拷贝对象，<strong>它会创建一个新对象</strong>，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</p>
<p><strong>深拷贝：</strong></p>
<p>而深拷贝则不同，它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法<strong>递归复制</strong>到新对象上。</p>
<p><img src="https://s4.ax1x.com/2021/12/08/oR92mq.png" alt="image"></p>
<h4 id="4-4-5-实现深拷贝"><a href="#4-4-5-实现深拷贝" class="headerlink" title="4.4.5 实现深拷贝"></a>4.4.5 实现深拷贝</h4><p><strong>方案一</strong>：重写 <strong>clone()</strong> 方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">    Sheep sheepClone = (Sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">    <span class="comment">// 如果有克隆羊朋友，则对克隆羊朋友进行clone()</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.friend != <span class="keyword">null</span>){</span><br><span class="line">        sheepClone.setFriend((Sheep) <span class="keyword">this</span>.friend.clone());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sheepClone;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试如下，这下原克隆羊的克隆羊朋友也被克隆成了一个新的对象（绕口令）。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(<span class="keyword">new</span> Sheep(<span class="string">"friend"</span>, <span class="number">2</span>, <span class="string">"friend"</span>));</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.getFriend().hashCode());	<span class="comment">// 1836019240</span></span><br><span class="line">        System.out.println(sheep1.getFriend().hashCode());	<span class="comment">// 325040804</span></span><br><span class="line">        System.out.println(sheep.getFriend() == sheep1.getFriend());	<span class="comment">// false</span></span><br><span class="line">        System.out.println(sheep.getFriend().equals(sheep1.getFriend()));	<span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// extra</span></span><br><span class="line">        <span class="comment">// test String</span></span><br><span class="line">        System.out.println(sheep.getName().hashCode());	<span class="comment">// 115026</span></span><br><span class="line">        System.out.println(sheep1.getName().hashCode());	<span class="comment">// 115026</span></span><br><span class="line">        System.out.println(sheep.getName() == sheep1.getName());	<span class="comment">// true</span></span><br><span class="line">        System.out.println(sheep.getName().equals(sheep1.getName()));	<span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>缺点</strong>：</p>
<p>每有一个引用类型就要单独进行一次 <strong>clone()</strong> 操作，非常麻烦！而且如果引用类型中的属性还有引用类型的话，就还得再写一层，所以这种方式也叫<code>二重浅拷贝</code>。</p>
<p>&lt;% note success %&gt;这里 Sheep 类的 name 是 String 类型的，虽然 String 虽然也是引用类型，但它并没有实现 <strong>Cloneable</strong> 接口，不能进行深拷贝，只能浅拷贝，因此地址都是一样的！&lt;% endnote %&gt;</p>
<p>但如果有一只克隆羊觉得它不需要朋友，它唯一的朋友就是自己。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(sheep);</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.getFriend().hashCode());</span><br><span class="line">        System.out.println(sheep1.getFriend().hashCode());</span><br><span class="line">        System.out.println(sheep.getFriend() == sheep1.getFriend());</span><br><span class="line">        System.out.println(sheep.getFriend().equals(sheep1.getFriend()));  </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这时再进行 <strong>clone()</strong>，由于会不断进行递归，而且没有尽头！！！不一会儿就会抛出 <code>StackOverFlowError</code> 栈溢出错误，必须要避免这种情况，不要把引用指向自己！</p>
<p><br></p>
<p><strong>方案二</strong>：序列化 + 反序列化（要实现序列化接口）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        Sheep sheepClone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            sheepClone = (Sheep) ois.readObject();</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                ois.close();</span><br><span class="line">                bis.close();</span><br><span class="line">                oos.close();</span><br><span class="line">                bos.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sheepClone;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试如下，同样能很好地将引用类型进行深拷贝。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(<span class="keyword">new</span> Sheep(<span class="string">"friend"</span>, <span class="number">2</span>, <span class="string">"friend"</span>));</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.getFriend().hashCode());	<span class="comment">// 1627674070</span></span><br><span class="line">        System.out.println(sheep1.getFriend().hashCode());	<span class="comment">// 1531448569</span></span><br><span class="line">        System.out.println(sheep.getFriend() == sheep1.getFriend());	<span class="comment">// false</span></span><br><span class="line">        System.out.println(sheep.getFriend().equals(sheep1.getFriend()));	<span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>而且由于不会使用递归进行深拷贝，即使引用类型指向自己也不会发生栈溢出的错误！</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepClone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>{</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"white"</span>);</span><br><span class="line">        sheep.setFriend(sheep);</span><br><span class="line">        Sheep sheep1 = (Sheep) sheep.clone();</span><br><span class="line">        System.out.println(sheep.getFriend().hashCode());	<span class="comment">// 312714112</span></span><br><span class="line">        System.out.println(sheep1.getFriend().hashCode());	<span class="comment">// 1595428806</span></span><br><span class="line">        System.out.println(sheep.getFriend() == sheep1.getFriend());	<span class="comment">// false</span></span><br><span class="line">        System.out.println(sheep.getFriend().equals(sheep1.getFriend()));	<span class="comment">// true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-4-6-原型模式在-Spring-中的应用"><a href="#4-4-6-原型模式在-Spring-中的应用" class="headerlink" title="4.4.6 原型模式在 Spring 中的应用"></a>4.4.6 原型模式在 Spring 中的应用</h4><p>Spring 中可以配置 bean 的作用域是原型还是单例，默认单例。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.yqx.pojo.User"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://s1.ax1x.com/2021/12/09/ofCc2F.png" alt="image"></p>
<h4 id="4-4-7-小结"><a href="#4-4-7-小结" class="headerlink" title="4.4.7 小结"></a>4.4.7 小结</h4><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<p>不过缺点就是，需要为每一个类都实现一个克隆方法，当然，这对一个全新的类来说不是很难，但对已有的类进行改造时，就需要修改其源代码，这违背了 <strong>ocp</strong> 原则！</p>
<h3 id="4-5-建造者模式"><a href="#4-5-建造者模式" class="headerlink" title="4.5 建造者模式"></a>4.5 建造者模式</h3><h4 id="4-5-1-盖房项目需求"><a href="#4-5-1-盖房项目需求" class="headerlink" title="4.5.1 盖房项目需求"></a>4.5.1 盖房项目需求</h4><p>1） 建房子过程：打地基，砌墙面，盖房顶。</p>
<p>2） 房子样式：瓦房，高楼，别墅等…</p>
<p><strong>传统思路：</strong></p>
<p><img src="https://s1.ax1x.com/2021/12/09/ofiwt0.png" alt="image"></p>
<p><strong>代码实现</strong>，盖房基类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouse</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>{</span><br><span class="line">        buildBase();</span><br><span class="line">        buildWall();</span><br><span class="line">        buildRoof();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"普通房打地基"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"普通房盖房顶"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"普通房砌墙面"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuilding</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"高楼打地基"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"高楼盖房顶"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"高楼砌墙面"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        AbstractHouse house = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        house.build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>优点：</strong></p>
<ul>
<li>好理解，简单易操作</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>设计的程序结构过于简单，没有设计缓存层对象，程序的扩展和维护不好。</li>
<li>这种设计方案将产品（房子）和创建产品的过程（盖房）封装在一起，耦合性增强了。</li>
</ul>
<p><strong>改进</strong>：</p>
<ul>
<li>将产品和产品建造过程进行结构 —&gt; <strong>建造者模式</strong></li>
</ul>
<h4 id="4-5-2-建造者模式"><a href="#4-5-2-建造者模式" class="headerlink" title="4.5.2 建造者模式"></a>4.5.2 建造者模式</h4><p>建造者模式（Builder Pattern）又叫<strong>生成器模式</strong>，是一种对象构建模式，它可以将复杂对象的建造过程抽象出来，使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p>
<p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</p>
<p>建造者模式拥有四个角色</p>
<ol>
<li>Product（产品角色）：一个具体的产品对象。</li>
<li>Builder（抽象建造者）：创建 <strong>Product</strong> 对象的各个部件指定的 <strong>接口/抽象类</strong>。</li>
<li>ConcreteBuilder（具体建造者）：实现接口，构建和装配各个部件。</li>
<li>Director（指挥者）：构建一个使用 Builder 接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</li>
</ol>
<p><strong>UML</strong> 图如下</p>
<p><img src="https://s1.ax1x.com/2021/12/09/ofJgzD.png" alt="image"></p>
<p>产品角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String base;</span><br><span class="line">    <span class="keyword">private</span> String roof;</span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>抽象建造者</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouseBuilder</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造流程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造完毕，返回产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>具体建造者</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouseBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractHouseBuilder</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setBase(<span class="string">"10m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房打地基"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setRoof(<span class="string">"red"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房盖房顶"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setWall(<span class="string">"10cm"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房砌墙面"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuildingBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractHouseBuilder</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBase</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setBase(<span class="string">"20m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼打地基"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoof</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setRoof(<span class="string">"transparent"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼盖房顶"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWall</span><span class="params">()</span> </span>{</span><br><span class="line">        house.setWall(<span class="string">"20cm"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼砌墙面"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>指挥者</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> AbstractHouseBuilder houseBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(AbstractHouseBuilder houseBuilder)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(AbstractHouseBuilder houseBuilder)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如何处理建造房子的流程，交给指挥者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">constructHouse</span><span class="params">()</span></span>{</span><br><span class="line">        houseBuilder.buildBase();</span><br><span class="line">        houseBuilder.buildWall();</span><br><span class="line">        houseBuilder.buildRoof();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>客户端</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(<span class="keyword">new</span> CommonHouseBuilder());</span><br><span class="line">        System.out.println(houseDirector.constructHouse());</span><br><span class="line">        houseDirector.setHouseBuilder(<span class="keyword">new</span> HighBuildingBuilder());</span><br><span class="line">        System.out.println(houseDirector.constructHouse());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>优点</strong>：</p>
<ul>
<li>将一个复杂对象的创建过程封装起来。</li>
<li>允许对象通过多个步骤来创建，并且可以改变过程（这和只有一个步骤的工厂模式不同）。</li>
<li>向客户端隐藏产品内部的实现。</li>
<li>产品的实现可以被替换，因为用户只看到一个抽象的接口。</li>
</ul>
<p><strong>用途</strong>：</p>
<ul>
<li>经常被用来创建组合结构。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>和工厂模式相比，采用建造者模式创建对象的客户，需要具备更多的领域知识。</li>
</ul>
<h4 id="4-5-3-建造者模式在-JDK-中的应用"><a href="#4-5-3-建造者模式在-JDK-中的应用" class="headerlink" title="4.5.3 建造者模式在 JDK 中的应用"></a>4.5.3 建造者模式在 JDK 中的应用</h4><p>拿 <strong>StringBuilder</strong> 举例。</p>
<p><strong>Appendable</strong> 接口定义了多个 append 方法（抽象方法），扮演抽象建造者的身份，定义了抽象方法。</p>
<p><img src="https://s1.ax1x.com/2021/12/09/ofdTFs.png" alt="image"></p>
<p><strong>AbstractStringBuilder</strong> 实现了 <strong>Appendable</strong> 接口，扮演者建造者的身份，但由于是抽象类，并不能实例化。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>{</span><br><span class="line">        ensureCapacityInternal(count + <span class="number">1</span>);</span><br><span class="line">        value[count++] = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>StringBuilder</strong> 充当了指挥者的角色，同时也是具体的建造者，建造方法的实现室友 <strong>AbstractStringBuilder</strong> 实现，而 <strong>StringBuilder</strong> 继承了 <strong>AbstractStringBuilder</strong>。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.append(c);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-5-4-抽象工厂模式-vs-建造者模式"><a href="#4-5-4-抽象工厂模式-vs-建造者模式" class="headerlink" title="4.5.4 抽象工厂模式 vs 建造者模式"></a>4.5.4 抽象工厂模式 vs 建造者模式</h4><ul>
<li><p>抽象工厂模式实现对产品家族的创建，一个产品家族是一系列产品，具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p>
</li>
<li><p>而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品！</p>
</li>
</ul>
<h4 id="4-5-5-小结"><a href="#4-5-5-小结" class="headerlink" title="4.5.5 小结"></a>4.5.5 小结</h4><ol>
<li>客户端使用程序不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li>
<li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者。用户使用不同的具体建造者就可以得到不同的产品对象。</li>
<li>可以更加精细地控制产品的创建过程，将复杂的创建过程分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li>
<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</li>
<li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li>
<li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式。</li>
</ol>
<h3 id="4-6-适配器模式"><a href="#4-6-适配器模式" class="headerlink" title="4.6 适配器模式"></a>4.6 适配器模式</h3><p>适配器模式将某个类的接口转换为客户端期望的另一个接口表示，主要目的是兼容性。让原本因接口不匹配的两个类可以协同工作，别名包装器。</p>
<p>适配器主要有三种实现方式：类适配器模式、对象适配器模式、接口适配器模式。</p>
<p>以生活中充电器的例子来说明适配器模式，充电器本身相当于 <strong>Adapter</strong>，220V 交流电 相当于 <strong>src</strong>（被适配者），而我们的目标 <strong>dst</strong> 是 5V 直流电。</p>
<h4 id="4-6-1-类适配器"><a href="#4-6-1-类适配器" class="headerlink" title="4.6.1 类适配器"></a>4.6.1 类适配器</h4><p><img src="https://s4.ax1x.com/2021/12/14/ojivPx.png" alt="image"></p>
<p>220V，需要被适配的类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 被适配类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(<span class="string">"输出"</span> + src + <span class="string">"V..."</span>);</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>5V，适配的目标。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 适配目标</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>20V，也是适配的目标。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 适配目标</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage20V</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output20V</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>适配器，将 220V 交流电转化为各种直流电。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span>, <span class="title">IVoltage20V</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> src = output220V();</span><br><span class="line">        <span class="keyword">int</span> dst = src / <span class="number">44</span>; <span class="comment">// 转成5V</span></span><br><span class="line">        System.out.println(<span class="string">"转换为"</span> + dst + <span class="string">"V..."</span>);</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output20V</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> src = output220V();</span><br><span class="line">        <span class="keyword">int</span> dst = src/<span class="number">11</span>; <span class="comment">// 转成20V</span></span><br><span class="line">        System.out.println(<span class="string">"转换为"</span> + dst + <span class="string">"V快充..."</span>);</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>手机，使用目标的类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (iVoltage5V.output5V() == <span class="number">5</span>){</span><br><span class="line">            System.out.println(<span class="string">"电压为5V，可以充电~~"</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"电压不为5V，不能充电~~"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chargingFast</span><span class="params">(IVoltage20V iVoltage20V)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (iVoltage20V.output20V() == <span class="number">20</span>){</span><br><span class="line">            System.out.println(<span class="string">"电压为20V，可以进行快充~~"</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            System.out.println(<span class="string">"电压不为20V，不能进行快充，将自动转换为普通充电~~"</span>);</span><br><span class="line">            charging((VoltageAdapter)iVoltage20V);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类，调用充电方法只需要传入 <strong>VoltageAdapter</strong> 适配器对象即可。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Phone().charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">        <span class="keyword">new</span> Phone().chargingFast(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>优点</strong>：</p>
<ul>
<li>由于继承了 src 类，所以它可以根据需求重写 src 类的方法，使得 <strong>Adapter</strong> 的灵活性增强。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>Java 是单继承机制，所以类适配器需要继承 src 类从这一点来说算是一个缺点，因为这要求 dst 必须是接口，有一定的局限性。</li>
<li>src 类中的方法在 <strong>Adapter</strong> 中都会暴露出来，增加使用的成本。</li>
</ul>
<h4 id="4-6-2-对象适配器"><a href="#4-6-2-对象适配器" class="headerlink" title="4.6.2 对象适配器"></a>4.6.2 对象适配器</h4><p>不是采用继承的方式，而是使用组合（聚合）。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span>, <span class="title">IVoltage20V</span> </span>{</span><br><span class="line">    Voltage220V voltage220V = <span class="keyword">new</span> Voltage220V();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> src = voltage220V.output220V();</span><br><span class="line">        <span class="keyword">int</span> dst = src / <span class="number">44</span>; <span class="comment">// 转成5V</span></span><br><span class="line">        System.out.println(<span class="string">"转换为"</span> + dst + <span class="string">"V..."</span>);</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output20V</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> src = voltage220V.output220V();</span><br><span class="line">        <span class="keyword">int</span> dst = src/<span class="number">11</span>; <span class="comment">// 转成20V</span></span><br><span class="line">        System.out.println(<span class="string">"转换为"</span> + dst + <span class="string">"V快充..."</span>);</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对象适配器和类适配器其实是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，使用成本更低也更灵活，解决了类适配器必须继承 <strong>src</strong> 的局限性问题，也不再要求 <strong>dst</strong> 必须是接口。</p>
<h4 id="4-6-3-接口适配器"><a href="#4-6-3-接口适配器" class="headerlink" title="4.6.3 接口适配器"></a>4.6.3 接口适配器</h4><p>实现接口就需要实现其中的所有方法，但很多时候我们只需要使用到其中一两个方法而已，再重写所有方法就显得有些多此一举了，这也就引出了接口适配器。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 仅仅只想实现一个鼠标的点击事件却要把移入移出等方法都要实现一遍，代码看起来也会比较冗长。</span></span><br><span class="line"><span class="keyword">new</span> MouseListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了接口适配器就可以实现指定的方法了</span></span><br><span class="line"><span class="keyword">new</span> MouseAdapter(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.mouseClicked(e);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>不过接口适配器并不是什么很高大上的思想，只是加了一层抽象类来对方法进行空实现。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 实现了MouseListener接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseAdapter</span> <span class="keyword">implements</span> <span class="title">MouseListener</span>, <span class="title">MouseWheelListener</span>, <span class="title">MouseMotionListener</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseWheelMoved</span><span class="params">(MouseWheelEvent e)</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * {<span class="doctag">@inheritDoc</span>}</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span></span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>抽象类空实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">new</span> AbsAdapter(){</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.m1();</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Interface(){</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>{</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-6-4-适配器模式在-Spring-Mvc中的应用"><a href="#4-6-4-适配器模式在-Spring-Mvc中的应用" class="headerlink" title="4.6.4 适配器模式在 Spring Mvc中的应用"></a>4.6.4 适配器模式在 Spring Mvc中的应用</h4><p><img src="https://s4.ax1x.com/2021/12/14/ojIluD.png" alt="image"></p>
<p><img src="https://s4.ax1x.com/2021/12/14/ojIU8P.png" alt="image"></p>
<p><img src="https://s4.ax1x.com/2021/12/14/ojIyUs.png" alt="image"></p>
<p>可能看着会觉得多此一举，一开始就获取了处理器，为什么不直接调用它的方法呢？这是因为适配器调用处理器的方法可以添加<strong>适配功能</strong>使得被使用者所需要。</p>
<ul>
<li>Spring 定义了一个适配接口，使得每一种 Controller 都有一个对应的适配器实现类</li>
<li>适配器代替 Controller 执行响应的方法</li>
<li>扩展 Controller 时，只需要增加一个适配器的类就完成了 SpringMVC 的扩展。</li>
</ul>
<h4 id="4-6-5-模拟-HandlerAdapter-的实现"><a href="#4-6-5-模拟-HandlerAdapter-的实现" class="headerlink" title="4.6.5 模拟 HandlerAdapter 的实现"></a>4.6.5 模拟 HandlerAdapter 的实现</h4><p>Controller 处理器类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然抽象类汇总没有方法，但可以使得各个子类可以多态使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHttpHandler</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"http..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSimpleHandler</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"simple..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnnotationHandler</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"annotation..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Adapter 适配器类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>{</span><br><span class="line">    <span class="comment">// 检测适配器和处理器是否支持</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;</span><br><span class="line">    <span class="comment">// 调用并执行处理器方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> HttpController;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        ((HttpController)handler).doHttpHandler();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> SimpleController;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        ((SimpleController)handler).doSimpleHandler();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> handler <span class="keyword">instanceof</span> AnnotationController;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>{</span><br><span class="line">        ((AnnotationController)handler).doAnnotationHandler();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>DispatcherServlet 分发器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> </span>{</span><br><span class="line">    <span class="comment">// 所有适配器集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HandlerAdapter&gt; handlerAdapters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> AnnotationAdapter());</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> SimpleAdapter());</span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> HttpAdapter());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟SpringMVC从request取handler的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(Controller controller)</span></span>{</span><br><span class="line">        <span class="comment">// 获取处理器对应的适配器</span></span><br><span class="line">        HandlerAdapter adapter = getHandler(controller);</span><br><span class="line">        <span class="comment">// 适配器调用并执行处理器</span></span><br><span class="line">        adapter.handle(controller);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 遍历适配器集合，找到兼容该处理器的适配器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">getHandler</span><span class="params">(Controller controller)</span></span>{</span><br><span class="line">        <span class="keyword">for</span> (HandlerAdapter handlerAdapter : handlerAdapters) {</span><br><span class="line">            <span class="keyword">if</span> (handlerAdapter.supports(controller)){</span><br><span class="line">                <span class="keyword">return</span> handlerAdapter;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        DispatcherServlet servlet = <span class="keyword">new</span> DispatcherServlet();</span><br><span class="line">        servlet.doDispatch(<span class="keyword">new</span> HttpController());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-6-6-小结"><a href="#4-6-6-小结" class="headerlink" title="4.6.6 小结"></a>4.6.6 小结</h4><ul>
<li>类适配器：以类给到，在 <strong>Adapter</strong> 中，就是将 src 当做类，<strong>继承</strong>。</li>
<li>对象适配器：以对象给到，在 <strong>Adapter</strong> 中，就是将 src 当做对象，<strong>持有</strong>。</li>
<li>接口适配器：以接口给到，在 <strong>Adapter</strong> 中，就是将 src 当做接口，<strong>实现</strong>。</li>
</ul>
<p><strong>Adapter</strong> 模式最大的作用还是将原本不兼容的接口融合在一起工作。</p>
<p>实际开发中，实现起来不拘泥于以上三种经典方式。</p>
<h3 id="4-7-桥接模式"><a href="#4-7-桥接模式" class="headerlink" title="4.7 桥接模式"></a>4.7 桥接模式</h3><h4 id="4-7-1-基本介绍"><a href="#4-7-1-基本介绍" class="headerlink" title="4.7.1 基本介绍"></a>4.7.1 基本介绍</h4><p>1） 桥接模式（Bridge）是指：将<strong>实现</strong>和抽象放在两个不同的类层次中，使两个层次可以独立改变。</p>
<p>2） 桥接模式是一种结构型设计模式。</p>
<p>3） 桥接模式基于<code>类的最小设计原则</code>，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把<strong>抽象</strong>与<strong>实现</strong>分离开来，从而可以保持各部分的独立性以及对他们的功能拓展。</p>
<h4 id="4-7-2-手机拓展问题"><a href="#4-7-2-手机拓展问题" class="headerlink" title="4.7.2 手机拓展问题"></a>4.7.2 手机拓展问题</h4><p>使用桥接模式改进传统方式，让程序具有更好的拓展性，利于程序维护。</p>
<p><img src="https://s4.ax1x.com/2021/12/25/TUeIJO.png" alt="image"></p>
<p>传统方式需要 m（手机样式） * n（手机品牌） 个类，极易产生类爆炸的问题，而且每新增一个手机样式就又要增加 n 个类，拓展极其繁琐。</p>
<p>而采用了桥接模式之后，可以将 m * n 降为 m + n，平方降线性。</p>
<h4 id="4-7-3-代码实现"><a href="#4-7-3-代码实现" class="headerlink" title="4.7.3 代码实现"></a>4.7.3 代码实现</h4><p>UML 图如下</p>
<p><img src="https://s4.ax1x.com/2021/12/25/TU6lJP.png" alt="image"></p>
<p>样式基类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStyle</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>样式接口类（此处可以省略）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFold</span> <span class="keyword">extends</span> <span class="title">IStyle</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISpread</span> <span class="keyword">extends</span> <span class="title">IStyle</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStand</span> <span class="keyword">extends</span> <span class="title">IStyle</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>样式实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoldStyle</span> <span class="keyword">implements</span> <span class="title">IFold</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机折叠"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"折叠手机开机"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"折叠手机关机"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpreadStyle</span> <span class="keyword">implements</span> <span class="title">ISpread</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机旋转"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"旋转手机开机"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"旋转手机关机"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandStyle</span> <span class="keyword">implements</span> <span class="title">IStand</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机直立"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"直立手机开机"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"直立手机关机"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>手机抽象类，聚合样式基类。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> IStyle stylePhone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(IStyle stylePhone)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.stylePhone = stylePhone;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">        stylePhone.show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>{</span><br><span class="line">        stylePhone.open();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>{</span><br><span class="line">        stylePhone.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>手机实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaWeiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HuaWeiPhone</span><span class="params">(IStyle stylePhone)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(stylePhone);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"华为手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"华为手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"华为手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OppoPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OppoPhone</span><span class="params">(IStyle stylePhone)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(stylePhone);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Oppo手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Oppo手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Oppo手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMiPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XiaoMiPhone</span><span class="params">(IStyle stylePhone)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(stylePhone);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"小米手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"小米手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"小米手机~"</span>);</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Phone phone1 = <span class="keyword">new</span> HuaWeiPhone(<span class="keyword">new</span> SpreadStyle());</span><br><span class="line">        phone1.open();</span><br><span class="line"></span><br><span class="line">        Phone phone2 = <span class="keyword">new</span> OppoPhone(<span class="keyword">new</span> FoldStyle());</span><br><span class="line">        phone2.show();</span><br><span class="line"></span><br><span class="line">        Phone phone3 = <span class="keyword">new</span> XiaoMiPhone(<span class="keyword">new</span> StandStyle());</span><br><span class="line">        phone3.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>输出结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">华为手机~</span><br><span class="line">旋转手机开机</span><br><span class="line">Oppo手机~</span><br><span class="line">手机折叠</span><br><span class="line">小米手机~</span><br><span class="line">直立手机开机</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-7-4-桥接模式在-JDBC-的运用"><a href="#4-7-4-桥接模式在-JDBC-的运用" class="headerlink" title="4.7.4 桥接模式在 JDBC 的运用"></a>4.7.4 桥接模式在 JDBC 的运用</h4><p>在 JDBC 中并不是真正的桥接模式，正如你所看到的，<strong>DriverManager</strong> 直接就是实体类了，并不是抽象类也没有子类，但具体思想还是一样的。</p>
<p><img src="https://s4.ax1x.com/2021/12/25/TU27OU.png" alt="image"></p>
<h4 id="4-7-5-桥接模式适用场景"><a href="#4-7-5-桥接模式适用场景" class="headerlink" title="4.7.5 桥接模式适用场景"></a>4.7.5 桥接模式适用场景</h4><ul>
<li>对于那些不希望适用继承或因为多层次继承而导致系统类的个数剧增加的系统，桥接模式尤为适用。</li>
<li>常见的应用场景<ul>
<li>JDBC 驱动程序</li>
<li>银行转账系统<ul>
<li>转账分类：网上转账，柜台转账，ATM转账。</li>
<li>转账用户类型：普通用户，银行卡用户，VIP 用户。</li>
</ul>
</li>
<li>消息管理<ul>
<li>消息类型：即时消息，延时消息。</li>
<li>消息分类：手机短信，邮件消息，qq 消息。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-7-6-小结"><a href="#4-7-6-小结" class="headerlink" title="4.7.6 小结"></a>4.7.6 小结</h4><ul>
<li>桥接模式实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</li>
<li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就行了，其它的部分由具体业务来完成。</li>
<li>桥接模式替代多层继承方案，有效减少了子类的个数，降低系统的管理和维护成本。</li>
<li>桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽昂进行设计和编程。</li>
<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景。</li>
</ul>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2021/11/24/Redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="一、什么是-Redis？"><a href="#一、什么是-Redis？" class="headerlink" title="一、什么是 Redis？"></a>一、什么是 Redis？</h2><h4 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h4><p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。</p>
<p>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p>
<p>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p>
<p><img src="https://z3.ax1x.com/2021/11/24/oCz0ld.png" alt=""></p>
<h4 id="1-2、特点"><a href="#1-2、特点" class="headerlink" title="1.2、特点"></a>1.2、特点</h4><p>Redis 是完全开源的，遵守 BSD 协议（可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布），是一个高性能的 key-value 数据库。</p>
<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即 master-slave 模式的数据备份。</li>
</ul>
<span id="more"></span>
<h4 id="1-3、优势"><a href="#1-3、优势" class="headerlink" title="1.3、优势"></a>1.3、优势</h4><ul>
<li>性能极高 – Redis 能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。</li>
<li>丰富的特性 – Redis 还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ul>
<h4 id="1-4、与其它-key-value-存储有什么不同？"><a href="#1-4、与其它-key-value-存储有什么不同？" class="headerlink" title="1.4、与其它 key-value 存储有什么不同？"></a>1.4、与其它 key-value 存储有什么不同？</h4><ul>
<li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>
<li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>
</ul>
<h2 id="二、Redis-安装"><a href="#二、Redis-安装" class="headerlink" title="二、Redis 安装"></a>二、Redis 安装</h2><h4 id="2-1、安装"><a href="#2-1、安装" class="headerlink" title="2.1、安装"></a>2.1、安装</h4><p>先下载 Redis 的压缩包，<a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">Redis 6.2.6 is the latest stable version.</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf redis-6.2.6.tar.gz -C /usr <span class="comment"># 解压文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/redis-6.2.6 <span class="comment"># 进入该目录</span></span><br><span class="line">make <span class="comment"># 编译</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行完 <strong>make</strong> 命令后，redis-6.2.6 的 <strong>src</strong> 目录下会出现编译后的 redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli：</p>
<p>下面启动 redis 服务：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./redis-server</span><br></pre></td></tr></tbody></table></figure>
<p>注意这种方式启动 redis 使用的是默认配置。也可以通过启动参数告诉 redis 使用指定配置文件使用下面命令启动（源文件就当备份了，不要乱改）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./redis-server MyRedis.conf</span><br></pre></td></tr></tbody></table></figure>
<p>默认配置文件是前台执行，需要手动配置成后台执行。</p>
<p><img src="https://z3.ax1x.com/2021/11/24/oPiTB9.png" alt=""></p>
<p>之后启动就是在后台启动了</p>
<p><img src="https://z3.ax1x.com/2021/11/24/oPF3CV.png" alt="image"></p>
<p>来尝试连接一下 Redis 数据库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ./redis-cli -p 6379</span></span><br><span class="line"><span class="comment"># 连接成功！</span></span><br><span class="line">127.0.0.1:6379&gt;   </span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2、redis-benchmark-测试性能"><a href="#2-2、redis-benchmark-测试性能" class="headerlink" title="2.2、redis-benchmark 测试性能"></a>2.2、redis-benchmark 测试性能</h4><p>benchmark 可选参数如下所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">选项</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><strong>-h</strong></td>
<td style="text-align:left">指定服务器主机名</td>
<td style="text-align:left">127.0.0.1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><strong>-p</strong></td>
<td style="text-align:left">指定服务器端口</td>
<td style="text-align:left">6379</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><strong>-s</strong></td>
<td style="text-align:left">指定服务器 socket</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><strong>-c</strong></td>
<td style="text-align:left">指定并发连接数</td>
<td style="text-align:left">50</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><strong>-n</strong></td>
<td style="text-align:left">指定请求数</td>
<td style="text-align:left">10000</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><strong>-d</strong></td>
<td style="text-align:left">以字节的形式指定 SET/GET 值的数据大小</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><strong>-k</strong></td>
<td style="text-align:left">1=keep alive 0=reconnect</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><strong>-r</strong></td>
<td style="text-align:left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><strong>-P</strong></td>
<td style="text-align:left">通过管道传输 <numreq> 请求</numreq></td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><strong>-q</strong></td>
<td style="text-align:left">强制退出 redis。仅显示 query/sec 值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><strong>—csv</strong></td>
<td style="text-align:left">以 CSV 格式输出</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><strong><em>-l\</em>（L 的小写字母）</strong></td>
<td style="text-align:left">生成循环，永久执行测试</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><strong>-t</strong></td>
<td style="text-align:left">仅运行以逗号分隔的测试命令列表。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left"><strong><em>-I\</em>（i 的大写字母）</strong></td>
<td style="text-align:left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ./redis-benchmark -h 127.0.0.1 -p 6379 -n 100000 -c 100 -q</span></span><br><span class="line">PING_INLINE: 70521.86 requests per second, p50=0.999 msec                   </span><br><span class="line">PING_MBULK: 72150.07 requests per second, p50=0.967 msec                   </span><br><span class="line">SET: 62972.29 requests per second, p50=1.103 msec                   </span><br><span class="line">GET: 71839.09 requests per second, p50=0.975 msec                   </span><br><span class="line">INCR: 67340.07 requests per second, p50=1.039 msec                   </span><br><span class="line">LPUSH: 66401.06 requests per second, p50=1.071 msec                   </span><br><span class="line">RPUSH: 64061.50 requests per second, p50=1.103 msec                   </span><br><span class="line">LPOP: 62539.09 requests per second, p50=1.135 msec                   </span><br><span class="line">RPOP: 68634.18 requests per second, p50=1.031 msec                   </span><br><span class="line">SADD: 72098.05 requests per second, p50=0.975 msec                   </span><br><span class="line">HSET: 68259.38 requests per second, p50=1.031 msec                   </span><br><span class="line">SPOP: 71428.57 requests per second, p50=0.983 msec                   </span><br><span class="line">ZADD: 64850.84 requests per second, p50=1.087 msec                   </span><br><span class="line">ZPOPMIN: 71994.23 requests per second, p50=0.975 msec                   </span><br><span class="line">LPUSH (needed to benchmark LRANGE): 67476.38 requests per second, p50=1.055 msec                   </span><br><span class="line">LRANGE_100 (first 100 elements): 35893.75 requests per second, p50=1.967 msec                   </span><br><span class="line">LRANGE_300 (first 300 elements): 15257.86 requests per second, p50=4.439 msec                   </span><br><span class="line">LRANGE_500 (first 500 elements): 9705.91 requests per second, p50=6.943 msec                   </span><br><span class="line">LRANGE_600 (first 600 elements): 8294.62 requests per second, p50=8.167 msec                  </span><br><span class="line">MSET (10 keys): 59488.40 requests per second, p50=1.247 msec         </span><br></pre></td></tr></tbody></table></figure>
<h2 id="三、Redis-基本知识"><a href="#三、Redis-基本知识" class="headerlink" title="三、Redis 基本知识"></a>三、Redis 基本知识</h2><h4 id="3-1、数据库相关"><a href="#3-1、数据库相关" class="headerlink" title="3.1、数据库相关"></a>3.1、数据库相关</h4><p>Redis 默认有16个数据库，默认使用的是0号数据库。</p>
<p><img src="https://z3.ax1x.com/2021/11/24/oP3oRg.png" alt=""></p>
<p><br></p>
<div class="note success">
            <p>select index 切换数据库</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1	<span class="comment"># 切换1号数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 0 <span class="comment"># 切换为默认数据库</span></span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>dbsize 查看当前数据库大小</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize		<span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>set 添加键值对，get 获取键值对</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; <span class="built_in">set</span> name yqx	<span class="comment"># 添加键值对{name：yqx}</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; get name		<span class="comment"># 获取键为name的值</span></span><br><span class="line"><span class="string">"yqx"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>keys * 获取所有的键</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys *		<span class="comment"># 获取所有的键</span></span><br><span class="line">1) <span class="string">"name"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>flushdb 清空当前数据库</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; flushdb		<span class="comment"># 清空数据库，flushall清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *		<span class="comment"># 再次查看数据库内容</span></span><br><span class="line">(empty array)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>flushall 清空所有数据库</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379[3]&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; flushall	<span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; select 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2、Redis-Key"><a href="#3-2、Redis-Key" class="headerlink" title="3.2、Redis-Key"></a>3.2、Redis-Key</h4><p>命令很多，这里只介绍常用的命令，如果之后碰到新的命令可以到官网查看。</p>
<p><img src="https://z3.ax1x.com/2021/11/24/oPd3in.png" alt=""></p>
<div class="note success">
            <p>del key 删除 key</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; del name	<span class="comment"># 删除key为name的键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>exists key 是否存在该键值对，存在则返回1，不存在则返回0</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name	<span class="comment"># 是否存在键为name的键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>expire key time 为该键值对设置有效时间，单位为秒</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire name 5 <span class="comment"># 设置name的有效时间为5秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name	  <span class="comment"># 查看name的有效时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; get name	  <span class="comment"># 有效时间过了，则无法获取name</span></span><br><span class="line">(nil)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>type key 查看键值对的存储类型</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> hello	<span class="comment"># 查看hello的类型</span></span><br><span class="line">string</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>rename key newkey 重命名键</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rename hello hi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"hi"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>persist key 移除该键值对的过期时间，改为持久保存</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name 30	<span class="comment"># 设置过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; persist name	<span class="comment"># 移除过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"yqx"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="四、五大基本类型"><a href="#四、五大基本类型" class="headerlink" title="四、五大基本类型"></a>四、五大基本类型</h2><h4 id="4-1、字符串（String）"><a href="#4-1、字符串（String）" class="headerlink" title="4.1、字符串（String）"></a>4.1、字符串（String）</h4><div class="note success">
            <p>getrange key start end 获取子串</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"hello,my name is LiHua!"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"hello,my name is LiHua!"</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 2 5				<span class="comment"># 获取子串，左闭右闭</span></span><br><span class="line"><span class="string">"llo,"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>getset key value 先获取值，再设置值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset key1 <span class="string">"it's new string"</span>	<span class="comment"># 先获取，再设置值</span></span><br><span class="line"><span class="string">"hello,my name is LiHua!"</span>						<span class="comment"># 注：有特殊字符必须加""</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"it's new string"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>strlen 获取字符串长度</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; strlen key1						<span class="comment"># 获取字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 17									<span class="comment"># 此长度不包含双引号</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>mset key1 value1 key2 value2… 批量设置键值对</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3			<span class="comment"># 批量设置键值对</span></span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>mget key1 key2…</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3					<span class="comment"># 批量获取键值对</span></span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>setex key time value 如果存在该键值对，则修改值；不存在则添加该键值对。最后设置有效时间</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex key1 10 value1			<span class="comment"># set expire</span></span><br><span class="line">OK												<span class="comment"># 如果没有该键值对则会创建并添加有效时间</span></span><br><span class="line">127.0.0.1:6379&gt; get key1						</span><br><span class="line"><span class="string">"value1"</span></span><br><span class="line">127.0.0.1:6379&gt; ttl key1				</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; setex key1 10 value2			<span class="comment"># 如果有该键值对则会修改并添加有效时间</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key1				</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; get key1						</span><br><span class="line"><span class="string">"value2"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>setnx key value 如果不存在该键值对，则添加；存在则不操作，不会修改值！</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx key2 value2				<span class="comment"># set if not exists</span></span><br><span class="line">(<span class="built_in">integer</span>) 1										<span class="comment"># 如果没有该键值对则成功创建</span></span><br><span class="line">127.0.0.1:6379&gt; setnx key2 value3				<span class="comment"># 有则创建失败，不会修改值！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get key2						</span><br><span class="line"><span class="string">"value2"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>incr key 自增加1，必须是整数或是可以转换为整数的字符串！</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"3"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1		<span class="comment"># 给字符串自增，结果报错！（非整数都一样）</span></span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>incrby key increment 设置增量</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY num 10</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"13"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>decr key 自减1，必须是整数！</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"11"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>decrby key increment 设置减量</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decrby num 5</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"6"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>append key value 追加值到该键值对中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; append name deflory		<span class="comment"># 追加deflory到key为name的键值对中</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"yqxdeflory"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2、哈希（Hash）"><a href="#4-2、哈希（Hash）" class="headerlink" title="4.2、哈希（Hash）"></a>4.2、哈希（Hash）</h4><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>
<p>Redis 中每个 hash 可以存储 $2^{32}$ - 1 键值对（40多亿）。</p>
<p><br></p>
<p><strong>hash 大部分的命令都是以 h 开头，表示这是 hash 的命令</strong></p>
<div class="note success">
            <p>hset hash k1 v1 k2 v2 同时设置一个或多个键值对到 hash中（hmset 和它的功能一模一样）</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># user:1:{</span></span><br><span class="line"><span class="comment">#	name: "yqx",</span></span><br><span class="line"><span class="comment">#	age : 16</span></span><br><span class="line"><span class="comment">#}</span></span><br><span class="line">127.0.0.1:6379&gt; hset user:1 name yqx age 16</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hget hash key 获取该 hash 中指定键的值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget user:1 name	<span class="comment"># 获取name值</span></span><br><span class="line"><span class="string">"yqx"</span></span><br><span class="line">127.0.0.1:6379&gt; hget user:1 age</span><br><span class="line"><span class="string">"16"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hgetall key 获取该 hash 中所有的键值对</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"yqx"</span></span><br><span class="line">3) <span class="string">"age"</span></span><br><span class="line">4) <span class="string">"16"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hexists hash key 返回该 hash 中是否存在以 key 为键的键值对</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists user:1 name	<span class="comment"># 是否存在name键</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists user:1 job</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hkeys hash 获取该 hash 中的所有键</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user:1	<span class="comment"># 获取所有键</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hvals hash 获取该 hash 中的所有值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals user:1	<span class="comment"># 获取所有值</span></span><br><span class="line">1) <span class="string">"yqx"</span></span><br><span class="line">2) <span class="string">"16"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hincrby hash key increment 为 hash 中键为 key 的值（整型）加一个增量 increment</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby user:1 age 10	<span class="comment"># 年龄+10</span></span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; hget user:1 age</span><br><span class="line"><span class="string">"26"</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user:1 name 10</span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hincrby hash key increment 为 hash 中键为 key 的值加一个增量 increment</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"yqx"</span></span><br><span class="line">3) <span class="string">"age"</span></span><br><span class="line">4) <span class="string">"26"</span></span><br><span class="line">5) <span class="string">"weight"</span></span><br><span class="line">6) <span class="string">"60.2"</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby user:1 weight 10		<span class="comment"># float类型无法使用int的自增方法</span></span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; hincrbyfloat user:1 weight 10	<span class="comment"># 体重+10</span></span><br><span class="line"><span class="string">"70.2"</span></span><br><span class="line">127.0.0.1:6379&gt; hget user:1 weight</span><br><span class="line"><span class="string">"70.2"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hlen hash 获取该 hash 中的键值对数量</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user:1</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">3) <span class="string">"weight"</span></span><br><span class="line">127.0.0.1:6379&gt; hlen user:1	<span class="comment"># 获取键值对数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hmget hash k1 k2… 获取所有给定字段的值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget user:1 name weight</span><br><span class="line">1) <span class="string">"yqx"</span></span><br><span class="line">2) <span class="string">"70.2"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hsetnx hash key value 只有在字段 key 不存在时，才会设置值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx user:1 name deflory	<span class="comment"># set if not exist</span></span><br><span class="line">(<span class="built_in">integer</span>) 0									<span class="comment"># 字段存在，设值失败</span></span><br><span class="line">127.0.0.1:6379&gt; hsetnx user:1 height 175</span><br><span class="line">(<span class="built_in">integer</span>) 1									<span class="comment"># 字段不存在，设值成功</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"yqx"</span></span><br><span class="line">3) <span class="string">"age"</span></span><br><span class="line">4) <span class="string">"26"</span></span><br><span class="line">5) <span class="string">"weight"</span></span><br><span class="line">6) <span class="string">"70.2"</span></span><br><span class="line">7) <span class="string">"height"</span></span><br><span class="line">8) <span class="string">"175"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>hscan hash cursor [MATCH pattern] [COUNT count] 迭代 hash 的键值对并进行匹配（count 默认为10）</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hscan user:1 0 match <span class="string">"*gh*"</span>	<span class="comment"># 从下标0开始匹配键中包含gh的项</span></span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) 1) <span class="string">"weight"</span></span><br><span class="line">   2) <span class="string">"70.2"</span></span><br><span class="line">   3) <span class="string">"height"</span></span><br><span class="line">   4) <span class="string">"175"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="4-3、列表（List）"><a href="#4-3、列表（List）" class="headerlink" title="4.3、列表（List）"></a>4.3、列表（List）</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>
<p>一个列表最多可以包含 $2^{32}$ - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>
<p><br></p>
<p><strong>list 大部分的命令都是以 L 开头，表示这是 list 的命令</strong></p>
<div class="note success">
            <p>lpush list value 将数组从左边插入到 list 中，没有该列表，则会先创建再插入</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list redis		 <span class="comment"># 插入redis</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list mongodb mysql <span class="comment"># 可以同时插入多个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lpushx list value 将数组从左边插入到一个<code>存在</code>的 list 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpushx list2 yqx	<span class="comment"># pushx 到一个不存在的列表中</span></span><br><span class="line">(<span class="built_in">integer</span>) 0							<span class="comment"># 失败</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list2 0</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpushx list oracle	<span class="comment"># 只能 pushx 到存在的列表中</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"oracle"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lrange list start end 查看 list 指定范围的数据（左闭右闭）</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 <span class="comment"># push和栈一样，最后放进来的在最上面</span></span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"redis"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 1 2  <span class="comment"># 查看下标区间为[1, 2]的数据</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lindex list index 获取指定下标的元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex list 0</span><br><span class="line"><span class="string">"mysql"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>linsert list before|after pivot value 在列表元素的前面或后面插入元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; linsert list before redis oracle <span class="comment"># 在list列表中redis前面插入oracle，如果有多个redis，默认插入在第一个redis前</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"oracle"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>llen list 获取列表长度</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen list	<span class="comment"># 查看list的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lpop list 弹出列表第一个元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"oracle"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; llen list</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lpop list	<span class="comment"># list第一个元素是mysql</span></span><br><span class="line"><span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lrem list count value 移出列表元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"oracle"</span></span><br><span class="line">4) <span class="string">"sqlserver"</span></span><br><span class="line">5) <span class="string">"oracle"</span></span><br><span class="line">6) <span class="string">"mysql"</span></span><br><span class="line">7) <span class="string">"mongodb"</span></span><br><span class="line">8) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 oracle	<span class="comment"># count&gt;0，从前往后找</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"oracle"</span></span><br><span class="line">5) <span class="string">"mysql"</span></span><br><span class="line">6) <span class="string">"mongodb"</span></span><br><span class="line">7) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list -1 mysql  <span class="comment"># count&lt;0，从前往后找</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"oracle"</span></span><br><span class="line">5) <span class="string">"mongodb"</span></span><br><span class="line">6) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>lset list index value 通过索引设置列表元素的值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset list 0 mybatis	<span class="comment"># 将第一个元素改为mybatis</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mybatis"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"oracle"</span></span><br><span class="line">5) <span class="string">"mongodb"</span></span><br><span class="line">6) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>ltrim list start stop 只保留 list 在区间[start, stop]上的元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"mybatis"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"oracle"</span></span><br><span class="line">5) <span class="string">"mongodb"</span></span><br><span class="line">6) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 2 5	<span class="comment"># 截断list[2, 5]</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>rpush list value 在列表末尾插入元素，同 lpush</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list mysql hibernate</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">5) <span class="string">"mysql"</span></span><br><span class="line">6) <span class="string">"hibernate"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>rpushx list value 在已存在列表末尾插入元素，同 rpushx</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpushx name deflory</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; rpushx list2 hello world</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">"test"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line">3) <span class="string">"world"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>rpop list 弹出列表最后一个元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">5) <span class="string">"mysql"</span></span><br><span class="line">6) <span class="string">"hibernate"</span></span><br><span class="line">127.0.0.1:6379&gt; rpop list	<span class="comment"># 弹出list最后一个元素</span></span><br><span class="line"><span class="string">"hibernate"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">5) <span class="string">"mysql"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>rpoplpush source destination 将 source 中最后一个元素插入到 destination 最前面</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 原列表</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">5) <span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">"test"</span></span><br><span class="line">2) <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list list2</span><br><span class="line"><span class="string">"mysql"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现列表</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"sqlserver"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"test"</span></span><br><span class="line">3) <span class="string">"hello"</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong><font size="5px">小结：</font></strong></p>
<ul>
<li><p>list 列表实际上是一个链表</p>
</li>
<li><p>如果移除了链表中的所有值，那么该链表不存在</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list v1 v2	<span class="comment"># 创建测试列表</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 v1		<span class="comment"># 移除所有元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 v2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1	<span class="comment"># 查看数组内容</span></span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; lpushx list v3		<span class="comment"># 无法给空数组lpushx元素！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1	<span class="comment"># 还是空数组!</span></span><br><span class="line">(empty array)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>在两遍插入或修改值时，效率最高！反之，操作中间元素时，效率较低！</p>
</li>
<li><p>如果只使用 lpush，rpop，即消息队列；只使用 lpush、lpop，即栈。</p>
</li>
</ul>
<h4 id="4-4、集合（Set）"><a href="#4-4、集合（Set）" class="headerlink" title="4.4、集合（Set）"></a>4.4、集合（Set）</h4><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
<p>集合对象的编码可以是 intset 或者 hashtable。</p>
<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p>集合中最大的成员数为 $2^{32} - 1$ (4294967295, 每个集合可存储40多亿个成员)。</p>
<p><br></p>
<p><strong>set 大部分的命令都是以 s 开头，表示这是 set 的命令</strong></p>
<div class="note success">
            <p>sadd set value 添加 value 到 set 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> redis mongodb <span class="comment"># 可以同时添加多个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> mysql</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>smembers set 查看该集合中的元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> mongodb</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> mysql</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> mysql	<span class="comment"># 添加两个mysql</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span>	<span class="comment"># 最后集合中只有一个mysql</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"redis"</span></span><br><span class="line">3) <span class="string">"mysql"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>scard set 查看该集合数量</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard <span class="built_in">set</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sdiff set1 set2 求差集（set1 - set2）</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"redis"</span></span><br><span class="line">3) <span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff <span class="built_in">set</span> set2	<span class="comment"># 在set中而不在set2中的就是redis和mongodb</span></span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sdiffstore destination set1 set2 将 set1 和 set2 的差集存储在 destination 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiffstore result <span class="built_in">set</span> set2	<span class="comment"># 将结果存储在result中</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers result</span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sinter set1 set2 求 set1 和 set2 的交集</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinter <span class="built_in">set</span> set2</span><br><span class="line">1) <span class="string">"mysql"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sinnerstore destination set1 set2 将 set1 和 set2 的交集存储在 destination 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinterstore result <span class="built_in">set</span> set2	<span class="comment"># 会将原先result中的内容覆盖</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers result</span><br><span class="line">1) <span class="string">"mysql"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sunion set1 set2 求 set1 和 set2 的并集</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"sqlserver"</span></span><br><span class="line">3) <span class="string">"oracle"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">"python"</span></span><br><span class="line">2) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; sunion <span class="built_in">set</span> set2</span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"python"</span></span><br><span class="line">5) <span class="string">"java"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>sunionstore destination set1 set2 将 set1 和 set2 的并集存储在 destination 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunionstore result <span class="built_in">set</span> set2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; smembers result</span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"python"</span></span><br><span class="line">5) <span class="string">"java"</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>sismember set member 判断 member 是否存在于 set 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers result</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; sismember result mysql	<span class="comment"># mysql存在于result中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember result mysql1 <span class="comment"># mysql1不存在与result中</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>smove source destination member 将 member 从 source 中转移到destination 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"redis"</span></span><br><span class="line">3) <span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; smove <span class="built_in">set</span> set2 redis</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br><span class="line">4) <span class="string">"java"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>spop set 随机弹出 set 中的某个元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers set2</span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br><span class="line">4) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; spop set2</span><br><span class="line"><span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; spop set2</span><br><span class="line"><span class="string">"mysql"</span></span><br><span class="line">127.0.0.1:6379&gt; spop set2</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; spop set2</span><br><span class="line"><span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; spop set2</span><br><span class="line">(nil)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>srandmember set [count] 随即返回集合中的元素，默认count=1（不移除！）</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"oracle"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br><span class="line">4) <span class="string">"mysql"</span></span><br><span class="line">5) <span class="string">"mongodb"</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span></span><br><span class="line"><span class="string">"mongodb"</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span></span><br><span class="line"><span class="string">"oracle"</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span> 3</span><br><span class="line">1) <span class="string">"mysql"</span></span><br><span class="line">2) <span class="string">"mongodb"</span></span><br><span class="line">3) <span class="string">"sqlserver"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>srem set value1 value2… 移除集合中的元素</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"redis"</span></span><br><span class="line">2) <span class="string">"mysql"</span></span><br><span class="line">3) <span class="string">"mongodb"</span></span><br><span class="line">4) <span class="string">"sqlserver"</span></span><br><span class="line">5) <span class="string">"oracle"</span></span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> redis mysql</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"mongodb"</span></span><br><span class="line">2) <span class="string">"sqlserver"</span></span><br><span class="line">3) <span class="string">"oracle"</span></span><br></pre></td></tr></tbody></table></figure>
<p>可用于微博，共同关注，共同爱好，推荐好友等……</p>
<h4 id="4-5、有序集合（sorted-set）"><a href="#4-5、有序集合（sorted-set）" class="headerlink" title="4.5、有序集合（sorted set）"></a>4.5、有序集合（sorted set）</h4><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 $2^{32} - 1$ (4294967295, 每个集合可存储40多亿个成员)。</p>
<p><br></p>
<div class="note success">
            <p>zadd zset score1 member1 score2 member2…. 向有序集合添加一个或多个成员，或者更新成员分数</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary 500 yqx 1000 sk 3000 deflory</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zcard zset 获取有序集合的元素个数</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrange zset min max byscore 根据分数从小到大返回数据</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange salary -inf +inf byscore</span><br><span class="line">1) <span class="string">"yqx"</span></span><br><span class="line">2) <span class="string">"sk"</span></span><br><span class="line">3) <span class="string">"deflory"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zcount zset min max 查找指定范围内的元素个数</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount salary 10 1000</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zscore zset member 获取指定某个成员的分数</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore salary yqx</span><br><span class="line"><span class="string">"500"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zincrby zset increment member 为指定成员添加增量</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zincrby salary 20 nojob</span><br><span class="line"><span class="string">"20"</span></span><br><span class="line">127.0.0.1:6379&gt; zscore salary nojob</span><br><span class="line"><span class="string">"20"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrank zset member 获取指定成员的索引</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrank salary yqx</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrangebyscore zset -inf +inf [withscores] 根据分数从小到大返回数据，可以选择是否连同分数一起返回</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores</span><br><span class="line">1) <span class="string">"nojob"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"yqx"</span></span><br><span class="line">4) <span class="string">"500"</span></span><br><span class="line">5) <span class="string">"sk"</span></span><br><span class="line">6) <span class="string">"1000"</span></span><br><span class="line">7) <span class="string">"deflory"</span></span><br><span class="line">8) <span class="string">"3000"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrevrange zset start end [withscores] 根据分数从大到小且索引在[start, end]中的数据，可以选择是否连同分数一起返回</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange salary 0 10 withscores</span><br><span class="line">1) <span class="string">"deflory"</span></span><br><span class="line">2) <span class="string">"3000"</span></span><br><span class="line">3) <span class="string">"sk"</span></span><br><span class="line">4) <span class="string">"1000"</span></span><br><span class="line">5) <span class="string">"yqx"</span></span><br><span class="line">6) <span class="string">"500"</span></span><br><span class="line">7) <span class="string">"nojob"</span></span><br><span class="line">8) <span class="string">"20"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrevrangebyscore zset max min [withscores] 根据分数从大到小，范围在[min, max]返回数据，可以选择是否连同分数一起返回</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrangebyscore salary +inf -inf withscores</span><br><span class="line">1) <span class="string">"deflory"</span></span><br><span class="line">2) <span class="string">"3000"</span></span><br><span class="line">3) <span class="string">"sk"</span></span><br><span class="line">4) <span class="string">"1000"</span></span><br><span class="line">5) <span class="string">"yqx"</span></span><br><span class="line">6) <span class="string">"500"</span></span><br><span class="line">7) <span class="string">"nojob"</span></span><br><span class="line">8) <span class="string">"20"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>zrem zset member1 member2… 删除指定多个成员</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem salary nojob</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary -inf +inf byscore</span><br><span class="line">1) <span class="string">"yqx"</span></span><br><span class="line">2) <span class="string">"sk"</span></span><br><span class="line">3) <span class="string">"deflory"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="五、三种特殊数据类型"><a href="#五、三种特殊数据类型" class="headerlink" title="五、三种特殊数据类型"></a>五、三种特殊数据类型</h2><h4 id="5-1、Geo"><a href="#5-1、Geo" class="headerlink" title="5.1、Geo"></a>5.1、Geo</h4><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。</p>
<p>Redis GEO 操作方法有：</p>
<ul>
<li>geoadd：添加地理位置的坐标。</li>
<li>geopos：获取地理位置的坐标。</li>
<li>geodist：计算两个位置之间的距离。</li>
<li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li>
<li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li>
<li>geohash：返回一个或多个位置对象的 geohash 值。</li>
</ul>
<p><br></p>
<div class="note success">
            <p>geoadd geo longitude1 latitude1 member1… 将多个经纬度和位置名称的信息添加到 geo 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem salary nojob</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary -inf +inf byscore</span><br><span class="line">1) <span class="string">"yqx"</span></span><br><span class="line">2) <span class="string">"sk"</span></span><br><span class="line">3) <span class="string">"deflory"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>geopos geo member1 member2 获取多个成员的地理位置</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos geo Palermo	<span class="comment"># 获取Palermo的地理位置</span></span><br><span class="line">1) 1) <span class="string">"13.36099773645401001"</span>		<span class="comment"># 由于十转二数据精度丢失的问题</span></span><br><span class="line">   2) <span class="string">"38.1149987568412385"</span>			<span class="comment"># 这里一般直接与我们设置的值大致相等</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>geodist geo member1 member2 [m|km|ft|mi] 获取两个成员间的距离</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist geo Palermo Catania <span class="comment"># 计算Palermo与Catania的距离</span></span><br><span class="line"><span class="string">"166290.2746"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>geodius geo longitude latitude radius m|km [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count] [ASC|DESC] [STORE key] [STOREDIST key] 获取 geo 在以给定经纬度为圆心，radius 为半径的圆中的成员集合</p>
          </div>
<ul>
<li>m ：米，默认单位。</li>
<li>km ：千米。</li>
<li>mi ：英里。</li>
<li>ft ：英尺。</li>
<li>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。</li>
<li>WITHCOORD: 将位置元素的经度和维度也一并返回。</li>
<li>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li>
<li>COUNT 限定返回的记录数。</li>
<li>ASC: 查找结果根据距离从近到远排序。</li>
<li>DESC: 查找结果根据从远到近排序。</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadius geo 15 37 200 km</span><br><span class="line">1) <span class="string">"Palermo"</span></span><br><span class="line">2) <span class="string">"Catania"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius geo 15 37 200 km withcoord	<span class="comment"># 返回经纬度</span></span><br><span class="line">1) 1) <span class="string">"Palermo"</span></span><br><span class="line">   2) 1) <span class="string">"13.36099773645401001"</span></span><br><span class="line">      2) <span class="string">"38.1149987568412385"</span></span><br><span class="line">2) 1) <span class="string">"Catania"</span></span><br><span class="line">   2) 1) <span class="string">"15.08699923753738403"</span></span><br><span class="line">      2) <span class="string">"37.50199925694555247"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius geo 15 37 200 km withdist		<span class="comment"># 返回到圆心距离</span></span><br><span class="line">1) 1) <span class="string">"Palermo"</span></span><br><span class="line">   2) <span class="string">"190.4286"</span></span><br><span class="line">2) 1) <span class="string">"Catania"</span></span><br><span class="line">   2) <span class="string">"56.3643"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>georadiusbymember 语法同上，但是以成员为圆心</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd geo 13.583333 37.316667 <span class="string">"Agrigento"</span> 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember geo Agrigento 100 km	<span class="comment"># 获取距离Agrigento距离100km范围内的成员</span></span><br><span class="line">1) <span class="string">"Agrigento"</span></span><br><span class="line">2) <span class="string">"Palermo"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>geohash member1 member2 获取多个成员的 geohash 值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash geo Palermo Catania</span><br><span class="line">1) <span class="string">"sqc8b49rny0"</span></span><br><span class="line">2) <span class="string">"sqdtr74hyu0"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><code>因为 geo 底层是使用 zset 实现的，因此我们可以使用 zset 的方法在 geo 上！！！</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange geo 0 -1	<span class="comment"># 使用zrange获取geo中所有的成员</span></span><br><span class="line">1) <span class="string">"Agrigento"</span></span><br><span class="line">2) <span class="string">"Palermo"</span></span><br><span class="line">3) <span class="string">"Catania"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="5-2、HyperLogLog"><a href="#5-2、HyperLogLog" class="headerlink" title="5.2、HyperLogLog"></a>5.2、HyperLogLog</h4><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>但是，<strong>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</strong></p>
<p><br></p>
<p><strong>那么什么是基数呢？</strong></p>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
<p><br></p>
<div class="note success">
            <p>pfadd pf v1 v2 v3… 添加多个值到 HyperLogLog 中</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd pf1 a b c d e f g</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd pf2 a b c x y z</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>pfcount pf1 [pf2…] 返回给定 HyperLogLog 的基数估算值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfcount pf1	<span class="comment"># pf1基数为7</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; pfcount pf2	<span class="comment"># pf2基数为6</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; pfcount pf1 pf2	<span class="comment"># pf1和pf2组合的HyperLogLog基数为10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>pfmerge destkey sourcekey [sourcekey…]</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfmerge pf1 pf2 <span class="comment"># 将pf1和pf2合并的结果赋给pf1</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount pf1		<span class="comment"># 合并后pf1的基数为10</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; pfcount pf2		<span class="comment"># 合并后pf2没有改变，基数为6</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; pfcount pf1 pf2	<span class="comment"># 与用pfcount求基数结果一致</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="5-3、Bitmaps"><a href="#5-3、Bitmaps" class="headerlink" title="5.3、Bitmaps"></a>5.3、Bitmaps</h4><p>Bitmaps 位图，是一种数据结构，通过操作二进制位来进行记录，只有0和1两个状态。</p>
<p>如果要统计一年的打卡情况，365天 = 365bit，约等于46B。</p>
<p><br></p>
<div class="note success">
            <p>setbit bitmap index value 设值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit bitmap 0 2	<span class="comment"># 位图只有0和1两种状态</span></span><br><span class="line">(error) ERR bit is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 0 1	<span class="comment"># 重新将下标0的值设为1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bitmap 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>bitcount bitmap 统计值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount bitmap</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>getbit 获取指定下标的值</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit bitmap 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit bitmap 2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></tbody></table></figure>
<h2 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h2><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p>
<ul>
<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>
<li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li>
<li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>
</ul>
<p>一个事务从开始到执行会经历以下三个阶段：</p>
<ul>
<li>开始事务。</li>
<li>命令入队。</li>
<li>执行事务。</li>
</ul>
<p><br></p>
<h4 id="6-1、开启事务"><a href="#6-1、开启事务" class="headerlink" title="6.1、开启事务"></a>6.1、开启事务</h4><p>以下是一个事务的例子， 它先以 <strong>MULTI</strong> 开始一个事务， 然后将多个命令入队到事务中， 最后由 <strong>EXEC</strong> 命令触发事务， 一并执行事务中的所有命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi	<span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> age 16</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> weight 60</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>	<span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"yqx"</span></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">"16"</span></span><br><span class="line">127.0.0.1:6379&gt; get weight</span><br><span class="line"><span class="string">"60"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><strong>当事务中出现编译错误时，这其中所有的操作都不会被执行</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set123 age 16	<span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> `set123`, with args beginning with: `age`, `16`, </span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> height 175</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get name	<span class="comment"># 没有获取到name的值</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get height</span><br><span class="line">(nil)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p>
<p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，<strong>中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做</strong>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> age 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr name	<span class="comment"># 此为语法错误，字符串无法进行自增运算</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK	<span class="comment"># 除了语法错误的命令，其他命令都正确执行了</span></span><br><span class="line">2) OK</span><br><span class="line">3) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">4) <span class="string">"yqx"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>discard 取消事务</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; zadd zset 10 score</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; discard	<span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-2、watch-监听"><a href="#6-2、watch-监听" class="headerlink" title="6.2、watch 监听"></a>6.2、watch 监听</h4><p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>
</ul>
<p><strong>乐观锁：</strong></p>
<ul>
<li>很乐观，认为什么时候都不会出问题，所以不会上锁！更新数据的时候会进行判断，在此前是否有人修改过这个数据。</li>
</ul>
<div class="note success">
            <p>watch key1 key2… 监听一个或多个 key ，如果在事务执行之前，这个 key 被其它命令所改动，那么事务将被打断，由此实现乐观锁的效果。</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money	<span class="comment"># 监听money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi	<span class="comment"># 启动事务</span></span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<p>在启动事务的同时，我们新连接一个 redis 客户端，修改 money 的值。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 1000</span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<p>此时再回到第一个客户端，完善事务。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby money 200</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby out 200</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>	<span class="comment"># 事务没有执行，被打断了</span></span><br><span class="line">(nil)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<div class="note success">
            <p>与 watch 相对的，有一个命令叫做 unwatch，用于取消对所有 key 的监视</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; unwatch	<span class="comment"># 取消监听</span></span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<h2 id="七、Jedis"><a href="#七、Jedis" class="headerlink" title="七、Jedis"></a>七、Jedis</h2><h4 id="7-1、配置"><a href="#7-1、配置" class="headerlink" title="7.1、配置"></a>7.1、配置</h4><p>如果想要在 Java 中连接 Redis，就需要使用 Jedis 这个 jar 包，以下是它的 Maven 依赖。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>当然，在连接之前还需要修改一下阿里云中 Redis 的配置文件，如下。</p>
<ol>
<li><p>注释 bind 127.0.0.1</p>
<p><img src="https://z3.ax1x.com/2021/11/26/oEptuF.png" alt=""></p>
</li>
<li><p>protect-mode 改为 no</p>
<p><img src="https://z3.ax1x.com/2021/11/26/oEp041.png" alt=""></p>
</li>
</ol>
<p>之后重启 Redis 即可。</p>
<ul>
<li><p>停止所有客户端</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>启动 Redis</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">redis-server ../MyRedis.conf</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<p>测试连接，成功输出 <code>PONG</code>!</p>
<p><img src="https://z3.ax1x.com/2021/11/26/oEpXUs.png" alt=""></p>
<h4 id="7-2、Jedis-使用"><a href="#7-2、Jedis-使用" class="headerlink" title="7.2、Jedis 使用"></a>7.2、Jedis 使用</h4><p>测试键</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">KeyTest</span><span class="params">()</span> </span>{</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"47.102.124.75"</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(<span class="string">"清空数据:"</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">"判断某个键是否存在:"</span> + jedis.exists(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(<span class="string">"新增&lt;'username','deflory'&gt;的键值对:"</span> + jedis.set(<span class="string">"username"</span>, <span class="string">"deflory"</span>));</span><br><span class="line">        System.out.println(<span class="string">"新增&lt;'password','123456'&gt;的键值对:"</span> + jedis.set(<span class="string">"password"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        System.out.println(<span class="string">"系统中所有的键:"</span> + jedis.keys(<span class="string">"*"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除键password:"</span> + jedis.del(<span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"判断键password是否存在:"</span> + jedis.exists(<span class="string">"password"</span>));</span><br><span class="line">        System.out.println(<span class="string">"查看键username所存储值的类型:"</span> + jedis.type(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(<span class="string">"随即返回key空间中的一个:"</span> + jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">"重命名username为name:"</span> + jedis.rename(<span class="string">"username"</span>, <span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"取出修改后的name:"</span> + jedis.get(<span class="string">"name"</span>));</span><br><span class="line">        System.out.println(<span class="string">"切换至1号数据库:"</span> + jedis.select(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"查看当前数据库大小:"</span> + jedis.dbSize());</span><br><span class="line">        System.out.println(<span class="string">"切换回默认数据库:"</span> + jedis.select(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除当前选中数据库的所有key:"</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">"系统中所有的键:"</span> + jedis.keys(<span class="string">"*"</span>));</span><br><span class="line">        System.out.println(<span class="string">"删除所有数据库中的所有key:"</span> + jedis.flushAll());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>测试 String</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void StringTest() throws InterruptedException {</span><br><span class="line">    Jedis jedis = new Jedis(<span class="string">"47.102.124.75"</span>, 6379);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">"============增加数据============"</span>);</span><br><span class="line">    System.out.println(jedis.set(<span class="string">"key1"</span>, <span class="string">"value1"</span>));</span><br><span class="line">    System.out.println(jedis.set(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br><span class="line">    System.out.println(jedis.set(<span class="string">"key3"</span>, <span class="string">"value3"</span>));</span><br><span class="line">    System.out.println(<span class="string">"删除键key2:"</span> + jedis.del(<span class="string">"key2"</span>));</span><br><span class="line">    System.out.println(<span class="string">"获取键key2:"</span> + jedis.get(<span class="string">"key2"</span>));</span><br><span class="line">    System.out.println(<span class="string">"修改键key1:"</span> + jedis.set(<span class="string">"key1"</span>, <span class="string">"NewValue1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"在key3的值后面追加值:"</span> + jedis.append(<span class="string">"key3"</span>, <span class="string">"End"</span>));</span><br><span class="line">    System.out.println(<span class="string">"获取key3的值:"</span> + jedis.get(<span class="string">"key3"</span>));</span><br><span class="line">    System.out.println(<span class="string">"增加多个键值对:"</span> + jedis.mset(<span class="string">"key01"</span>, <span class="string">"value01"</span>, <span class="string">"key02"</span>, <span class="string">"value02"</span>, <span class="string">"key03"</span>, <span class="string">"value03"</span>));</span><br><span class="line">    System.out.println(<span class="string">"获取多个键值对:"</span> + jedis.mget(<span class="string">"key01"</span>, <span class="string">"key02"</span>, <span class="string">"key03"</span>));</span><br><span class="line">    System.out.println(<span class="string">"删除多个键值对:"</span> + jedis.del(<span class="string">"key01"</span>, <span class="string">"key02"</span>));</span><br><span class="line">    System.out.println(<span class="string">"获取多个键值对:"</span> + jedis.mget(<span class="string">"key01"</span>, <span class="string">"key02"</span>, <span class="string">"key03"</span>));</span><br><span class="line"></span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">"============新增键值对防止覆盖原先值============"</span>);</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">"key1"</span>, <span class="string">"value1"</span>));</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">"key2"</span>, <span class="string">"value2"</span>));</span><br><span class="line">    System.out.println(jedis.setnx(<span class="string">"key2"</span>, <span class="string">"NewValue2"</span>));</span><br><span class="line">    System.out.println(jedis.mget(<span class="string">"key1"</span>, <span class="string">"key2"</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"============新增键值对并设置有效时间============"</span>);</span><br><span class="line">    System.out.println(jedis.setex(<span class="string">"key3"</span>, 2, <span class="string">"value3"</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"key3"</span>));</span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">"key3"</span>));</span><br><span class="line">    Thread.sleep(4000);</span><br><span class="line">    System.out.println(<span class="string">"4秒后......"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"key3"</span>));</span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">"key3"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试 Set</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTest</span><span class="params">()</span></span>{</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"47.102.124.75"</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(<span class="string">"添加数据到集合1:"</span> + jedis.sadd(<span class="string">"set1"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>));</span><br><span class="line">    System.out.println(<span class="string">"添加数据到集合2:"</span> + jedis.sadd(<span class="string">"set2"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看集合1元素数量:"</span> + jedis.scard(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看集合1元素:"</span> + jedis.smembers(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"集合1与集合2差集:"</span> + jedis.sdiff(<span class="string">"set1"</span>, <span class="string">"set2"</span>));</span><br><span class="line">    System.out.println(<span class="string">"集合1与集合2并集:"</span> + jedis.sunion(<span class="string">"set1"</span>, <span class="string">"set2"</span>));</span><br><span class="line">    System.out.println(<span class="string">"集合1与集合2交集:"</span> + jedis.sinter(<span class="string">"set1"</span>, <span class="string">"set2"</span>));</span><br><span class="line">    System.out.println(<span class="string">"随机移除集合1的一个元素:"</span> + jedis.spop(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看集合1元素:"</span> + jedis.smembers(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"随机返回集合1的三个元素"</span> + jedis.srandmember(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看g是否存储在集合2中:"</span> + jedis.sismember(<span class="string">"set2"</span>, <span class="string">"g"</span>));</span><br><span class="line">    System.out.println(<span class="string">"将集合2的g移动到集合1中:"</span> + jedis.smove(<span class="string">"set2"</span>, <span class="string">"set1"</span>, <span class="string">"g"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看集合1的元素:"</span> + jedis.smembers(<span class="string">"set1"</span>));</span><br><span class="line">    System.out.println(<span class="string">"移除集合1的g:"</span> + jedis.srem(<span class="string">"set1"</span>, <span class="string">"g"</span>));</span><br><span class="line">    System.out.println(<span class="string">"查看集合1的元素:"</span> + jedis.smembers(<span class="string">"set1"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>太多了，后面的就不写了，和 Redis 的使用差不多！</p>
<p>事务</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransactionTest1</span><span class="params">()</span></span>{</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"47.102.124.75"</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    Transaction transaction = jedis.multi();	<span class="comment">// 启动事务</span></span><br><span class="line">    transaction.set(<span class="string">"name"</span>, <span class="string">"yqx"</span>);</span><br><span class="line">    transaction.set(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">    transaction.incr(<span class="string">"name"</span>);					<span class="comment">// 测试错误语法</span></span><br><span class="line">    transaction.exec();</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"name"</span>)); <span class="comment">// yqx</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransactionTest2</span><span class="params">()</span></span>{</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"47.102.124.75"</span>, <span class="number">6379</span>);</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    Transaction transaction = jedis.multi();</span><br><span class="line">    <span class="comment">// 全都不会被执行</span></span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        transaction.set(<span class="string">"name"</span>, <span class="string">"yqx"</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"name"</span>));	</span><br><span class="line">        transaction.set(<span class="string">"age"</span>, <span class="string">"20"</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        transaction.exec();</span><br><span class="line">    }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">        transaction.discard();					<span class="comment">// 事务执行失败，则取消事务</span></span><br><span class="line">    }<span class="keyword">finally</span> {</span><br><span class="line">        System.out.println(jedis.get(<span class="string">"name"</span>));	<span class="comment">// null</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"age"</span>));	<span class="comment">// null</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="八、Redis-配置"><a href="#八、Redis-配置" class="headerlink" title="八、Redis 配置"></a>八、Redis 配置</h2><div class="note success">
            <p>Redis 单位不区分大小写</p>
          </div>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same</span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>主要配置字段说明</p>
          </div>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">配置项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><code>daemonize no</code></td>
<td style="text-align:left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><code>pidfile /var/run/redis.pid</code></td>
<td style="text-align:left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><code>port 6379</code></td>
<td style="text-align:left">指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><code>bind 127.0.0.1</code></td>
<td style="text-align:left">绑定的主机地址</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><code>timeout 300</code></td>
<td style="text-align:left">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><code>loglevel notice</code></td>
<td style="text-align:left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><code>logfile stdout</code></td>
<td style="text-align:left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><code>databases 16</code></td>
<td style="text-align:left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><code>save &lt;seconds&gt; &lt;changes&gt;</code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1**</strong>save 300 10<strong>**save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>
<td style="text-align:left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><code>rdbcompression yes</code></td>
<td style="text-align:left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><code>dbfilename dump.rdb</code></td>
<td style="text-align:left">指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><code>dir ./</code></td>
<td style="text-align:left">指定本地数据库存放目录</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></td>
<td style="text-align:left">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left"><code>masterauth &lt;master-password&gt;</code></td>
<td style="text-align:left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left"><code>requirepass foobared</code></td>
<td style="text-align:left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</password></td>
</tr>
<tr>
<td style="text-align:left">16</td>
<td style="text-align:left"><code>maxclients 128</code></td>
<td style="text-align:left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>
</tr>
<tr>
<td style="text-align:left">17</td>
<td style="text-align:left"><code>maxmemory &lt;bytes&gt;</code></td>
<td style="text-align:left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>
</tr>
<tr>
<td style="text-align:left">18</td>
<td style="text-align:left"><code>appendonly no</code></td>
<td style="text-align:left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>
</tr>
<tr>
<td style="text-align:left">19</td>
<td style="text-align:left"><code>appendfilename appendonly.aof</code></td>
<td style="text-align:left">指定更新日志文件名，默认为 appendonly.aof</td>
</tr>
<tr>
<td style="text-align:left">20</td>
<td style="text-align:left"><code>appendfsync everysec</code></td>
<td style="text-align:left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td style="text-align:left">21</td>
<td style="text-align:left"><code>vm-enabled no</code></td>
<td style="text-align:left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>
</tr>
<tr>
<td style="text-align:left">22</td>
<td style="text-align:left"><code>vm-swap-file /tmp/redis.swap</code></td>
<td style="text-align:left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>
</tr>
<tr>
<td style="text-align:left">23</td>
<td style="text-align:left"><code>vm-max-memory 0</code></td>
<td style="text-align:left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>
</tr>
<tr>
<td style="text-align:left">24</td>
<td style="text-align:left"><code>vm-page-size 32</code></td>
<td style="text-align:left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>
</tr>
<tr>
<td style="text-align:left">25</td>
<td style="text-align:left"><code>vm-pages 134217728</code></td>
<td style="text-align:left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>
</tr>
<tr>
<td style="text-align:left">26</td>
<td style="text-align:left"><code>vm-max-threads 4</code></td>
<td style="text-align:left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>
</tr>
<tr>
<td style="text-align:left">27</td>
<td style="text-align:left"><code>glueoutputbuf yes</code></td>
<td style="text-align:left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>
<td style="text-align:left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td style="text-align:left">29</td>
<td style="text-align:left"><code>activerehashing yes</code></td>
<td style="text-align:left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left"><code>include /path/to/local.conf</code></td>
<td style="text-align:left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody>
</table>
</div>
<h2 id="九、持久化"><a href="#九、持久化" class="headerlink" title="九、持久化"></a>九、持久化</h2><p>由于 Redis 的数据都是保存在内存中的，因此如果哪儿天服务器宕机了，那么所有的数据就都消失了，这是绝对不会被允许的！！！因此需要持久化到硬盘中。</p>
<p><img src="https://z3.ax1x.com/2021/11/26/oZyOTs.png" alt=""></p>
<p><br></p>
<h4 id="9-1、RDB-持久化"><a href="#9-1、RDB-持久化" class="headerlink" title="9.1、RDB 持久化"></a>9.1、RDB 持久化</h4><p><strong>RDB</strong> 持久化就是每过一个周期，就将内存中的数据全都遍历一遍并写入到文件中，而且为了节省空间，定义了一个二进制的格式进行存储，将数据一条一条连在一起，生成了一个 <strong>RDB</strong> 文件。</p>
<p><img src="https://z3.ax1x.com/2021/11/26/oZ6F0J.png" alt=""></p>
<p>那么该如何设置保存周期呢？在 Redis 的 config 文件中，有着如下三行内容，可以按需进行修改。多个条件可以组合使用，只要下面其中一个条件满足，Redis 就会去进行备份。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">save 900 1    # 900秒（15分钟）内有1个写入</span><br><span class="line">save 300 10   # 300秒（5分钟）内有10个写入</span><br><span class="line">save 60 10000 # 60秒（1分钟）内有10000个写入</span><br></pre></td></tr></tbody></table></figure>
<p>那么如果在保存数据库文件的时候，又有新的请求该怎么办呢？很自然而然地，就能想到可以 <strong>fork</strong> 出一个子线程来做备份数据库的事情。</p>
<p>但是啊，周期性地备份文件有一个致命性的问题，那就是周期时间——<strong>竟然是分钟级别</strong>！！！如果出现停机等问题，还是会损失这一分钟内的数据。诚然，你也可以设置成每秒钟备份一次，那效率就太低下了。</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oZc5M8.png" alt=""></p>
<p>由此，我们引出了新的概念—— AOF。</p>
<p><br></p>
<h4 id="9-2、AOF-持久化"><a href="#9-2、AOF-持久化" class="headerlink" title="9.2、AOF 持久化"></a>9.2、AOF 持久化</h4><p>AOF 全称 <strong>Append Only File</strong>（只追加文件），类似于 mysql 的二进制日志 binlog。<strong>其原理就是记录数据更改的操作（不包括查询），而不是记录数据本身。</strong>毕竟只要记录数据在这一段时间内是如何修改的，那之后也能通过执行这个 AOF 文件还原回去。</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oZgYy8.png" alt=""></p>
<p>那么 AOF 应该多久写一次文件呢？</p>
<p>肯定不能每执行一条修改命令就记录到文件中，IO 操作十分昂贵，这回严重拖垮数据库性能！因此需要准备一个缓冲区，将要记录的命令先临时保存在这里，再择机写入文件，我把这个临时缓冲区叫做 <strong>aof_buf</strong>。</p>
<p>具体如何设置刷新周期可以在 Redis 的配置文件中进行修改。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">appendfsync always|everysec|no</span><br><span class="line"></span><br><span class="line">always: 每个事件周期都同步刷新一次</span><br><span class="line">everysec(默认): 每一秒都同步刷新一次</span><br><span class="line">no: 我只管写，让操作系统自己决定什么时候真正写入吧</span><br></pre></td></tr></tbody></table></figure>
<p><strong><font size="4px">AOF 重写</font></strong></p>
<p>但是正如其名，只追加文件只会追加数据，这就会导致随着时间的推移，这个 <strong>AOF</strong> 备份文件会越来越大！！！不仅非常占硬盘空间，复制移动，加载分析等操作都异常麻烦耗时。</p>
<p>这就需要对 <strong>AOF</strong> 文件进行<code>压缩</code>，也就是 <strong>AOF</strong> 重写。</p>
<p>观察以下命令，是不是非常冗余！</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name yqx</span><br><span class="line"><span class="built_in">set</span> name deflory</span><br><span class="line"><span class="built_in">set</span> name SuicideKing</span><br><span class="line"><span class="built_in">set</span> name DreamFragrance</span><br></pre></td></tr></tbody></table></figure>
<p>将每次修改操作都记录下来导致文件过大，而且数据改来改去，很多中间状态根本没有用，只需要记录最终的状态即可，这就是 <strong>AOF</strong> 重写的思想。</p>
<p>因此上述命令只需要一行即可记录完毕。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name DreamFragrance</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/11/27/oZRigx.png" alt="image"></p>
<p>同 RDB 一样，IO 操作总是代价昂贵的，因此要 <strong>fork</strong> 一个子进程来重写文件。</p>
<p><strong>但是，这样就真的没有问题了吗？</strong></p>
<p>如果在重写 AOF 文件的时候，新的数据被修改了，那岂不是会出现数据库数据和重写内容不一致的情况吗？</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oZReVe.png" alt="image"></p>
<p>于是，继之前的 <strong>aof_buf</strong>，Redis 又准备了一个新的缓冲区—— <strong>AOF 重写缓冲区</strong>。</p>
<p>从创建重写 <strong>AOF</strong> 子进程的那个一刻起，Redis 将后面来的写入命令都复制到这个重写缓冲区中，等到子进程重写 <strong>AOF</strong> 文件结束以后，再将这个缓冲区的文件写入到新的 AOF 文件中。</p>
<p>最后再将这个崭新的 AOF 文件替换掉原先那个冗余的 AOF 文件，整个重写过程就算大功告成了！</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oZRHde.png" alt="image"></p>
<p><br></p>
<h4 id="9-3、详解-RDB-和-AOF"><a href="#9-3、详解-RDB-和-AOF" class="headerlink" title="9.3、详解 RDB 和 AOF"></a>9.3、详解 RDB 和 AOF</h4><p><strong><font size="4px">Redis 持久化：</font></strong></p>
<p>Redis 提供了多种不同级别的持久化方式：一种是 <strong>RDB</strong>,另一种是 <strong>AOF</strong>。</p>
<p>RDB 持久化可以在<strong>指定的时间间隔内生成数据集的时间点快照</strong>（point-in-time snapshot）。</p>
<p><strong>AOF 持久化记录服务器执行的所有写操作命令</strong>，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。 Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保存数据集状态所需的实际大小。Redis 还可以同时使用 AOF 持久化和 RDB 持久化。 在这种情况下， 当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集， 因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。你甚至可以关闭持久化功能，让数据只在服务器运行时存在。</p>
<p><strong><font size="4px">RDB 的优点：</font></strong></p>
<p>RDB 是一个非常紧凑（compact）的文件，它保存了 Redis 在某个时间点上的数据集。 这种文件非常适合用于进行备份： 比如说，你可以在最近的 24 小时内，每小时备份一次 RDB 文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。RDB 非常适用于灾难恢复（disaster recovery）：它只有一个文件，并且内容都非常紧凑，可以（在加密后）将它传送到别的数据中心，或者亚马逊 S3 中。RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</p>
<p><strong><font size="4px">RDB 的缺点：</font></strong></p>
<p>如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， <strong>因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。</strong> 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。每次保存 RDB 的时候，Redis 都要 fork 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； <strong>如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。</strong></p>
<p><strong><font size="4px">AOF 的优点：</font></strong></p>
<p>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题，至于是如何修复的嘛，只是把有问题的命令删去而已。既然解决不了问题，那就解决掉提出问题的人。<br>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</p>
<p><strong><font size="4px">AOF 的缺点：</font></strong></p>
<p>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。</p>
<p><strong><font size="4px">RDB 和 AOF 该如何选择？</font></strong></p>
<p>一般来说,如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。如果你非常关心你的数据,但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。有很多用户都只使用 AOF 持久化， 但我们并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快， 除此之外， 使用 RDB 还可以避免之前提到的 AOF 程序的 bug 。因为以上提到的种种原因， 未来我们可能会将 AOF 和 RDB 整合成单个持久化模型。 （这是一个长期计划。）</p>
<p><strong><font size="4px">RDB 快照：</font></strong></p>
<p>在默认情况下， Redis 将数据库快照保存在名字为 dump.rdb 的二进制文件中。你可以对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。你也可以通过调用 SAVE 或者 BGSAVE ， 手动让 Redis 进行数据集保存操作。比如说， 以下设置会让 Redis 在满足“ 60 秒内有至少有 1000 个键被改动”这一条件时， 自动保存一次数据集：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">save 60 1000</span><br></pre></td></tr></tbody></table></figure>
<p>这种持久化方式被称为快照（snapshot）。</p>
<p><strong><font size="4px">快照的运作方式：</font></strong></p>
<p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作：<br>Redis 调用 fork() ，同时拥有父进程和子进程。<br>子进程将数据集写入到一个临时 RDB 文件中。<br>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。<br>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。<br>只进行追加操作的文件（append-only file，AOF）<br>快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。尽管对于某些程序来说， 数据的耐久性并不是最重要的考虑因素， 但是对于那些追求完全耐久能力（full durability）的程序来说， 快照功能就不太适用了。<br>从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。<br>你可以通过修改配置文件来打开 AOF 功能：<br>appendonly yes<br>从现在开始， 每当 Redis 执行一个改变数据集的命令时（比如 SET）， 这个命令就会被追加到 AOF 文件的末尾。<br>这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p>
<p><strong><font size="4px">快照的运作方式：</font></strong></p>
<p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作：<br>Redis 调用 fork() ，同时拥有父进程和子进程。<br>子进程将数据集写入到一个临时 RDB 文件中。<br>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。<br>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。<br>只进行追加操作的文件（append-only file，AOF）<br>快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。尽管对于某些程序来说， 数据的耐久性并不是最重要的考虑因素， 但是对于那些追求完全耐久能力（full durability）的程序来说， 快照功能就不太适用了。<br>从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。<br>你可以通过修改配置文件来打开 AOF 功能：<br>appendonly yes<br>从现在开始， 每当 Redis 执行一个改变数据集的命令时（比如 SET）， 这个命令就会被追加到 AOF 文件的末尾。<br>这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p>
<p><strong><font size="4px">AOF 重写：</font></strong></p>
<p>因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。举个例子， 如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。然而在实际上， 只使用一条 SET 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。为了处理这种情况， Redis 支持一种有趣的特性： 可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。执行 BGREWRITEAOF 命令， Redis 将生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。</p>
<p><strong><font size="4px">如果 AOF 出错了：</font></strong></p>
<p>服务器可能在程序正在对 AOF 文件进行写入时停机， 如果停机造成了 AOF 文件出错（corrupt）， 那么 Redis 在重启时会拒绝载入这个 AOF 文件， 从而确保数据的一致性不会被破坏。</p>
<p>当发生这种情况时， 可以用以下方法来修复出错的 AOF 文件：</p>
<ol>
<li><p>为现有的 AOF 文件创建一个备份。</p>
</li>
<li><p>使用 Redis 附带的 redis-check-aof 程序，对原来的 AOF 文件进行修复。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">redis-check-aof --fix</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>使用 diff -u 对比修复后的 AOF 文件和原始 AOF 文件的备份，查看两个文件之间的不同之处（可选）。</p>
</li>
<li><p>重启 Redis 服务器，等待服务器载入修复后的 AOF 文件，并进行数据恢复。</p>
</li>
</ol>
<p><strong>AOF 重写和 RDB 创建快照一样，都巧妙地利用了写时复制机制。</strong></p>
<p><strong><font size="4px">AOF 重写的执行步骤：</font></strong></p>
<p>Redis 执行 fork() ，现在同时拥有父进程和子进程。<br>子进程开始将新 AOF 文件的内容写入到临时文件。对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</p>
<p><strong><font size="4px">RDB 和 AOF 之间的相互作用：</font></strong></p>
<p>在版本号大于等于 2.4 的 Redis 中， BGSAVE 执行的过程中， 不可以执行 BGREWRITEAOF 。 反过来说， 在 BGREWRITEAOF 执行的过程中， 也不可以执行 BGSAVE 。<br>这可以防止两个 Redis 后台进程同时对磁盘进行大量的 I/O 操作。<br>如果 BGSAVE 正在执行， 并且用户显示地调用 BGREWRITEAOF 命令， 那么服务器将向用户回复一个 OK 状态， 并告知用户， BGREWRITEAOF 已经被预定执行： 一旦 BGSAVE 执行完毕， BGREWRITEAOF 就会正式开始。当 Redis 启动时， 如果 RDB 持久化和 AOF 持久化都被打开了， 那么程序会优先使用 AOF 文件来恢复数据集， 因为 AOF 文件所保存的数据通常是最完整的。</p>
<p><strong><font size="4px">备份 Redis 数据：</font></strong></p>
<p>Redis 对于数据备份是非常友好的， 因为你可以在服务器运行的时候对 RDB 文件进行复制： RDB 文件一旦被创建， 就不会进行任何修改。 当服务器要创建一个新的 RDB 文件时， 它先将文件的内容保存在一个临时文件里面， 当临时文件写入完毕时， 程序才使用 原子地用临时文件替换原来的 RDB 文件。这也就是说， 无论何时， 复制 RDB 文件都是绝对安全的。</p>
<h2 id="十、发布订阅"><a href="#十、发布订阅" class="headerlink" title="十、发布订阅"></a>十、发布订阅</h2><h4 id="10-1、什么是发布订阅？"><a href="#10-1、什么是发布订阅？" class="headerlink" title="10.1、什么是发布订阅？"></a>10.1、什么是发布订阅？</h4><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>
<p>Redis 客户端可以订阅任意数量的频道。</p>
<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oeNpJe.png" alt="image"></p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oeNCzd.png" alt="image"></p>
<p><br></p>
<p>要想在 Redis 中模拟发布订阅的过程，需要开启两个 redis-cli 客户端。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 订阅channel1频道</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"channel1"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 频道channel1发布消息，“hello，it's channel1”</span></span><br><span class="line">127.0.0.1:6379&gt; publish channel1 <span class="string">"hello,it's channel1"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用户收到来自channel1的消息</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"channel1"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"channel1"</span></span><br><span class="line">3) <span class="string">"hello,it's channel1"</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="10-2、发布订阅常用命令"><a href="#10-2、发布订阅常用命令" class="headerlink" title="10.2、发布订阅常用命令"></a>10.2、发布订阅常用命令</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">PSUBSCRIBE pattern [pattern …]</td>
<td>订阅一个或多个符合给定模式的频道。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">PUBSUB subcommand [argument [argument …]]</td>
<td>查看订阅与发布系统状态。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">PUBLISH channel message</td>
<td>将信息发送到指定的频道。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">PUNSUBSCRIBE [pattern [pattern …]]</td>
<td>退订所有给定模式的频道。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">SUBSCRIBE channel [channel …]</td>
<td>订阅给定的一个或多个频道的信息。</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">UNSUBSCRIBE [channel [channel …]]</td>
<td>指退订给定的频道。</td>
</tr>
</tbody>
</table>
</div>
<p><br></p>
<h4 id="10-3、原理"><a href="#10-3、原理" class="headerlink" title="10.3、原理"></a>10.3、原理</h4><p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 public.c 文件，了解发布和订阅机制的底层实现，借此加深对 Redis 的理解。</p>
<p>Redis 通过 PUBLISH、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>
<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 channel，而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p>
<p>通过 PUBLISH 命令向订阅者发送信息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找订阅了这个频道所有的客户端链表，借此将消息发布给所有的订阅者。</p>
<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subcribe），在Redis中，你可以设定对某一个 key 进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会受到相应的信息。这一功能最明显的用法就是用作实时消息系统，例如群聊等。</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oeaKrn.jpg" alt="v2 76e3e06285cdeea65abf6877497be3f1 720w"></p>
<h2 id="十一、主从复制"><a href="#十一、主从复制" class="headerlink" title="十一、主从复制"></a>十一、主从复制</h2><h4 id="11-1、简介"><a href="#11-1、简介" class="headerlink" title="11.1、简介"></a>11.1、简介</h4><p>主从复制是为了达成高可用</p>
<ul>
<li>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服<br>务器上，连接在一起，并保证数据是同步的。</li>
<li>即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/11/27/oeysv8.png" alt="image"></p>
<ul>
<li>提供数据方：master<ul>
<li>写数据</li>
<li>执行写操作时，将出现变化的数据自动同步到slave</li>
<li>读数据（可忽略）</li>
<li>一个master可以拥有多个slave</li>
</ul>
</li>
<li>接收数据方：slave<ul>
<li>读数据</li>
<li>写数据（禁止）</li>
<li>一个slave只对应一个master</li>
</ul>
</li>
<li>需要解决的问题<ul>
<li>数据同步</li>
</ul>
</li>
<li>核心工作<ul>
<li>master的数据复制到slave中</li>
</ul>
</li>
</ul>
<h4 id="11-2、作用"><a href="#11-2、作用" class="headerlink" title="11.2、作用"></a>11.2、作用</h4><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower) ; 数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p>
<p>默认情况下，每台Redis服务器都是主节点 ;</p>
<p>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>
<p>其作用有以下五点：</p>
<ol>
<li><strong>读写分离</strong>：主节点写，从节点读，提高服务器的读写负载能力</li>
<li><strong>数据冗余</strong>︰主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li>
<li><strong>故障恢复</strong>︰当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 ; 实际上是一种服务的冗余。</li>
<li><strong>负载均衡</strong>︰在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载 ; 尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li>
<li><strong>高可用（集群）基石</strong>︰除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li>
</ol>
<h4 id="11-3、环境搭建"><a href="#11-3、环境搭建" class="headerlink" title="11.3、环境搭建"></a>11.3、环境搭建</h4><p>这里我们实现的是<code>一主二从</code>，先准备三份配置文件，因为是根据配置文件创建服务的。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory redis-6.2.6]<span class="comment"># mkdir master-slaver-config</span></span><br><span class="line">[root@deflory redis-6.2.6]<span class="comment"># cp MyRedis.conf master-slaver-config/redis79.config</span></span><br><span class="line">[root@deflory redis-6.2.6]<span class="comment"># cp MyRedis.conf master-slaver-config/redis80.config</span></span><br><span class="line">[root@deflory redis-6.2.6]<span class="comment"># cp MyRedis.conf master-slaver-config/redis81.config</span></span><br></pre></td></tr></tbody></table></figure>
<p>每个配置文件都需要修改一下四个地方。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">port 6379	<span class="comment"># 端口号</span></span><br><span class="line">pidfile /var/run/redis_6379.pid	<span class="comment"># 后台进程文件</span></span><br><span class="line">logfile <span class="string">"6379.log"</span>	<span class="comment"># 日志文件</span></span><br><span class="line">dbfilename dump6379.rdb	<span class="comment"># 备份文件</span></span><br></pre></td></tr></tbody></table></figure>
<p>开启三个服务器端。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ./redis-server ../master-slaver-config/redis79.config </span></span><br><span class="line">[root@deflory src]<span class="comment"># ./redis-server ../master-slaver-config/redis80.config </span></span><br><span class="line">[root@deflory src]<span class="comment"># ./redis-server ../master-slaver-config/redis81.config </span></span><br></pre></td></tr></tbody></table></figure>
<p>查看后台进程。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      3526     1  0 Nov26 ?        00:02:25 ./redis-server *:6379</span><br><span class="line">root     10786     1  0 15:54 ?        00:00:00 ./redis-server *:6380</span><br><span class="line">root     10848     1  0 15:54 ?        00:00:00 ./redis-server *:6381</span><br><span class="line">root     11456 27951  0 15:54 pts/0    00:00:00 grep --color=auto redis</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h4 id="11-4、主从复制实战"><a href="#11-4、主从复制实战" class="headerlink" title="11.4、主从复制实战"></a>11.4、主从复制实战</h4><p>连接服务器端，使用 <code>info replication</code> 来查看当前主从情况。</p>
<p>由于服务器默认都是以主机启动的，因此目前“三台机器”都是主机。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master			<span class="comment"># 角色为主机</span></span><br><span class="line">connected_slaves:0	<span class="comment"># 没有从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:1c16ac389c930c4f0bec48f654f4aea35c83975e</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></tbody></table></figure>
<p>通过 <code>slaveof host port</code> 来连接主机，如果主机有设置密码，则会要求进行 auth 验证。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication	<span class="comment"># 从机的主从信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:down</span><br><span class="line">master_last_io_seconds_ago:-1</span><br><span class="line">master_sync_in_progress:1</span><br><span class="line">slave_read_repl_offset:1</span><br><span class="line">slave_repl_offset:1</span><br><span class="line">master_sync_total_bytes:-1</span><br><span class="line">master_sync_read_bytes:0</span><br><span class="line">master_sync_left_bytes:-1</span><br><span class="line">master_sync_perc:-0.00</span><br><span class="line">master_sync_last_io_seconds_ago:0</span><br><span class="line">master_link_down_since_seconds:-1</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:54b564a0c9ce365c28c6cfdad02b242bd1bd43b1</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></tbody></table></figure>
<p>主机的主从信息。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2	<span class="comment"># 连接了两个从机</span></span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=wait_bgsave,offset=0,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=wait_bgsave,offset=0,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:1a9562c7e236c63f924abd1bdad46192f466337d</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:70</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:70</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><strong><font size="4px">运行测试</font></strong></p>
<p>在主机写入<strong>name:deflory</strong>后，从机也能读取到相应内容。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 主机写入</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name deflory</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"deflory"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从机1读取</span></span><br><span class="line">127.0.0.1:6380&gt; get name</span><br><span class="line"><span class="string">"deflory"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从机2读取</span></span><br><span class="line">127.0.0.1:6381&gt; get name</span><br><span class="line"><span class="string">"deflory"</span></span><br></pre></td></tr></tbody></table></figure>
<p>但是，从机只能用来读取数据，而不能修改数据，只读！</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> age 10</span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica.</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>那么如果此时，我们的主机宕机了会发生什么呢？</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 主机宕机</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 即使主机宕机了，由于数据已经复制到从机上了，因此仍然可以查询到</span></span><br><span class="line">127.0.0.1:6380&gt; get name</span><br><span class="line"><span class="string">"deflory"</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>接下来我们换个角度，从机宕机呢？</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 从机1宕机</span></span><br><span class="line">127.0.0.1:6380&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机写入数据</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从机2仍然可以正常读取数据</span></span><br><span class="line">127.0.0.1:6381&gt; get age</span><br><span class="line"><span class="string">"20"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新连接从机1</span></span><br><span class="line">[root@deflory src]<span class="comment"># ./redis-server ../master-slaver-config/redis80.config </span></span><br><span class="line">[root@deflory src]<span class="comment"># ./redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于之前我们是在命令行中设置主从机，因此重启之后就又默认成为了主机</span></span><br><span class="line"><span class="comment"># 想要实现重启还是从机的话，需要在配置文件中修改</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:e2f04142dad9c956952dd6cc62d27db9f654bf14</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置主机</span></span><br><span class="line">127.0.0.1:6380&gt; replicaof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get age	<span class="comment"># 从机在连接主机时会进行全量复制，因此宕机再连接还是可以查询到信息的</span></span><br><span class="line"><span class="string">"20"</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note success">
            <p>注：配置文件主从复制设置</p><p>在5.0.0之后，slaveof 逐渐被 replicaof 所取代，因此在配置文件中也不叫 slaveof 了，找了我好久！！！</p>
          </div>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置主机ip和端口</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the "requirepass" configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the replica to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the replica request.</span></span><br><span class="line"><span class="comment"># 如果主机有密码，需要进行auth认证</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>不过，就正常而言，如果主机宕机了，剩下的从机是无法进行写入操作的，因此一个比较好的解决方案，就是从剩下的从机中，再选出一个主机。</strong></p>
<p><br></p>
<h4 id="11-5、链式主从模式"><a href="#11-5、链式主从模式" class="headerlink" title="11.5、链式主从模式"></a>11.5、链式主从模式</h4><p>即如下设计结构，中间的服务器既是前面的从服务器，也是后面的主服务器。</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oejcsU.png" alt=""></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器1，角色：master，有一个slaver</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=44034,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:87d1dd88912bc43511d8542553412c7047692e75</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:44034</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:44034</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器2，角色：slaver，有一个slaver</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:44020</span><br><span class="line">slave_repl_offset:44020</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=44020,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:87d1dd88912bc43511d8542553412c7047692e75</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:44020</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1650</span><br><span class="line">repl_backlog_histlen:42371</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器3，角色：slaver，没有slaver，处于该链的末尾</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:5</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:44006</span><br><span class="line">slave_repl_offset:44006</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:87d1dd88912bc43511d8542553412c7047692e75</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:44006</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:44006</span><br></pre></td></tr></tbody></table></figure>
<p>测试，主服务器写入数据，后面两个从服务器都能读取数据。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name yqx</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get name</span><br><span class="line"><span class="string">"yqx"</span></span><br><span class="line">127.0.0.1:6381&gt; get name</span><br><span class="line"><span class="string">"yqx"</span></span><br></pre></td></tr></tbody></table></figure>
<p>但当主服务器宕机后，第二台服务器依旧不能写入数据。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> weight 60</span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica</span></span><br></pre></td></tr></tbody></table></figure>
<p>需要使用 <code>replicaof no one</code>，来将自己提升为主服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; replicaof no one</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=28,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:ae7b3b6cbc8f62fbcb8d179325de0e83afe61701</span><br><span class="line">master_replid2:78124558cc7e470c3eca6b2517ffbc3a0a6557a7</span><br><span class="line">master_repl_offset:28</span><br><span class="line">second_repl_offset:15</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:28</span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> weight 666</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 此时处于末尾的从服务器也能获取到刚刚设置的体重值</span></span><br><span class="line">127.0.0.1:6381&gt; get weight</span><br><span class="line"><span class="string">"666"</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>但是这种类似链式的主从复制模型，有着三个非常大的问题！！！</p>
          </div>
<ul>
<li>如果中间的某台服务器宕机了，那么后面的服务器就无法再接受到更新的数据了！</li>
<li>由于数据是像链式一样进行更新，处于末尾的从服务器会和前面的服务器的更新时间差距很大！</li>
<li>每次都要手动的选择主服务器，效率非常低！</li>
</ul>
<p><br></p>
<h4 id="11-6、主从复制运行原理"><a href="#11-6、主从复制运行原理" class="headerlink" title="11.6、主从复制运行原理"></a>11.6、主从复制运行原理</h4><p>Slave 启动成功连接到 master 后会发送一个 sync 同步指令</p>
<p>Master 接到指令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave 并完成一次完全同步。</p>
<p>全量复制：slave 在接收到数据库文件数据后，将其存盘并加载到内存中。</p>
<p>增量复制：Master 继续将新的所有收集到的修改命令一次传给 slave ，完成同步。</p>
<p>只要是重新连接到 Master，就会进行一次完全同步（全量复制 + 增量复制）。</p>
<p><img src="https://z3.ax1x.com/2021/11/27/oeXVBQ.png" alt="image"></p>
<p><strong><font size="5px">增量复制实现</font></strong></p>
<ul>
<li>主服务器的复制偏移量（replication offset）和从服务器的复制偏移量</li>
<li>主服务器的复制积压缓冲区（replication backlog）</li>
<li>服务器运行ID（run ID）</li>
</ul>
<div class="note success">
            <p><strong>复制偏移量</strong></p>
          </div>
<p>执行复制的双方——主服务器和从服务器分别维护着一个对应的复制偏移量。</p>
<ul>
<li>主服务器每次向从服务器传播 N 个字节的数据时，就将自己的复制偏移量的值加上 N。</li>
<li>从服务器每次收到主服务器传来的 N 个字节的数据时，也将自己的复制偏移量的值加上 N。</li>
</ul>
<p>通过对比主从服务器的复制偏移量，程序很容易就能知道主从服务器是否处于同一个状态。</p>
<ul>
<li>如果主从服务器处于一致的状态，那么他们的复制偏移量总是相同的。</li>
<li>相反，如果主从服务器的复制偏移量不相同，那么他们就并未处于一致的状态</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/11/28/ouNngg.png" alt="image"></p>
<div class="note success">
            <p><strong>复制积压缓冲区</strong></p>
          </div>
<p>复制积压缓冲区是由主服务器维护的一个固定长度（fixed-size）先进先出的队列，默认大小为1MB。固定长度的先入先出队列不能随着元素的增加和减少而动态的调整长度，固定长度先进先出队列的长度是固定的，<strong>当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</strong>。</p>
<p>当主服务器进行命令传播时，它不仅会将写命令发送给所有从服务器，还会降所有写命令入队到复制积压缓冲区里面，如图所示：</p>
<p><img src="https://z3.ax1x.com/2021/11/28/ouNUv4.png" alt="image"></p>
<p><strong>重连同步流程：</strong></p>
<ol>
<li>当从服务器A(上图为例)断线重连后，向主服务器发送PSYNC命令，报告自己的偏移量为10086。</li>
<li>主服务器收到命令后，检查偏移量10086之后的数据是否存在于复制积压缓冲区里。存在，向服务器发送+CONTINUE回复，表示数据同步将以部分重同步模式进行。（不存在，主服务器将对从服务器执行完整重同步操作）。</li>
<li>主服务器将复制积压缓冲区10086之后的所有数据发送给从服务器。</li>
<li>从服务器接收缺失数据，回到与主服务器一致的状态。</li>
</ol>
<p>因此，主服务器的复制积压缓冲区会存放近期传播过的写命令，并且<strong>复制积压缓冲区会为队列中的每个字节记录响应的复制偏移量</strong>。</p>
<p>当从服务器重新连接上主服务器时，从服务器会通过 PSYNC 命令将自己的复制偏移量 offset 发送给主服务器，主服务器会根据从服务器的复制偏移量来决定对从服务器执行何种同步操作。</p>
<ul>
<li>如果偏移量 offset 之后的数据仍然处于复制积压缓冲区里，那么主服务器将会对从服务器执行部分同步操作（增量复制）。</li>
<li>如果偏移量 offset 之后的数据已经不存在于复制积压缓冲区中，那么主服务器将会对从服务器执行完整同步操作（全量复制）。</li>
</ul>
<div class="note success">
            <p><strong>服务器运行 ID</strong></p>
          </div>
<p>除了复制偏移量和复制积压缓冲区之外，是部分重同步还需要用到服务器 ID：</p>
<ul>
<li>每个 Redis 服务器，不论是主服务器还是从服务器，都会有自己的运行 ID</li>
<li>运行 ID 在服务器启动时自动生成，由40个随机的十六进制地府组成</li>
</ul>
<p>当从服务器对主服务器进行初次复制时，主服务器会将自己的运行 ID 传递给从服务器，从服务器则会将这个运行 ID 保存起来。当从服务器断线并重新连接到主服务器时，从服务器就会比对之前连接的主服务器的运行 ID：</p>
<ul>
<li>如果从服务器保存的运行 ID 和当前连接的主服务器的运行 ID 一致，说明从服务器现在与之前连接的主服务器都是一个服务器，主服务器可以继续尝试执行部分重同步的操作。</li>
<li>如果从服务器保存的运行 ID 和当前连接的主服务器的运行 ID 不一致，说明在从服务器断连的这一段时间里，已经更换了一个主服务器，现在的主服务器需要对从服务器执行完整的重同步操作。</li>
</ul>
<div class="note success">
            <p><strong>PSYNC 命令的实现</strong></p>
          </div>
<p>PSYNC 命令的调用方式有两种：</p>
<ul>
<li>如果从服务器之前从来没有复制过任何主服务器，或者之前没有执行过 <code>slaveof no one</code> 命令，那么从服务器则会向主服务器发送 PSYNC? -1命令，主动请求服务器进行完整重同步</li>
<li>相反的，如果从服务器已经复制过某个主服务器，那么从服务器在开始一次新的复制时，将向主服务器发送 PSYNC runid offset 命令：其中 runid 是上一次复制的主服务器的运行 ID，而 offset 则是从服务器当前的复制偏移量，接收到这个命令的主服务器会根据这两个参数来判断对该从服务器执行哪儿中同步操作。<ul>
<li>如果主服务器返回 <code>+FULLRESYNC &lt;runid&gt; &lt;offset&gt;</code>，那么则表示主服务器将与从服务器进行完整重同步： 其中 runid 是当前主服务器的运行 ID，从服务器需将这个 ID 保存起来，再下一次发送 PASYNC 时使用；而 offset 则是当前主服务器的复制偏移量，而从服务器则会将这个值作为自己的初始化复制偏移量。</li>
<li>如果主服务器返回 <code>+Continue</code>，那么表示主服务器将与从服务器进行部分重同步操作，从服务器只要等着主服务器将自己缺少的那部分数据发送过来即可！</li>
<li>如果主服务器返回 <code>-ERR</code>，表示当前的主服务器版本低于2.8，它识别不了 PSYNC 命令，从服务器将向主服务器发送 SYNC 命令，并且与主服务器执行完全重同步操作。</li>
</ul>
</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/11/28/ouNIat.png" alt=""></p>
<div class="note success">
            <p><strong>心跳检测</strong></p>
          </div>
<p>在命令传播阶段，从服务器默认会以每秒一次的频率。像主服务器发送命令：<code>REPLCONF ACK &lt;offset&gt;</code>，其中 <code>offset</code> 是从服务器当前的复制偏移量。</p>
<p>作用：</p>
<ul>
<li><p>检测 主从服务器的网络连接状态</p>
</li>
<li><p>辅助实现 <strong>min-slaves</strong> 选项，min-slaves-to-write 和 min-slaves-max-lag 都是为了防止主服务器在不安全的情况下执行写命令。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">min-slaves-to-write 3</span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></tbody></table></figure>
<p>在从服务器数量小于3个，或者三个从服务器的延迟值（最后一次心跳检测距离现在过了多少秒）都大于等于十秒时，主服务器将拒绝执行写命令。</p>
</li>
<li><p>检测命令丢失。偏移量不一致时，会进行补发缺失数据的操作。</p>
</li>
</ul>
<p><br></p>
<h4 id="11-7、哨兵模式（Sentinel）【推荐】"><a href="#11-7、哨兵模式（Sentinel）【推荐】" class="headerlink" title="11.7、哨兵模式（Sentinel）【推荐】"></a>11.7、哨兵模式（Sentinel）【推荐】</h4><p>上述主从切换技术的方法，主要是通过在主服务器宕机的时候，人工手动地将某台从服务器切换成主服务器，再将其余的从服务器都配置成它的 slaver。<strong>这整一个过程需要人工干预，费时又费力，还会造成一段时间内的服务不可用</strong>。不推荐！</p>
<p>因此就有了<strong>哨兵模式</strong>。</p>
<div class="note success">
            <p><strong>什么是哨兵模式？</strong></p>
          </div>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</strong></p>
<p><img src="https://z3.ax1x.com/2021/11/28/oucAVU.png" alt="image"></p>
<p>这里哨兵有三个作用：</p>
<ul>
<li><strong>监控（Monitoring）</strong>：Sentinel 会不断检查你的主服务器和从服务器是否运作正常。</li>
<li><strong>提醒（Notification）</strong>：当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li>
<li><strong>自动故障迁移（Automotic failover）</strong>：当一个主服务器不能正常工作时，Sentinel 会开始一次自动故障迁移操作，它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让失效主服务器的其它从服务器也改为新的主服务器的从服务器。而当客户端试图连接失效的主服务器时，集群也会向客户端返回新主服务器的地址，使得集群可以使用新主服务器来代替失效的服务器。</li>
</ul>
<p>诶，可是如果这个哨兵进程宕机了，整个系统不就崩盘了吗？</p>
<p>为此，我们可以使用多个哨兵进行监控。各个哨兵之间也会互相监控，这样就形成了多哨兵模式。</p>
<p><img src="https://z3.ax1x.com/2021/11/28/ougD61.png" alt="image"></p>
<p>这里简单用文字描述一下<strong>故障切换（failover）</strong>的过程。</p>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观地认为主服务器不可用，这个现象被称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就行进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅的方式，让各个哨兵把自己监控的从服务器实现切换主机，在个过程成为<strong>客观下线</strong>，这样对于客户端而言，一切都是透明的。</p>
<div class="note success">
            <p><strong>每个 Sentinel 都需要定期执行的任务</strong></p>
          </div>
<ul>
<li>每个 Sentinel 以每秒钟一次的频率向它所知的主服务器、从服务器以及其他 Sentinel 实例发送一个 PING 命令。</li>
<li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 那么这个实例会被 Sentinel 标记为主观下线。 一个有效回复可以是： +PONG 、 -LOADING 或者 -MASTERDOWN 。</li>
<li>如果一个主服务器被标记为主观下线， 那么正在监视这个主服务器的所有 Sentinel 要以每秒一次的频率确认主服务器的确进入了主观下线状态。</li>
<li>如果一个主服务器被标记为主观下线， 并且有足够数量的 Sentinel （至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断， 那么这个主服务器被标记为客观下线。</li>
<li>在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。 当一个主服务器被 Sentinel 标记为客观下线时， Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li>
<li>当没有足够数量的 Sentinel 同意主服务器已经下线， 主服务器的客观下线状态就会被移除。 当主服务器重新向 Sentinel 的 PING 命令返回有效回复时， 主服务器的主观下线状态就会被移除。</li>
</ul>
<div class="note success">
            <p><strong>自动发现 Sentinel 和从服务器</strong></p>
          </div>
<p>一个 Sentinel 可以与其他多个 Sentinel 进行连接， 各个 Sentinel 之间可以互相检查对方的可用性， 并进行信息交换。</p>
<p>你无须为运行的每个 Sentinel 分别设置其他 Sentinel 的地址， 因为 Sentinel 可以通过发布与订阅功能来自动发现正在监视相同主服务器的其他 Sentinel ， 这一功能是通过向频道 <strong>sentinel:hello</strong> 发送信息来实现的。</p>
<p>与此类似， 你也不必手动列出主服务器属下的所有从服务器， 因为 Sentinel 可以通过询问主服务器来获得所有从服务器的信息。</p>
<ul>
<li>每个 Sentinel 会以每两秒一次的频率， 通过发布与订阅功能， 向被它监视的所有主服务器和从服务器的 <strong>sentinel:hello</strong> 频道发送一条信息， 信息中包含了 Sentinel 的 IP 地址、端口号和运行 ID （runid）。</li>
<li>每个 Sentinel 都订阅了被它监视的所有主服务器和从服务器的 <strong>sentinel:hello</strong> 频道， 查找之前未出现过的 sentinel （looking for unknown sentinels）。 当一个 Sentinel 发现一个新的 Sentinel 时， 它会将新的 Sentinel 添加到一个列表中， 这个列表保存了 Sentinel 已知的， 监视同一个主服务器的所有其他 Sentinel 。</li>
<li>Sentinel 发送的信息中还包括完整的主服务器当前配置（configuration）。 如果一个 Sentinel 包含的主服务器配置比另一个 Sentinel 发送的配置要旧， 那么这个 Sentinel 会立即升级到新配置上。</li>
<li>在将一个新 Sentinel 添加到监视主服务器的列表上面之前， Sentinel 会先检查列表中是否已经包含了和要添加的 Sentinel 拥有相同运行 ID 或者相同地址（包括 IP 地址和端口号）的 Sentinel ， 如果是的话， Sentinel 会先移除列表中已有的那些拥有相同运行 ID 或者相同地址的 Sentinel ， 然后再添加新 Sentinel 。</li>
</ul>
<div class="note success">
            <p><strong>故障转移</strong></p>
          </div>
<p>一次故障转移操作由以下步骤组成：</p>
<ul>
<li>发现主服务器已经进入客观下线状态。</li>
<li>对我们的当前纪元进行自增（详情请参考 Raft leader election ）， 并尝试在这个纪元中当选。</li>
<li>如果当选失败， 那么在设定的故障迁移超时时间的两倍之后， 重新尝试当选。 如果当选成功， 那么执行以下步骤。</li>
<li>选出一个从服务器，并将它升级为主服务器。</li>
<li>向被选中的从服务器发送 <code>SLAVEOF NO ONE</code> 命令，让它转变为主服务器。</li>
<li>通过发布与订阅功能， 将更新后的配置传播给所有其他 Sentinel ， 其他 Sentinel 对它们自己的配置进行更新。</li>
<li>向已下线主服务器的从服务器发送 <strong>SLAVEOF</strong> 命令， 让它们去跟随新的主服务器。</li>
<li>当所有从服务器都已经开始跟随新的主服务器时， 领头 Sentinel 终止这次故障迁移操作。</li>
</ul>
<p>每当一个 Redis 实例被重新配置（reconfigured） —— 无论是被设置成主服务器、从服务器、又或者被设置成其他主服务器的从服务器 —— Sentinel 都会向被重新配置的实例发送一个 CONFIG REWRITE 命令， 从而确保这些配置会持久化在硬盘里。</p>
<p>Sentinel 使用以下规则来选择新的主服务器：</p>
<ul>
<li>在失效主服务器属下的从服务器当中， 那些被标记为主观下线、已断线、或者最后一次回复 PING 命令的时间大于五秒钟的从服务器都会被淘汰。</li>
<li>在失效主服务器属下的从服务器当中， 那些与失效主服务器连接断开的时长超过 down-after 选项指定的时长十倍的从服务器都会被淘汰。</li>
<li>在经历了以上两轮淘汰之后剩下来的从服务器中， 我们选出复制偏移量（replication offset）最大的那个从服务器作为新的主服务器； 如果复制偏移量不可用， 或者从服务器的复制偏移量相同， 那么带有最小运行 ID 的那个从服务器成为新的主服务器。</li>
</ul>
<div class="note success">
            <p><strong>Sentinel 自动故障迁移的一致性特质</strong></p>
          </div>
<p>Sentinel 自动故障迁移使用 Raft 算法来选举领头（leader） Sentinel ， 从而确保在一个给定的纪元（epoch）里， 只有一个领头产生。</p>
<p>这表示在同一个纪元中， 不会有两个 Sentinel 同时被选中为领头， 并且各个 Sentinel 在同一个纪元中只会对一个领头进行投票。</p>
<p>更高的配置纪元总是优于较低的纪元， 因此每个 Sentinel 都会主动使用更新的纪元来代替自己的配置。</p>
<p>简单来说， 我们可以将 Sentinel 配置看作是一个带有版本号的状态。 一个状态会以最后写入者胜出（last-write-wins）的方式（也即是，最新的配置总是胜出）传播至所有其他 Sentinel 。</p>
<p>举个例子， 当出现网络分割（network partitions）时， 一个 Sentinel 可能会包含了较旧的配置， 而当这个 Sentinel 接到其他 Sentinel 发来的版本更新的配置时， Sentinel 就会对自己的配置进行更新。</p>
<p>如果要在网络分割出现的情况下仍然保持一致性， 那么应该使用 min-slaves-to-write 选项， 让主服务器在连接的从实例少于给定数量时停止执行写操作， 与此同时， 应该在每个运行 Redis 主服务器或从服务器的机器上运行 Redis Sentinel 进程。</p>
<div class="note success">
            <p><strong>Sentinel 状态的持久化</strong></p>
          </div>
<p>Sentinel 的状态会被持久化在 Sentinel 配置文件里面。</p>
<p>每当 Sentinel 接收到一个新的配置， 或者当领头 Sentinel 为主服务器创建一个新的配置时， 这个配置会与配置纪元一起被保存到磁盘里面。</p>
<p>这意味着停止和重启 Sentinel 进程都是安全的。</p>
<div class="note success">
            <p><strong>Sentinel 在非故障迁移的情况下对实例进行重新配置</strong></p>
          </div>
<p>即使没有自动故障迁移操作在进行， Sentinel 总会尝试将当前的配置设置到被监视的实例上面。 特别是：</p>
<ul>
<li>根据当前的配置， 如果一个从服务器被宣告为主服务器， 那么它会代替原有的主服务器， 成为新的主服务器， 并且成为原有主服务器的所有从服务器的复制对象。 那些连接了错误主服务器的从服务器会被重新配置， 使得这些从服务器会去复制正确的主服务器。</li>
</ul>
<p>不过， 在以上这些条件满足之后， Sentinel 在对实例进行重新配置之前仍然会等待一段足够长的时间， 确保可以接收到其他 Sentinel 发来的配置更新， 从而避免自身因为保存了过期的配置而对实例进行了不必要的重新配置。</p>
<div class="note success">
            <p><strong>TILT 模式</strong></p>
          </div>
<p>Redis Sentinel 严重依赖计算机的时间功能： 比如说， 为了判断一个实例是否可用， Sentinel 会记录这个实例最后一次相应 PING 命令的时间， 并将这个时间和当前时间进行对比， 从而知道这个实例有多长时间没有和 Sentinel 进行任何成功通讯。</p>
<p>不过， 一旦计算机的时间功能出现故障， 或者计算机非常忙碌， 又或者进程因为某些原因而被阻塞时， Sentinel 可能也会跟着出现故障。</p>
<p>TILT 模式是一种特殊的保护模式： 当 Sentinel 发现系统有些不对劲时， Sentinel 就会进入 TILT 模式。</p>
<p>因为 Sentinel 的时间中断器默认每秒执行 10 次， 所以我们预期时间中断器的两次执行之间的间隔为 100 毫秒左右。 Sentinel 的做法是， 记录上一次时间中断器执行时的时间， 并将它和这一次时间中断器执行的时间进行对比：</p>
<ul>
<li>如果两次调用时间之间的差距为负值， 或者非常大（超过 2 秒钟）， 那么 Sentinel 进入 TILT 模式。</li>
<li>如果 Sentinel 已经进入 TILT 模式， 那么 Sentinel 延迟退出 TILT 模式的时间。</li>
</ul>
<p>当 Sentinel 进入 TILT 模式时， 它仍然会继续监视所有目标， 但是：</p>
<ul>
<li>它不再执行任何操作，比如故障转移。</li>
<li>当有实例向这个 Sentinel 发送 SENTINEL is-master-down-by-addr 命令时， Sentinel 返回负值： 因为这个 Sentinel 所进行的下线判断已经不再准确。</li>
</ul>
<p>如果 TILT 可以正常维持 30 秒钟， 那么 Sentinel 退出 TILT 模式。</p>
<div class="note success">
            <p><strong>处理 -BUSY 状态</strong></p>
          </div>
<p>当 Lua 脚本的运行时间超过指定时限时， Redis 就会返回 -BUSY 错误。</p>
<p>当出现这种情况时， Sentinel 在尝试执行故障转移操作之前， 会先向服务器发送一个 SCRIPT KILL 命令， 如果服务器正在执行的是一个只读脚本的话， 那么这个脚本就会被杀死， 服务器就会回到正常状态。</p>
<h4 id="11-8、哨兵模式实战"><a href="#11-8、哨兵模式实战" class="headerlink" title="11.8、哨兵模式实战"></a>11.8、哨兵模式实战</h4><p>创建配置文件 sentinel.conf</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 哨兵实例运行端口</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵工作目录</span></span><br><span class="line">/tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="comment"># quorum 表示有多少哨兵认为主服务器主观下线时，那么这时主服务器就变成了客观下线</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></tbody></table></figure>
<p><strong>哨兵模式配置参数</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>配置项</th>
<th>参数类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>port</td>
<td>整数</td>
<td>启动哨兵进程端口</td>
</tr>
<tr>
<td>dir</td>
<td>文件夹目录</td>
<td>哨兵进程服务临时文件夹，默认为/tmp，要保证有可写入的权限</td>
</tr>
<tr>
<td>sentinel down-after-milliseconds</td>
<td>&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td>
<td>指定哨兵在监控Redis服务时，当Redis服务在一个默认毫秒数内都无法回答时，单个哨兵认为的主观下线时间，默认为30000（30秒）</td>
</tr>
<tr>
<td>sentinel parallel-syncs</td>
<td>&lt;服务名称&gt;&lt;服务器数（整数）&gt;</td>
<td>指定可以有多少个Redis服务同步新的主机，一般而言，这个数字越小同步时间越长，而越大，则对网络资源要求越高</td>
</tr>
<tr>
<td>sentinel failover-timeout</td>
<td>&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td>
<td>指定故障切换允许的毫秒数，超过这个时间，就认为故障切换失败，默认为3分钟</td>
</tr>
<tr>
<td>sentinel notification-script</td>
<td>&lt;服务名称&gt;&lt;脚本路径&gt;</td>
<td>指定sentinel检测到该监控的redis实例指向的实例异常时，调用的报警脚本。该配置项可选，比较常用</td>
</tr>
</tbody>
</table>
</div>
<p><strong>运行哨兵进程</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ./redis-sentinel ../master-slaver-config/sentinel.conf </span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>查看哨兵进程</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@deflory src]<span class="comment"># ps -ef|grep sentinel</span></span><br><span class="line">root     14853     1  0 20:54 ?        00:00:00 ./redis-sentinel *:26379 [sentinel]</span><br><span class="line">root     15149 28363  0 20:54 pts/2    00:00:00 grep --color=auto sentinel</span><br></pre></td></tr></tbody></table></figure>
<p>接下来配置主从复制，这里我们仍然选择<strong>一主二从</strong>的模式。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=25982,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6380,state=online,offset=25982,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:3c7139ce2e8248ef2ea5d79c00387b3356c16e14</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:25982</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:72</span><br><span class="line">repl_backlog_histlen:25911</span><br></pre></td></tr></tbody></table></figure>
<p>关闭主服务器（端口6379），哨兵进程就开始工作了，将主服务器的身份移给了从服务器（端口6380）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">32507:X 28 Nov 2021 21:06:51.180 <span class="comment"># +failover-end master mymaster 127.0.0.1 6379</span></span><br><span class="line">32507:X 28 Nov 2021 21:06:51.180 <span class="comment"># +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=37163,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:c8d0b6a5529667f15d6322888a45a8f42ca1e5b9</span><br><span class="line">master_replid2:3c7139ce2e8248ef2ea5d79c00387b3356c16e14</span><br><span class="line">master_repl_offset:37296</span><br><span class="line">second_repl_offset:36595</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:22964</span><br><span class="line">repl_backlog_histlen:14333</span><br></pre></td></tr></tbody></table></figure>
<p>紧接着我再把当前新的主服务器关闭，现在只剩一台服务器，理所当然就成为了主服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">32507:X 28 Nov 2021 21:09:07.218 <span class="comment"># +failover-end master mymaster 127.0.0.1 6380</span></span><br><span class="line">32507:X 28 Nov 2021 21:09:07.218 <span class="comment"># +switch-master mymaster 127.0.0.1 6380 127.0.0.1 6381</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line">Error: Server closed the connection</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:8203b47d316f6e313b7512a9d78c9ea12ff10d42</span><br><span class="line">master_replid2:c8d0b6a5529667f15d6322888a45a8f42ca1e5b9</span><br><span class="line">master_repl_offset:44095</span><br><span class="line">second_repl_offset:43674</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:13301</span><br><span class="line">repl_backlog_histlen:30795</span><br></pre></td></tr></tbody></table></figure>
<p>此时再将原来的主服务器（端口6379）重新连接，直接就变成了现主服务器的从服务器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">32507:X 28 Nov 2021 21:11:08.150 * +convert-to-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6381</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:63627</span><br><span class="line">slave_repl_offset:63627</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:8203b47d316f6e313b7512a9d78c9ea12ff10d42</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:63627</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:51544</span><br><span class="line">repl_backlog_histlen:12084</span><br></pre></td></tr></tbody></table></figure>
<p>原来的从服务器（端口6380）就更是如此了。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">32507:X 28 Nov 2021 21:14:49.324 * +convert-to-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6381</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6381</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:69747</span><br><span class="line">slave_repl_offset:69747</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:8203b47d316f6e313b7512a9d78c9ea12ff10d42</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:69747</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:66211</span><br><span class="line">repl_backlog_histlen:3537</span><br></pre></td></tr></tbody></table></figure>
<h2 id="十二、缓存问题"><a href="#十二、缓存问题" class="headerlink" title="十二、缓存问题"></a>十二、缓存问题</h2><h4 id="11-1、缓存雪崩"><a href="#11-1、缓存雪崩" class="headerlink" title="11.1、缓存雪崩"></a>11.1、缓存雪崩</h4><p>当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。</p>
<p><img src="https://z3.ax1x.com/2021/11/28/ouvfZ8.png" alt=""></p>
<p><strong><font size="4px">分析：</font></strong></p>
<p>造成缓存雪崩的关键在于在同一时间大规模的key失效。为什么会出现这个问题呢，有几种可能，第一种可能是 Redis 宕机，第二种可能是采用了相同的过期时间（购物节零点秒杀，大量商品同时失效）。搞清楚原因之后，那么有什么解决方案呢？</p>
<p><strong><font size="4px">解决方案：</font></strong></p>
<ol>
<li>在原有的失效时间上加上一个随机值，比如1-5分钟随机。这样就避免了因为采用相同的过期时间导致的缓存雪崩。</li>
<li>使用熔断机制。当流量到达一定的阈值时，就直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上。至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。</li>
<li>提高数据库的容灾能力，可以使用分库分表，读写分离的策略。</li>
<li>为了防止Redis宕机导致缓存雪崩的问题，可以搭建Redis集群，提高Redis的容灾性。</li>
</ol>
<p><br></p>
<h4 id="11-2、缓存击穿"><a href="#11-2、缓存击穿" class="headerlink" title="11.2、缓存击穿"></a>11.2、缓存击穿</h4><p>其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。</p>
<p><strong><font size="4px">分析：</font></strong></p>
<p>关键在于某个热点的key失效了，导致大并发集中打在数据库上。所以要从两个方面解决，第一是否可以考虑热点key不设置过期时间，第二是否可以考虑降低打在数据库上的请求数量。</p>
<p><strong><font size="4px">解决方案：</font></strong></p>
<ol>
<li>如果业务允许的话，对于热点的 key 可以设置永不过期。</li>
<li>使用互斥锁。如果缓存失效的情况，只有拿到锁才可以查询数据库，降低了在同一时刻打在数据库上的请求，防止数据库打死。当然这样会导致系统的性能变差。</li>
</ol>
<p><br></p>
<h4 id="11-3、缓存穿透"><a href="#11-3、缓存穿透" class="headerlink" title="11.3、缓存穿透"></a>11.3、缓存穿透</h4><p>我们使用Redis大部分情况都是通过Key查询对应的值，假如发送的请求传进来的key是不存在Redis中的，那么就查不到缓存，查不到缓存就会去数据库查询。假如有大量这样的请求，这些请求像“穿透”了缓存一样直接打在数据库上，这种现象就叫做缓存穿透。</p>
<p><strong><font size="4px">分析：</font></strong></p>
<p>关键在于在Redis查不到key值，这和缓存击穿有根本的区别，区别在于<strong>缓存穿透的情况是传进来的key在Redis中是不存在的</strong>。假如有黑客传进大量的不存在的key，那么大量的请求打在数据库上是很致命的问题，所以在日常开发中要对参数做好校验，一些非法的参数，不可能存在的key就直接返回错误提示，要对调用方保持这种“不信任”的心态。</p>
<p><strong><font size="4px">解决方案：</font></strong></p>
<ol>
<li><strong>把无效的Key存进Redis中</strong>。如果Redis查不到数据，数据库也查不到，我们把这个Key值保存进Redis，设置value=”null”，当下次再通过这个Key查询时就不需要再查询数据库。这种处理方式肯定是有问题的，假如传进来的这个不存在的Key值每次都是随机的，那存进Redis也没有意义。</li>
<li><strong>使用布隆过滤器</strong>。布隆过滤器的作用是某个 key 不存在，那么就一定不存在，它说某个 key 存在，那么很大可能是存在(存在一定的误判率)。于是我们可以在缓存之前再加一层布隆过滤器，在查询的时候先去布隆过滤器查询 key 是否存在，如果不存在就直接返回。</li>
</ol>
<p><img src="https://z3.ax1x.com/2021/11/28/ouxz0f.png" alt="image"></p>
<p><br></p>
<h4 id="11-4、小结"><a href="#11-4、小结" class="headerlink" title="11.4、小结"></a>11.4、小结</h4><p>这三个问题在使用Redis的时候是肯定会遇到的，而且是非常致命性的问题，所以在日常开发中一定要注意，每次使用Redis时，都要对其保持严谨的态度。还有一个需要注意的是要做好熔断，一旦出现缓存雪崩，击穿，穿透这种情况，至少还有熔断机制保护数据库不会被打死。</p>
]]></content>
      <categories>
        <category>DataBase System</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
</search>
