<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android数据存储</title>
    <url>/2021/09/24/Android%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>作为一个完整的应用程序，不可能每一次手机重启了，整个应用程序就和刚下载时候一样，因此数据的存储与操作是必不可少的。Android 系统为我们提供了4种数据存储方式，分别是：SharedPreference、SQLite、ContentProvider 和文件。</p>
<span id="more"></span>
<p><br></p>
<h4 id="1-SharedPreference-存储："><a href="#1-SharedPreference-存储：" class="headerlink" title="1. SharedPreference 存储："></a>1. SharedPreference 存储：</h4><p><strong>本质就是基于 xml 文件存储<code>键值对</code>数据，通常用来存储一些简单的配置信息。</strong></p>
<p>   (1) getPreferences，文件名与 Activity 名一致，是该 Activity 独有的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sharedpreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        SharedPreferences shp = getPreferences(Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(<span class="string">"data"</span>, <span class="number">1234</span>);</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>数据被写入到 /data/data/package（包名）/shared_prefs/MainActivity.xml 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>​    (2) getSharedPreferences 与 (1)类似，可以自己设置文件名， 而且是共享的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sharedpreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        SharedPreferences shp = getSharedPreferences(<span class="string">"SavedData"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(<span class="string">"data"</span>, <span class="number">8888</span>);</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>数据被写入到 /data/data/package（包名）/shared_prefs/SavedData.xml 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">value</span>=<span class="string">"8888"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p><strong>运用到ViewModel中</strong></p>
<p>ViewModel部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androidviewmodel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.AndroidViewModel;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateHandle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">AndroidViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> SavedStateHandle handle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span><span class="params">(Application application, SavedStateHandle handle)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(application);</span><br><span class="line">        <span class="keyword">this</span>.handle = handle;</span><br><span class="line">        <span class="keyword">if</span> (!handle.contains(MainActivity.KEY_NAME)) {</span><br><span class="line">            load();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> handle.getLiveData(MainActivity.KEY_NAME);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>{</span><br><span class="line">        SharedPreferences shp = getApplication().getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        handle.set(MainActivity.KEY_NAME, shp.getInt(MainActivity.KEY_NAME, <span class="number">0</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>{</span><br><span class="line">        SharedPreferences shp = getApplication().getSharedPreferences(<span class="string">"data"</span>, Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = shp.edit();</span><br><span class="line">        editor.putInt(MainActivity.KEY_NAME, handle.get(MainActivity.KEY_NAME));</span><br><span class="line">        editor.apply();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        handle.set(MainActivity.KEY_NAME, getNumber().getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>MainaActivity部分</p>
<p>这里 viewModel.save() 之所以放在onPause() 中，是因为比较保险，如果放在 add() 中，每加一次都进行一次读写操作，开销会比较大，而如果放在onStop() 或 onDestory() 中，又会面临着万一出现意料以外的问题没有调用这两个方法导致数据丢失就比较尴尬了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.androidviewmodel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateViewModelFactory;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.androidviewmodel.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">private</span> MyViewModel viewModel;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY_NAME = <span class="string">"Number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        viewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        binding.setData(viewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        viewModel.save();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo使用自定义的CSS和JS</title>
    <url>/2021/08/26/Hexo%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84CSS%E5%92%8CJS/</url>
    <content><![CDATA[<h2 id="Hexo的执行逻辑"><a href="#Hexo的执行逻辑" class="headerlink" title="Hexo的执行逻辑"></a>Hexo的执行逻辑</h2><p>Hexo是根据用户写的md文件进行渲染，得到对应的html文件在网站上显示。但有的时候会需要自定义页面，当然Hexo也给我们预留了解决方案。</p>
<p>这里我要实现的效果就是新建一个游戏标签页，效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<p><br></p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>首先，要新建一个标签页面就需要在NexT的配置文件中添加标签以及对应路由。</p>
<p>其中<code>fa fa-gamepad</code>是<a href="http://www.fontawesome.com.cn">Font Awesome</a>提供的矢量图标。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  game: /game/ || fa fa-gamepad</span><br></pre></td></tr></tbody></table></figure>
<p>如果不想要英文的标签的话，以中文举例，可以到<code>themes/next/languages/zh-CN.yml</code>下添加game对应的中文。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br><span class="line">  game: 游戏</span><br></pre></td></tr></tbody></table></figure>
<p>然后使用git命令<code>hexo new page game</code>，创建/game对应md文件。</p>
<p>注：如需更改一些全局样式，可到Next配置文件的<code>custom_file_path</code>中修改</p>
<span id="more"></span>
<p><br></p>
<h2 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h2><p>自定义渲染分为两种，一种是主题内渲染，一种是完全页面渲染。</p>
<h4 id="1-主题内渲染"><a href="#1-主题内渲染" class="headerlink" title="1.主题内渲染"></a>1.主题内渲染</h4><p><code>layout: false</code>表示该md不会经过layout的渲染。</p>
<p>同时可以保存添加的模块，主题的头部信息，仅对主体部分进行自定义。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">title: game</span><br><span class="line">date: 2021-08-26 15:45:42</span><br><span class="line">layout: false</span><br></pre></td></tr></tbody></table></figure>
<p>这里头部的导航栏以及侧边的统计栏都是保存的。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG12W9.png" alt="game"></p>
<h4 id="2-完全页面渲染"><a href="#2-完全页面渲染" class="headerlink" title="2.完全页面渲染"></a>2.完全页面渲染</h4><p>在Hexo的配置文件中，<code>skip_render</code>用来配置跳过渲染的文件。</p>
<p>例：<code>skip_render: game/*</code>，指game/下的文件不会被渲染。</p>
<p>若是<code>game/**</code>则代表目录递归，包含子目录中的文件。</p>
<p>或是指定某个文件：<code>game/index.md</code></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># Directory</span></span><br><span class="line">source<span class="emphasis">_dir: source</span></span><br><span class="line"><span class="emphasis">public_</span>dir: public</span><br><span class="line">tag<span class="emphasis">_dir: tags</span></span><br><span class="line"><span class="emphasis">archive_</span>dir: archives</span><br><span class="line">category<span class="emphasis">_dir: categories</span></span><br><span class="line"><span class="emphasis">code_</span>dir: downloads/code</span><br><span class="line">i18n<span class="emphasis">_dir: :lang</span></span><br><span class="line"><span class="emphasis">skip_</span>render: game/<span class="emphasis">*</span></span><br></pre></td></tr></tbody></table></figure>
<p>完全页面渲染正如其名，不会包含主题模块等信息，全权由自己来设计。</p>
<p>这里我还没有添加CSS和JS。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1fQ1.png" alt="example2"></p>
<p><br></p>
<h2 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h2><p>主题内渲染由于头部信息是主题给定的，因此CSS不能直接使用html的<code>&lt;style&gt;</code>导入CSS，JS同理。</p>
<p>所以需要直接给NexT添加我们需要的CSS文件。</p>
<p>在<code>themes/next/source/css</code>中，首先创建CSS文件的目录，为了与主题自带的CSS区分开，我们新建一个文件夹<code>_mycss</code>，然后创建<code>game.styl</code>，代码如下。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">.game_img *,.game_img *:after,.game_img *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }</span><br><span class="line">body .game_img, html .game_img { font-size: 100%; padding: 0; margin: 0;}</span><br><span class="line">body .game_img{</span><br><span class="line">	font-family: 'Lato', Calibri, Arial, sans-serif;</span><br><span class="line">	color: #b3b9bf;</span><br><span class="line">	background: #f9f9f9;</span><br><span class="line">}</span><br><span class="line">.game_img a {</span><br><span class="line">	color: #888;</span><br><span class="line">	text-decoration: none;</span><br><span class="line">}</span><br><span class="line">.game_img a:hover,.game_img a:active {</span><br><span class="line">	color: #333;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid {</span><br><span class="line">	padding: 20px 20px 100px 20px;</span><br><span class="line">	max-width: 1300px;</span><br><span class="line">	margin: 0 auto;</span><br><span class="line">	list-style: none;</span><br><span class="line">	text-align: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid li {</span><br><span class="line">	display: inline-block;</span><br><span class="line">	width: 350px;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure {</span><br><span class="line">	margin: 0;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figure img {</span><br><span class="line">	max-width: 100%;</span><br><span class="line">	display: block;</span><br><span class="line">	position: relative;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption {</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 0;</span><br><span class="line">	left: 0;</span><br><span class="line">	padding: 20px;</span><br><span class="line">	background: #2c3f52;</span><br><span class="line">	color: #ed4e6e;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption h3 {</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption span:before {</span><br><span class="line">	content: 'by ';</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.grid figcaption a {</span><br><span class="line">	text-align: center;</span><br><span class="line">	padding: 5px 10px;</span><br><span class="line">	border-radius: 2px;</span><br><span class="line">	display: inline-block;</span><br><span class="line">	background: #ed4e6e;</span><br><span class="line">	color: #fff;</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">/* 说明文字样式 1 */</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption {</span><br><span class="line">	height: 100%;</span><br><span class="line">	width: 100%;</span><br><span class="line">	opacity: 0;</span><br><span class="line">	text-align: center;</span><br><span class="line">	-webkit-backface-visibility: hidden;</span><br><span class="line">	-moz-backface-visibility: hidden;</span><br><span class="line">	backface-visibility: hidden;</span><br><span class="line">	-webkit-transition: -webkit-transform 0.3s, opacity 0.3s;</span><br><span class="line">	-moz-transition: -moz-transform 0.3s, opacity 0.3s;</span><br><span class="line">	transition: transform 0.3s, opacity 0.3s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.no-touch .cs-style-1 figure:hover figcaption,</span><br><span class="line">.cs-style-1 figure.cs-hover figcaption {</span><br><span class="line">	opacity: 1;</span><br><span class="line">	-webkit-transform: translate(15px, 15px);</span><br><span class="line">	-moz-transform: translate(15px, 15px);</span><br><span class="line">	-ms-transform: translate(15px, 15px);</span><br><span class="line">	transform: translate(15px, 15px);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption h3 {</span><br><span class="line">	margin-top: 35px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption span {</span><br><span class="line">	display: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.cs-style-1 figcaption a {</span><br><span class="line">	margin-top: 20px;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>
<p>然后返回上一级目录，现在在<code>themes/next/source/css</code>中，打开<code>main.styl</code>在尾部添加如下代码，将我们的CSS导入进来就好了！</p>
<p>一定要加注释！不然过几天都不知道这一段CSS是干什么用的。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">//Games</span><br><span class="line">@import "<span class="emphasis">_mycss/game";</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="自定义JS"><a href="#自定义JS" class="headerlink" title="自定义JS"></a>自定义JS</h2><p>同CSS一样，来到<code>themes/next/source/js</code>下，先创建一个我们自己的JS文件夹<code>game</code>，然后将我们预先下载好的<code>modernizr.custom.js</code>放在该目录下，准备工作就完毕了。</p>
<p>然后就需要导入JS文件，我们打开<code>themes/next/layout/_layout.swig</code>，在<code>&lt;head&gt;</code>标签下，添加JS路径，就大功告成了！</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/game/modernizr.custom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h2><p>最后附上我的HTML代码，目前只有一个框架，游戏还没有写<span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"game_img"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"grid cs-style-1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/images/tetris.jpg"</span> <span class="attr">alt</span>=<span class="string">"img04"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>俄罗斯方块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>DeFlory<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Take a look<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity生命周期</title>
    <url>/2021/09/23/Android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="Activity状态"><a href="#Activity状态" class="headerlink" title="Activity状态"></a>Activity状态</h2><p>Activity 生命周期是指 Activity 从<code>创建</code>到<code>销毁</code>的过程，在这一过程中，Activity 一般处于4种状态，即Active/Running、Paused、Stop、Killed。</p>
<ol>
<li>Active/Running。此时 Activity 一定处于屏幕的最顶端，可以被看到，并且可以与用户进行交互。对于 Activity 栈来说，它处于<code>栈顶</code>。</li>
<li>Paused。此时 Activity 在屏幕上仍然<code>可见</code>，但它已经失去了焦点，用户不能与之交互。处于暂停的 Activity 仍然是存活的，它仍然维持着其内部的状态的信息，但是系统可能会在内存不足时杀死该 Activity。</li>
<li>Stop。此时 Activity 在屏幕上不能被用户所见，即该 Activity 被其它 Activity 所<code>遮盖</code>。同 Paused 状态类似，处于停止状态的 Activity 仍然保留着其内部的状态和成员信息，但是会由于手机系统内存被征用而被系统杀死回收。</li>
<li>Killed。Activity 被系统杀死<code>回收</code>或未启动。</li>
</ol>
<p><br></p>
<h2 id="生命周期的事件回调函数"><a href="#生命周期的事件回调函数" class="headerlink" title="生命周期的事件回调函数"></a>生命周期的事件回调函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">可被杀死</th>
<th style="text-align:center">下一个</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onCreate()</td>
<td style="text-align:center">当 Activity 第一次被创建时调用</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onStart()</td>
</tr>
<tr>
<td style="text-align:center">onRestart()</td>
<td style="text-align:center">当 Activity 停止后，再次启动前调用</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onStart()</td>
</tr>
<tr>
<td style="text-align:center">onStart()</td>
<td style="text-align:center">当 Activity 正要变得为用户所见时被调用<br>当 Activity 转向前台时继以 onResume()<br>当 Activity 变为隐藏时继以 onStop()</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onResume() <br>onStop()</td>
</tr>
<tr>
<td style="text-align:center">onResume()</td>
<td style="text-align:center">当 Activity 开始与用户进行交互前被调用<br>此时 Activity 位于堆栈顶部，用户可见。继以 onPause()</td>
<td style="text-align:center">否</td>
<td style="text-align:center">onPause()</td>
</tr>
<tr>
<td style="text-align:center">onPause()</td>
<td style="text-align:center">当系统将要启动另一个 Activity 或者弹出对话框时调用<br>此方法会将所有持久性数据写入存储中，下一个 Activity 必须待其完成才能继续<br>当 Activity 重新回到前台时继以 onResume()<br>当 Activity 变为用户不可见时继以 onStop()</td>
<td style="text-align:center">是</td>
<td style="text-align:center">onResume()<br>onStop()</td>
</tr>
<tr>
<td style="text-align:center">onStop()</td>
<td style="text-align:center">当 Activity 不再为用户可见时调用<br>这可能发生在它被销毁或者另一个 Activity （可能是现存或新建的）回到运行状态并覆盖它时<br>如果 Activity 再次回到前台跟用户交互则继以 onRestart()<br>如果关闭 Activity 则继以 onDestory()</td>
<td style="text-align:center">是</td>
<td style="text-align:center">onRestart()<br>onDestory()</td>
</tr>
<tr>
<td style="text-align:center">onDestroy()</td>
<td style="text-align:center">在 Activity 销毁前调用<br>这可能发生在 Activity 结束（调用它的 finish() 方法）或者因为系统需要临时空间而销毁该 Activity 实例时<br>可以用 isFinishing() 来区分这两种情况</td>
<td style="text-align:center">是</td>
<td style="text-align:center">无</td>
</tr>
</tbody>
</table>
</div>
<p>注：表格中“可被杀死”一列是指在该方法被调用后，系统是否可以杀死包含此 Activity 的进程。</p>
<p><br></p>
<p>为了获取 Activity 被杀死前的状态，可以在 Activity 被销毁前使用 onSaveInstanceState() 方法。</p>
<p>它会将一个<code>键值对</code>方式记录的 Activity 动态状态的 Bundle 对象传递给该方法。</p>
<p>而当 Activity 再次启动时，这个 Bundle 会传递给 onCreate() 方法或随着 onStart() 方法调用的 onRestoreInstanceState()，所以它们两个都能恢复之前保存的状态。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">是否可终止</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">onSaveInstanceState()</td>
<td style="text-align:center">Android 系统因资源不足而终止 Activity 前被调用，用以保存 Activity 的状态信息<br>供 onCreate() 和 onRestoreInstanceState()方法恢复使用</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">onRestoreInstanceState()</td>
<td style="text-align:center">恢复 onSaveInstanceState() 保存的 Activity 状态信息<br>在 onStart() 和 onResume() 方法之间使用</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
</div>
<span id="more"></span>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>Android 界面如下，当前是在 Activity1 下。</p>
<p><img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px"></p>
<p>点击 “进入Activity2”，此时先调用了 onPause() ，Activity1 先进入Paused状态，然后再调用onCreate() -&gt; onStart() -&gt; onResume() ，此乃创建 Activity 三件套。然后 Activity1 调用 onStop() 转向后台，onSaveInstanceState() 保存状态信息。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BJI1K.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40wUQx.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity1: onPause</span><br><span class="line">E/Activity2: onCreate</span><br><span class="line">E/Activity2: onStart</span><br><span class="line">E/Activity2: onResume</span><br><span class="line">E/Activity1: onStop</span><br><span class="line">E/Activity1: onSaveInstanceState</span><br></pre></td></tr></tbody></table></figure>
<p>随即点击“进入 Activity1 ”回到主界面，与上面情况类似，是先暂停 Activity2，而后<code>创建</code>Activity1，在保存 Activity2 的状态信息。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNr1P.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity2: onPause</span><br><span class="line">E/Activity1: onCreate</span><br><span class="line">E/Activity1: onStart</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity2: onStop</span><br><span class="line">E/Activity2: onSaveInstanceState</span><br></pre></td></tr></tbody></table></figure>
<p>但如果使用的是物理按键<span class="github-emoji" style="display:inline;vertical-align:middle"><span>◀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，则是<code>重启</code> Activity1，然后把 Activity2 <code>销毁</code>。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNocV.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/23/40dtr8.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity2: onPause</span><br><span class="line">E/Activity1: onRestart</span><br><span class="line">E/Activity1: onStart</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity2: onStop</span><br><span class="line">E/Activity2: onDestroy</span><br></pre></td></tr></tbody></table></figure>
<p>最后我们尝试一下点击“进入 Activity3 ”，会跳出一个对话框，此时 Activity1 还是可见的。</p>
<p>因此是没有 onStop() （停止 Activity）和 onSaveInstanceState() （保存 Activity 状态信息）这一步的。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4BNx91.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/24/4BUPBD.png" height="400px" width="230px" style="margin: 50px;">
</div>

<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity1: onPause</span><br><span class="line">E/Activity3: onCreate</span><br><span class="line">E/Activity3: onStart</span><br><span class="line">E/Activity3: onResume</span><br></pre></td></tr></tbody></table></figure>
<p>点击对话框外面关闭该对话框，是先暂停 Activity3，随即 Activity1 调用 onResume()，使得它可以与用户进行交互，最后停止并销毁 Activity3。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">E/Activity3: onPause</span><br><span class="line">E/Activity1: onResume</span><br><span class="line">E/Activity3: onStop</span><br><span class="line">E/Activity3: onDestroy</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCodeP0001——两数之和</title>
    <url>/2021/08/31/LeetCodeP0001%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <code>target</code>  的那 两个 <strong>整数</strong>，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>2 &lt;= nums.length &lt;= 104</li>
<li>-109 &lt;= nums[i] &lt;= 109</li>
<li>-109 &lt;= target &lt;= 109</li>
<li>只会存在一个有效答案</li>
</ul>
<p><br></p>
<h3 id="题解1-暴力搜索"><a href="#题解1-暴力搜索" class="headerlink" title="题解1: 暴力搜索"></a>题解1: 暴力搜索</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++){</span><br><span class="line">                sum = nums[i] + nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum == target){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{i,j};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：50ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（1）</p>
<p><br></p>
<h3 id="题解2-哈希查找"><a href="#题解2-哈希查找" class="headerlink" title="题解2: 哈希查找"></a>题解2: 哈希查找</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">       Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">    	   <span class="keyword">int</span> rest = target - nums[i];</span><br><span class="line">    	   <span class="keyword">if</span>(map.containsKey(rest)){</span><br><span class="line">    		   <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{i,map.get(rest)};</span><br><span class="line">    	   }</span><br><span class="line">    	   map.put(nums[i], i);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：2ms</p>
<p>这里将哈希查找的时间复杂度近似成O（1）</p>
<p>时间复杂度：O（$n$）</p>
<p>空间复杂度：S（$n$）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>哈希查找</tag>
        <tag>LeetCodeTop100</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN算法</title>
    <url>/2021/09/12/KNN%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>KNN算法需要先给定一组带有标签的数据，需要预测的数据只需和现有的数据测出“距离”，选出最近的K个。</p>
<p>如果是分类问题就选择多数的那个样本类别，是回归问题就取平均值即可。</p>
<p>因此K的选择一般都是奇数，不会出现平票的情况。</p>
<p>注：KNN全称K-Nearest Neighbor，也叫作K近邻算法。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">x1 = np.random.random(<span class="number">100</span>) * <span class="number">10</span></span><br><span class="line">x2 = np.random.random(<span class="number">100</span>) * <span class="number">10</span></span><br><span class="line">y = (x1 &lt; <span class="number">5</span>) &amp; (x2 &lt; <span class="number">5</span>)</span><br><span class="line">y.dtype = np.int8</span><br><span class="line"></span><br><span class="line">plt.scatter(x1[y], x2[y], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x1[~y], x2[~y], color = <span class="string">"blue"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这里我随机创建了一组数据</p>
<p><img src="https://z3.ax1x.com/2021/09/12/4SxwnK.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">z_x1 = np.random.random() * <span class="number">10</span></span><br><span class="line">z_x2 = np.random.random() * <span class="number">10</span></span><br><span class="line">y = y.dtype.int8</span><br><span class="line"></span><br><span class="line">distance = np.sqrt(np.square(x1 - z_x1) + np.square(x2 - z_x2))</span><br><span class="line">distance_nearest = np.argsort(distance)</span><br><span class="line"></span><br><span class="line"><span class="string">''' distance_nearest</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62, 63, 51, 81, 60, 85, 73, 84, 70, 25, 59, 90,</span></span><br><span class="line"><span class="string">       29, 82, 46, 35, 38, 71, 61, 66, 49, 22, 76,  0, 68, 58,  6, 13,  8,</span></span><br><span class="line"><span class="string">       54, 98, 56, 80, 48, 78, 86, 10, 50, 44, 93, 16, 67, 92, 64, 41, 95,</span></span><br><span class="line"><span class="string">       91, 79, 83, 53,  9, 88,  1, 24, 45, 87, 89, 21, 34, 32, 33, 28, 72,</span></span><br><span class="line"><span class="string">       17, 69, 77, 40, 27, 39,  2,  7, 96, 65, 42, 14, 31,  4, 47, 97, 18,</span></span><br><span class="line"><span class="string">        3, 57, 36, 30, 37, 15, 43,  5, 26, 12, 74, 55, 99, 75, 19],</span></span><br><span class="line"><span class="string">      dtype=int64)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x1[y], x2[y], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x1[~y], x2[~y], color = <span class="string">"blue"</span>)</span><br><span class="line">plt.scatter(z_x1, z_x2, color = <span class="string">"cyan"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4p1ai4.png" alt=""></p>
<p>这里我随机生成了一个浅蓝色的点，显而易见，他应该是属于蓝色这一类的。</p>
<p>然后我们去求它和现有数据的欧拉距离$d = \sqrt{(x - x_1)^2 +(x-x_2)^2}$，当然曼哈顿距离或是闵可夫斯基距离。</p>
<p>取出前K个进行投票即可。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">distance = np.sqrt(np.square(x1 - z_x1) + np.square(x2 - z_x2))</span><br><span class="line">distance_nearest = np.argsort(distance)</span><br><span class="line"></span><br><span class="line"><span class="string">""" distance_nearest</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62, 63, 51, 81, 60, 85, 73, 84, 70, 25, 59, 90,</span></span><br><span class="line"><span class="string">       29, 82, 46, 35, 38, 71, 61, 66, 49, 22, 76,  0, 68, 58,  6, 13,  8,</span></span><br><span class="line"><span class="string">       54, 98, 56, 80, 48, 78, 86, 10, 50, 44, 93, 16, 67, 92, 64, 41, 95,</span></span><br><span class="line"><span class="string">       91, 79, 83, 53,  9, 88,  1, 24, 45, 87, 89, 21, 34, 32, 33, 28, 72,</span></span><br><span class="line"><span class="string">       17, 69, 77, 40, 27, 39,  2,  7, 96, 65, 42, 14, 31,  4, 47, 97, 18,</span></span><br><span class="line"><span class="string">        3, 57, 36, 30, 37, 15, 43,  5, 26, 12, 74, 55, 99, 75, 19],</span></span><br><span class="line"><span class="string">      dtype=int64)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">""" distance_nearest[:6]</span></span><br><span class="line"><span class="string">array([94, 20, 11, 23, 52, 62], dtype=int64)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">counter = Counter(y[distance_nearest[:<span class="number">6</span>]])		<span class="comment"># Counter({0: 6})</span></span><br><span class="line">counter.most_common(<span class="number">1</span>)							<span class="comment"># [(0, 6)]</span></span><br><span class="line">counter.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]					<span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNN</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, neighbour</span>):</span></span><br><span class="line">        self.neighbour = neighbour</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.data = X</span><br><span class="line">        self.label = y</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X_test</span>):</span></span><br><span class="line">        distance = [np.square(x - x1) <span class="keyword">for</span> X_data <span class="keyword">in</span> self.data </span><br><span class="line">                    				  <span class="keyword">for</span> x,x1 <span class="keyword">in</span> <span class="built_in">zip</span>(X_data,X_test)]</span><br><span class="line">        distance = np.sqrt(np.<span class="built_in">sum</span>(distance))</span><br><span class="line">        distance_sorted_idx = np.argsort(distance)</span><br><span class="line">        distance_sorted_idx_top_k = distance_sorted_idx[:self.neighbour]</span><br><span class="line">        counter = Counter(self.label[distance_sorted_idx_top_k])</span><br><span class="line">        <span class="keyword">return</span> counter.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>数据使用我们之前随机出来的数据，测试结果与原结果一致</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># [100, 2]</span></span><br><span class="line">X = np.vstack([x1, x2])</span><br><span class="line">Z = np.vstack([z_x1, z_x2])</span><br><span class="line"><span class="comment"># [2, 100]</span></span><br><span class="line">X = np.transpose(X)</span><br><span class="line">Z = np.transpose(Z)</span><br><span class="line"></span><br><span class="line">knn_clf = KNN(<span class="number">3</span>)</span><br><span class="line">knn_clf.fit(X,y)</span><br><span class="line">knn_clf.transform(Z)			<span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCodeP0002——两数相加</title>
    <url>/2021/08/31/LeetCodeP0002%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/02/hDEmrR.jpg" alt="example"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<p><br></p>
<h3 id="题解1-分三类讨论"><a href="#题解1-分三类讨论" class="headerlink" title="题解1: 分三类讨论"></a>题解1: 分三类讨论</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = pre;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> x = l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            <span class="keyword">int</span> y = l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            <span class="keyword">int</span> sum = x + y + carry;</span><br><span class="line">            </span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line"></span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>)</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>)</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>) {</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>分三种情况讨论</p>
<p>(1)  l1 != null;</p>
<p>(2)  l2 != null;</p>
<p>(3)  l1 != null &amp;&amp; l2 != null</p>
<p>注：链表长度不够值按0处理</p>
<p><br></p>
<p>用时：2ms</p>
<p>假定两个链表长度为m，n</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0003——无重复字符的最长子串</title>
    <url>/2021/08/31/LeetCodeP0003%E2%80%94%E2%80%94%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是&nbsp;"wke"，所以其长度为 3。</span><br><span class="line">&nbsp;    请注意，你的答案必须是 子串 的长度，"pwke"&nbsp;是一个子序列，不是子串。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = <span class="string">""</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p><br></p>
<h3 id="题解1-滑动窗口"><a href="#题解1-滑动窗口" class="headerlink" title="题解1: 滑动窗口"></a>题解1: 滑动窗口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] ascll = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;s.length();j++){</span><br><span class="line">            <span class="comment">// i不能往回退，例：“abba”</span></span><br><span class="line">            i = Math.max(i, ascll[s.charAt(j)]);</span><br><span class="line">            maxLen = Math.max(maxLen, j-i+<span class="number">1</span>);</span><br><span class="line">            ascll[s.charAt(j)] = j+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：2ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
<h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p>初始时，i和j双指针都指向下标0。另外还有一个ASCII（size = 128）的表来存储每个字符在遍历字符串过程中出现的位置再+1。<img src="https://z3.ax1x.com/2021/09/01/h0A7D0.jpg" alt="img1"></p>
<p>大题的遍历思路：i不动，j来遍历字符串，maxLen=j - i +1，当j指向的字符有重复时，将i移到该重复字符此前出现位置的后面一个位置，因此在ASCII中存储的是每个字符出现的后一个位置，然后将ASCII表更新。</p>
<p>下图是j=3时，这时j指向的a和i指向的a重复了，需要将i移到此前出现a的后一个位置，查看ASCII表，将a移到1处，更新ASCII表中a的位置。</p>
<p><img src="https://z3.ax1x.com/2021/09/01/h0AHbV.jpg" alt="h0AHbV.jpg"></p>
<p><img src="https://z3.ax1x.com/2021/09/01/h0ATuq.jpg" alt="h0ATuq.jpg"></p>
<p><br></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0004——寻找两个正序数组的中位数</title>
    <url>/2021/09/01/LeetCodeP0004%E2%80%94%E2%80%94%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [0,0], nums2 = [0,0]</span><br><span class="line">输出：0.00000</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums1 = [], nums2 = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1.00000</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>nums1.length == m</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m &lt;= 1000</code></li>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>1 &lt;= m + n &lt;= 2000</code></li>
<li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
<p><br></p>
<h3 id="题解1-类似归并排序"><a href="#题解1-类似归并排序" class="headerlink" title="题解1: 类似归并排序"></a>题解1: 类似归并排序</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> len = len1 + len2;</span><br><span class="line">        <span class="keyword">int</span> mid = len / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=mid;k++){</span><br><span class="line">            left = right;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len1 &amp;&amp; (j &gt;= len2 || nums1[i] &lt;= nums2[j])){</span><br><span class="line">                right = nums1[i++];</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                right = nums2[j++];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>类似归并排序的思想，但不用开辟新的空间，只移动指针来寻找中位数。</p>
<p>需要将长度为奇数和偶数时，中位数的情况合并。</p>
<p>这里我们设置mid = len / 2，当长度为奇数时，返回第mid个数就行；当长度为偶数时，返回第mid-1和第mid个数取平均就行。</p>
<p>为此我们需要left和right，left保存上一个数，right保存下一个数。</p>
<p>关于分类讨论，这里只有两种结果：移动nums1的指针和移动nums2的指针。</p>
<p>所以只需要把移动nums1的指针的情况写完整了，另一个情况用else即可。</p>
<p><br></p>
<p>用时：2ms</p>
<p>假定两个数组长度为m，n</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（1）</p>
<p><br></p>
<h3 id="题解2-二分查找"><a href="#题解2-二分查找" class="headerlink" title="题解2: 二分查找"></a>题解2: 二分查找</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> len = len1 + len2;</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> (findNum(nums1,nums2,len/<span class="number">2</span>+<span class="number">1</span>) + findNum(nums1,nums2,len/<span class="number">2</span>))/<span class="number">2</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> findNum(nums1,nums2,len/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findNum</span><span class="params">(<span class="keyword">int</span>[] nums1,<span class="keyword">int</span>[] nums2, <span class="keyword">int</span> idx)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> offset_1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> offset_2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> half = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1 = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = nums2.length;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">            <span class="keyword">if</span>(offset_2 &gt;= len2){</span><br><span class="line">                <span class="keyword">return</span> nums1[offset_1+idx-<span class="number">1</span>];</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span> (offset_1 &gt;= len1){</span><br><span class="line">                <span class="keyword">return</span> nums2[offset_2+idx-<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            half = idx / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> index1 = Math.min(offset_1 + half - <span class="number">1</span>, len1-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> index2 = Math.min(offset_2 + half - <span class="number">1</span>, len2-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(idx == <span class="number">1</span>){</span><br><span class="line">                <span class="keyword">return</span> Math.min(nums1[offset_1],nums2[offset_2]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(nums1[index1] &gt; nums2[index2]){</span><br><span class="line">                idx -= index2 - offset_2 + <span class="number">1</span>;</span><br><span class="line">                offset_2 += half;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                idx -= index1 - offset_1 + <span class="number">1</span>;</span><br><span class="line">                offset_1 += half;</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果需要找到第n大的数字，那么只需要比较两个数组的第n/2个数，把较小的那个数和它前面的n/2-1个数全部排除，设置偏置值offset=n/2。然后n = n/2。之后再除以2，比较两个数组的第n/2个数，这里有个数组要从偏置值开始第n/2个数。</p>
<p>除此之外还要考虑n/2大于数组长度的情况，因此每一次的偏置值不一定是n/2，可能到数组末尾就停止了。</p>
<p>用时：2ms</p>
<p>时间复杂度：O（log(m + n)）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0010——正则表达式匹配</title>
    <url>/2021/09/02/LeetCodeP0010%E2%80%94%E2%80%94%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a"</span><br><span class="line">输出：false</span><br><span class="line">解释："a" 无法匹配 "aa" 整个字符串。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "aa" p = "a*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "" p = "c*"</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个。因此可以匹配字符串 ""。</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= s.length &lt;= 20</code></li>
<li><code>0 &lt;= p.length &lt;= 30</code></li>
<li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li>
<li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code> 和 <code>*</code>。</li>
<li>保证每次出现字符 <code>*</code> 时，前面都匹配到有效的字符</li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = s.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = p.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">char</span>[] pc = p.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len1;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2;j++){</span><br><span class="line">                <span class="keyword">if</span>(pc[j-<span class="number">1</span>] == <span class="string">'*'</span>){</span><br><span class="line">                    <span class="keyword">if</span>(match(i,j-<span class="number">1</span>,sc,pc)){</span><br><span class="line">                        dp[i][j] = dp[i][j-<span class="number">2</span>] || dp[i-<span class="number">1</span>][j];</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        dp[i][j] = dp[i][j-<span class="number">2</span>];</span><br><span class="line">                    }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(match(i,j,sc,pc)){</span><br><span class="line">                        dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span>[] sc,<span class="keyword">char</span>[] pc)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(pc[j-<span class="number">1</span>] == <span class="string">'.'</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sc[i-<span class="number">1</span>] == pc[j-<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">如果P[j]等于'*'，当P[j-1]等于S[i]时，有两种方式：</span><br><span class="line"></span><br><span class="line">1. dp[i][j] = dp[i][j-2]，直接将“字符*”这个组合扔掉，*这里取0次。</span><br><span class="line">2. dp[i][j] = dp[i-1][j]，将S[i-1]的字符再复制一个，*这里取1次。</span><br><span class="line"></span><br><span class="line">如果P[j]等于'*'，当P[j-1]不等于S[i]时，dp[i][j] = dp[i][j-2]，也是将该组合扔掉。</span><br><span class="line">如果P[j]不等于'*'，当P[j-1]等于S[i]时，dp[i][j] = dp[i-1][j-1]。</span><br><span class="line"></span><br><span class="line">需要注意的是，由于S和P可以为空字符串，因此dp大小是[len1+1][len2+1]，所以字符串charAt的时候下标要-1。</span><br><span class="line">而且，若S为非空串，而P为空串，则一定匹配不成功。</span><br><span class="line">	 若S为空串，P为非空串，还是有可能匹配成功的，见示例4。</span><br><span class="line">	 </span><br><span class="line">这里唯一的边界条件就是dp[0][0] = true，即两个空串可以匹配成功。</span><br></pre></td></tr></tbody></table></figure>
<p>状态转移方程：</p>
<p><img src="https://z3.ax1x.com/2021/09/02/hscgnf.jpg" alt="state"></p>
<p>用时：1ms</p>
<p>时间复杂度：O（m*n）</p>
<p>空间复杂度：S（m*n）</p>
<p><br></p>
<h3 id="题解2-记忆化递归"><a href="#题解2-记忆化递归" class="headerlink" title="题解2: 记忆化递归"></a>题解2: 记忆化递归</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[][] states;</span><br><span class="line">    <span class="keyword">char</span>[] pc;</span><br><span class="line">    <span class="keyword">char</span>[] sc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len1 = s.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = p.length();</span><br><span class="line">        states = <span class="keyword">new</span> <span class="keyword">int</span>[len1+<span class="number">1</span>][len2+<span class="number">1</span>];</span><br><span class="line">        pc = p.toCharArray();</span><br><span class="line">        sc = s.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> dps(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dps</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(j == pc.length){</span><br><span class="line">            <span class="keyword">return</span> i == sc.length;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(states[i][j] != <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> states[i][j] &gt; <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> match = i&lt;sc.length &amp;&amp; (sc[i] == pc[j] || pc[j] == <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">boolean</span> t;</span><br><span class="line">        <span class="keyword">if</span>((j+<span class="number">1</span>)&lt;pc.length &amp;&amp; pc[j+<span class="number">1</span>]==<span class="string">'*'</span>){</span><br><span class="line">            t = dps(i,j+<span class="number">2</span>) ||(match &amp;&amp; dps(i+<span class="number">1</span>,j));</span><br><span class="line">            states[i][j] = t?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        t = match &amp;&amp; dps(i+<span class="number">1</span>,j+<span class="number">1</span>);</span><br><span class="line">        states[i][j] = t?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>和动态规划类似，递归也有四种情况，具体写代码时，要注意各个条件的先后顺序，不然很容易打死结。</p>
<p><img src="https://z3.ax1x.com/2021/09/03/hs7KHA.png" alt="img"></p>
<p>用时：1ms</p>
<p>时间复杂度：O（m*n）</p>
<p>空间复杂度：S（m*n）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0005——最长回文子串</title>
    <url>/2021/09/02/LeetCodeP0005%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "babad"</span><br><span class="line">输出："bab"</span><br><span class="line">解释："aba" 同样是符合题意的答案。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "cbbd"</span><br><span class="line">输出："bb"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "a"</span><br><span class="line">输出："a"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span>(len&lt;<span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 字符串转换为char数组查找快！</span></span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len-i+<span class="number">1</span>;j++){</span><br><span class="line">                <span class="keyword">int</span> end = i + j - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(charArray[j] == charArray[end]){</span><br><span class="line">                    <span class="keyword">if</span>(i &lt;= <span class="number">3</span>){</span><br><span class="line">                        dp[j][end] = <span class="keyword">true</span>;</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        dp[j][end] = dp[j+<span class="number">1</span>][end-<span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(dp[j][end] &amp;&amp; maxLen &lt; i){</span><br><span class="line">                    begin = j;</span><br><span class="line">                    maxLen = i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin,begin+maxLen);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>字符串遍历频繁的时候，可以先转换为char数组便于查找，因为<code>charAt</code>方法多了一层栈的深度（需要进出对象）。</p>
<p>思路：如果一个字符串是回文字符串，那么它去掉头和尾也仍旧是回文字符串，也就可以得出动态规划的状态转移方程。</p>
<p>P[i, j] = P[i+1, j-1] &amp;&amp; charArray[i] == charArray[j]</p>
<p>然后对于长度为1的字符串，本身就是回文字符串。对于长度为2的字符串，只要头和尾相同就是回文字符串。因此我们就可以写出动态规划的边界条件。</p>
<p>P[i, i] = true</p>
<p>P[i, i+1] = true &amp;&amp; charArray[i] == charArray[i+1]</p>
<p><br></p>
<p>用时：124ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$n^2$）</p>
<p><br></p>
<h3 id="题解2-中心扩散法"><a href="#题解2-中心扩散法" class="headerlink" title="题解2: 中心扩散法"></a>题解2: 中心扩散法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">int</span> len1 = getPalindromeLen(charArray, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = getPalindromeLen(charArray, i, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> max = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span>(max &gt; maxLen){</span><br><span class="line">                maxLen = max;</span><br><span class="line">                begin = i - (maxLen-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin,begin+maxLen);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPalindromeLen</span><span class="params">(<span class="keyword">char</span>[] charArray, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> len = charArray.length;</span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;len &amp;&amp; charArray[left] == charArray[right]){</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>首先，我们先观察动态规划的状态转移方程</p>
<p>P[i, i] = true</p>
<p>P[i, i+1] = S[i] == S[i+1]</p>
<p>P[i, j] = P[i+1, j-1] &amp;&amp; S[i] == S[j]</p>
<p>可以找到其中的状态转移链</p>
<p><em>P</em>(<em>i</em>,<em>j</em>)←<em>P</em>(<em>i</em>+1,<em>j</em>−1)←<em>P</em>(<em>i</em>+2,<em>j</em>−2)←⋯←某一边界情况</p>
<p>也就是说，<strong>所有的状态在转移的时候可能性都是唯一的</strong>，因此我们可以从每一种边界情况开始向外扩散，就能得到所有状态对应的答案。</p>
<p>下面两句代码就对应着两种边界状态。</p>
<p><code>int len1 = getPalindromeLen(charArray, i, i);</code> </p>
<p><code>int len2 = getPalindromeLen(charArray, i, i+1);</code></p>
<p><br></p>
<p>用时：9ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0011——盛最多水的容器</title>
    <url>/2021/09/05/LeetCodeP0011%E2%80%94%E2%80%94%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，a``n</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p><strong>说明：</strong>你不能倾斜容器。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/05/hRke0g.jpg" alt="example"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为&nbsp;49。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [4,3,2,1,4]</span><br><span class="line">输出：16</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>n == height.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= height[i] &lt;= 104</code></li>
</ul>
<p><br></p>
<h3 id="题解1-双指针"><a href="#题解1-双指针" class="headerlink" title="题解1: 双指针"></a>题解1: 双指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right){</span><br><span class="line">            <span class="keyword">int</span> lh = height[left];</span><br><span class="line">            <span class="keyword">int</span> rh = height[right];</span><br><span class="line">            <span class="keyword">if</span>(height[left] &lt;= height[right]){</span><br><span class="line">                max = Math.max(max, lh * (right - left));</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; height[left] &lt;= lh){</span><br><span class="line">                    left++;</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                max = Math.max(max, rh * (right - left));</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right &amp;&amp; height[right] &lt;= rh){</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>双指针分别指向数组的头和尾，然后移动height较低的指针，移动后的高度若没有移动之前高则不用比较继续移动，直到两个指针重合则遍历结束。</p>
<p>如果移动的是height较高的指针，那之后无论怎么移动（不能向外移动），max值都不可能更高了。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0015——三数之和</title>
    <url>/2021/09/08/LeetCodeP0015%E2%80%94%E2%80%94%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<p><br></p>
<h3 id="题解1-双指针"><a href="#题解1-双指针" class="headerlink" title="题解1: 双指针"></a>题解1: 双指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) {</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len-<span class="number">2</span>;i++){</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>] == nums[i]){</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> third = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len-<span class="number">1</span>;j++){</span><br><span class="line">                <span class="keyword">if</span>(j &gt; i+<span class="number">1</span> &amp;&amp; nums[j-<span class="number">1</span>] == nums[j]){</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                target = -nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">while</span>(j &lt; third &amp;&amp; nums[third] &gt; target){</span><br><span class="line">                    third--;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(j == third){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(nums[third] == target){</span><br><span class="line">                    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                    tmp.add(nums[i]);</span><br><span class="line">                    tmp.add(nums[j]);</span><br><span class="line">                    tmp.add(nums[third]);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由于不能有重复的组合，因此我们先将数组进行排序，还是三层循环，如果下一次遍历的值和这一次遍历的值相等就会产生重复的组合，因此需要加以判断。</p>
<p>另外，因为数组是单调递增的，在第一层循环i已经确定时，而第二层循环j在遍历的过程中每次加1，遍历的值也随之递增，所以在第三层循环k中需要逐级递减，也就是从数组末尾开始遍历，直到j和k相等则break。</p>
<p>用时：19ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$log_n$）（排序所需空间）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0019——删除链表的倒数第N个节点</title>
    <url>/2021/09/09/LeetCodeP0019%E2%80%94%E2%80%94%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/09/hLJDOg.jpg" alt="img"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<p><br></p>
<h3 id="题解1-链表转数组"><a href="#题解1-链表转数组" class="headerlink" title="题解1: 链表转数组"></a>题解1: 链表转数组</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        ListNode[] nodes = <span class="keyword">new</span> ListNode[<span class="number">30</span>];</span><br><span class="line">        <span class="keyword">int</span> targetNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nodeNums = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++){</span><br><span class="line">            nodes[i] = head;</span><br><span class="line">            <span class="keyword">if</span>(head.next == <span class="keyword">null</span>){</span><br><span class="line">                nodeNums = i + <span class="number">1</span>;</span><br><span class="line">                targetNum = nodeNums - n;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(targetNum == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span>(nodeNums &gt; <span class="number">1</span>){</span><br><span class="line">                <span class="keyword">return</span> nodes[<span class="number">1</span>];</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        nodes[targetNum-<span class="number">1</span>].next = nodes[targetNum].next;</span><br><span class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-快慢指针"><a href="#题解2-快慢指针" class="headerlink" title="题解2: 快慢指针"></a>题解2: 快慢指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        ListNode lnode = head;</span><br><span class="line">        ListNode pnode = <span class="keyword">null</span>;</span><br><span class="line">        ListNode rnode = head;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; n){</span><br><span class="line">            rnode = rnode.next;</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(rnode == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(rnode != <span class="keyword">null</span>){</span><br><span class="line">            rnode = rnode.next;</span><br><span class="line">            pnode = lnode;</span><br><span class="line">            lnode = lnode.next;</span><br><span class="line">        }</span><br><span class="line">        pnode.next = pnode.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>因为要找到倒数第n个节点，因此我们设立两个指针，第一个指针指向第一个节点，第二个指向第n个节点。</p>
<p>然后同时向后遍历，当第二个指针指向null时，第一个指针也就指向了第n个节点。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0017——电话号码的字母组合</title>
    <url>/2021/09/09/LeetCodeP0017%E2%80%94%E2%80%94%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><img src="https://z3.ax1x.com/2021/09/09/hqmRZ8.png" alt="img"></p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = "23"</span><br><span class="line">输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = ""</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：digits = "2"</span><br><span class="line">输出：["a","b","c"]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= digits.length &lt;= 4</code></li>
<li><code>digits[i]</code> 是范围 <code>['2', '9']</code> 的一个数字。</li>
</ul>
<p><br></p>
<h3 id="题解1-回溯法"><a href="#题解1-回溯法" class="headerlink" title="题解1: 回溯法"></a>题解1: 回溯法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;<span class="keyword">char</span>[]&gt; number = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(digits.length() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        }</span><br><span class="line">        res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        number = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>});</span><br><span class="line">        number.add(<span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>});</span><br><span class="line">        <span class="keyword">char</span>[] digitsArray = digits.toCharArray();</span><br><span class="line">        dps(digitsArray, <span class="keyword">new</span> StringBuilder(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dps</span><span class="params">(<span class="keyword">char</span>[] digitsArray, StringBuilder str, <span class="keyword">int</span> count)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(count == digitsArray.length){</span><br><span class="line">            res.add(str.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> num = digitsArray[count] - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = number.get(num - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;chars.length;i++){</span><br><span class="line">            StringBuilder str_copy = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">            str_copy.append(chars[i]);</span><br><span class="line">            dps(digitsArray, str_copy, count + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（$3^m \times 4^n$）</p>
<p>空间复杂度：S（m + n），递归调用层数为（m+n）</p>
<p>其中m是输入中对应3个字母的数字个数（包括数字2、3、4、5、6、8）</p>
<p>​         n是输入中对应4个字母的数字个数（包括数字7、9）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0020——有效的括号</title>
    <url>/2021/09/09/LeetCodeP0020%E2%80%94%E2%80%94%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ol>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "()"</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "{[]}"</span><br><span class="line">输出：true</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "(]"</span><br><span class="line">输出：false</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = <span class="string">"([)]"</span></span><br><span class="line">输出：<span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>'()[]{}'</code> 组成</li>
</ul>
<p><br></p>
<h3 id="题解1-栈"><a href="#题解1-栈" class="headerlink" title="题解1: 栈"></a>题解1: 栈</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Stack&lt;Character&gt; brackets = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++){</span><br><span class="line">            <span class="keyword">char</span> bracket = chars[i];</span><br><span class="line">            <span class="keyword">if</span>(bracket == <span class="string">'('</span> || bracket == <span class="string">'['</span> || bracket == <span class="string">'{'</span>){</span><br><span class="line">                brackets.push(bracket);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(canMatch(bracket, brackets)){</span><br><span class="line">                    brackets.pop();</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canMatch</span><span class="params">(<span class="keyword">char</span> bracket, Stack&lt;Character&gt; brackets)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>((bracket == <span class="string">')'</span> &amp;&amp; brackets.peek() == <span class="string">'('</span>) || </span><br><span class="line">           (bracket == <span class="string">']'</span> &amp;&amp; brackets.peek() == <span class="string">'['</span>) ||</span><br><span class="line">           (bracket == <span class="string">'}'</span> &amp;&amp; brackets.peek() == <span class="string">'{'</span>)){</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           }<span class="keyword">else</span>{</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>将遍历到的左括号放到栈中，遍历到的右括号和栈顶的括号做匹配，匹配成功则两个都消掉，匹配不成功就返回false，字符串遍历完毕则返回true。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-栈-ascll"><a href="#题解2-栈-ascll" class="headerlink" title="题解2: 栈 + ascll"></a>题解2: 栈 + ascll</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        Stack&lt;Character&gt; brackets = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++){</span><br><span class="line">            <span class="keyword">char</span> bracket = chars[i];</span><br><span class="line">            <span class="keyword">if</span>(bracket == <span class="string">'('</span> || bracket == <span class="string">'['</span> || bracket == <span class="string">'{'</span>){</span><br><span class="line">                brackets.push(bracket);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(bracket - brackets.peek() == <span class="number">1</span> || bracket - brackets.peek() == <span class="number">2</span>){</span><br><span class="line">                    brackets.pop();</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(brackets.size() == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>做法同题解1，但判断括号是否匹配使用了ascll（两个括号的ascll值相差为1或2），代码相对会更加简洁一点。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解3-奇妙的方法"><a href="#题解3-奇妙的方法" class="headerlink" title="题解3: 奇妙的方法"></a>题解3: 奇妙的方法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(s.contains(<span class="string">"()"</span>) || s.contains(<span class="string">"[]"</span>) || s.contains(<span class="string">"{}"</span>)){</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"()"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"()"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"[]"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"[]"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(s.contains(<span class="string">"{}"</span>)){</span><br><span class="line">                s = s.replace(<span class="string">"{}"</span>,<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> s.length()==<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>不管怎样，最里面一层一定是”()”,”[]”,”{}”三者选其一，然后逐层剖开。</p>
<p>不过时间复杂度很高，看个乐呵就行了。</p>
<p>用时：47ms</p>
<p>时间复杂度：O（$n^3$）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0021——合并两个有序链表</title>
    <url>/2021/09/09/LeetCodeP0021%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/09/hLvmfU.jpg" alt="img"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<p><br></p>
<h3 id="题解1-迭代"><a href="#题解1-迭代" class="headerlink" title="题解1: 迭代"></a>题解1: 迭代</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode tmp = newHead;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val){</span><br><span class="line">                tmp.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = l1;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = l2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（m + n）</p>
<p>m和n为两个链表长度</p>
<p><br></p>
<h3 id="题解2-递归"><a href="#题解2-递归" class="headerlink" title="题解2: 递归"></a>题解2: 递归</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(l2 == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(l1.val &lt; l2.val){</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>原地操作，如果L1小，则判断L1.next和L2。当有一方为null时，返回另一方。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（m + n）</p>
<p>空间复杂度：S（m + n），堆栈所需空间</p>
<p>m和n为两个链表长度</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0023——合并K个升序列表</title>
    <url>/2021/09/14/LeetCodeP0023%E2%80%94%E2%80%94%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表数组，每个链表都已经按升序排列。</p>
<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/merge-k-sorted-lists</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：lists = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：lists = [[]]</span><br><span class="line">输出：[]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>k == lists.length<br>0 &lt;= k &lt;= 10^4<br>0 &lt;= lists[i].length &lt;= 500<br>-10^4 &lt;= lists[i][j] &lt;= 10^4<br>lists[i] 按 升序 排列<br>lists[i].length 的总和不超过 10^4</p>
<p><br></p>
<h3 id="题解1-顺序合并"><a href="#题解1-顺序合并" class="headerlink" title="题解1: 顺序合并"></a>题解1: 顺序合并</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>{</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">        <span class="keyword">if</span>(lists.length == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        ListNode sortedNode = lists[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i &lt; lists.length;i++){</span><br><span class="line">            sortedNode = mergeTwoLists(sortedNode, lists[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sortedNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode node1, ListNode node2)</span></span>{</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode tmp = newNode;</span><br><span class="line">        <span class="keyword">while</span>(node1 !=<span class="keyword">null</span> &amp;&amp; node2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(node1.val &lt; node2.val){</span><br><span class="line">                tmp.next = node1;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp.next = node2;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node1 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = node1;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            tmp.next = node2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newNode.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这里结合了之前合并两个链表的方法，假设有k个链表，我们指定第一个链表和后面k-1个链表进行合并，只需要合并k-1次就行了。</p>
<p>用时：101ms</p>
<p>时间复杂度：O（$k^2n$）</p>
<p>空间复杂度：S（1）</p>
<p>其中k为k个链表，n为每个链表的最长长度</p>
<p><br></p>
<h3 id="题解2-分而治之"><a href="#题解2-分而治之" class="headerlink" title="题解2: 分而治之"></a>题解2: 分而治之</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(lists.length == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> merge(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode[] lists, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(l == r){</span><br><span class="line">            <span class="keyword">return</span> lists[l];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(merge(lists, l, mid), merge(lists, mid + <span class="number">1</span>, r));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode node1, ListNode node2)</span></span>{</span><br><span class="line">        ListNode newNode = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode tmp = newNode;</span><br><span class="line">        <span class="keyword">while</span>(node1 !=<span class="keyword">null</span> &amp;&amp; node2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(node1.val &lt; node2.val){</span><br><span class="line">                tmp.next = node1;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tmp.next = node2;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node1 != <span class="keyword">null</span>){</span><br><span class="line">            tmp.next = node1;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            tmp.next = node2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> newNode.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4FJYZj.png" alt=""></p>
<p>这是在顺序合并的基础上进行了改进，两两合并，只需合并$logk$次</p>
<p>用时：1ms</p>
<p>时间复杂度：O（$kn * logk$）</p>
<p>空间复杂度：S（$logk$）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0022——括号生成</title>
    <url>/2021/09/09/LeetCodeP0022%E2%80%94%E2%80%94%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>
<p>有效括号组合需满足：左括号必须以正确的顺序闭合。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：["((()))","(()())","(())()","()(())","()()()"]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：["()"]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= n &lt;= 8</code></li>
</ul>
<p><br></p>
<h3 id="题解1-dfs"><a href="#题解1-dfs" class="headerlink" title="题解1: dfs"></a>题解1: dfs</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        dfs(<span class="keyword">new</span> StringBuilder(), <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> state, <span class="keyword">int</span> count)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span> &amp;&amp; state == <span class="number">0</span>){</span><br><span class="line">            res.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>){</span><br><span class="line">            sb.append(<span class="string">"("</span>);</span><br><span class="line">            dfs(sb, state + <span class="number">1</span>, count - <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>); </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(state &gt; <span class="number">0</span>){</span><br><span class="line">            sb.append(<span class="string">")"</span>);</span><br><span class="line">            dfs(sb, state - <span class="number">1</span>, count);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用时：0ms</p>
<p>时间复杂度：<em>O</em>($\frac{4^n}{\sqrt{n}}$)</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-动态规划"><a href="#题解2-动态规划" class="headerlink" title="题解2: 动态规划"></a>题解2: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; brackets = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        List&lt;String&gt; zero = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        zero.add(<span class="string">""</span>);</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        one.add(<span class="string">"()"</span>);</span><br><span class="line">        brackets.add(zero);</span><br><span class="line">        brackets.add(one);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++){</span><br><span class="line">            List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++){</span><br><span class="line">                List&lt;String&gt; list1 = brackets.get(j);</span><br><span class="line">                List&lt;String&gt; list2 = brackets.get(i-<span class="number">1</span>-j);</span><br><span class="line">                <span class="keyword">for</span>(String str1 : list1){</span><br><span class="line">                    <span class="keyword">for</span>(String str2 : list2){</span><br><span class="line">                        tmp.add(<span class="string">"("</span> + str1 + <span class="string">")"</span> + str2);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            brackets.add(tmp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> brackets.get(brackets.size() - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>动态规划十分类似于数学中的归纳法，也就是给出k = n-1的情况，要能求出k = n的情况。</p>
<p>这里我们也思考一下，如果我们要求k = n的情况，也就是求n个括号，与之对应k = n-1。而n-1个括号我们可以拆成两部分左边m个括号，右边n-1-m个括号，而这第n个括号，无非就是扩住左边的括号或右边的括号或都括起来。因此可以写一个循环，左边括号数为(0,1,2…n-1)，右边括号数则自然而然就为(n-1,n-2…0)，然后把左边括号扩住（此处包含了之前提到了三种情况）。</p>
<p>用时：9ms</p>
<p>时间复杂度：O（$n^2$）</p>
<p>空间复杂度：S（$n^2$）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0031——下一个排列</title>
    <url>/2021/09/15/LeetCodeP0031%E2%80%94%E2%80%94%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列（即，组合出下一个更大的整数）。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须 原地 修改，只允许使用额外常数空间。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [3,2,1]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [1,1,5]</span><br><span class="line">输出：[1,5,1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 100</code></li>
</ul>
<p><br></p>
<h3 id="题解1-两遍扫描"><a href="#题解1-两遍扫描" class="headerlink" title="题解1: 两遍扫描"></a>题解1: 两遍扫描</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> p = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p &gt; <span class="number">0</span> &amp;&amp; nums[p] &lt;= nums[p-<span class="number">1</span>]){</span><br><span class="line">            p--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="number">0</span>){</span><br><span class="line">            reverse(nums, <span class="number">0</span>, len-<span class="number">1</span>);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">int</span> p2 = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(p2 &gt; (p-<span class="number">1</span>) &amp;&amp; nums[p2] &lt;= nums[p-<span class="number">1</span>]){</span><br><span class="line">                p2--;</span><br><span class="line">            }</span><br><span class="line">            swap(nums, p-<span class="number">1</span>, p2);</span><br><span class="line">            reverse(nums, p, len-<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> idx1, <span class="keyword">int</span> idx2)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[idx1];</span><br><span class="line">        nums[idx1] = nums[idx2];</span><br><span class="line">        nums[idx2] = tmp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>{</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right){</span><br><span class="line">            swap(nums, left, right);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>思路图示，需要注意的是，频繁使用多遍的步骤要另写一个方法，思路会简洁很多！</p>
<p><img src="https://z3.ax1x.com/2021/09/15/4V2jw4.gif" alt=""></p>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0032——最长有效括号</title>
    <url>/2021/09/22/LeetCodeP0032%E2%80%94%E2%80%94%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = "(()"</span><br><span class="line">输出：2</span><br><span class="line">解释：最长有效括号子串是 "()"</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = ")()())"</span><br><span class="line">输出：4</span><br><span class="line">解释：最长有效括号子串是 "()()"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：s = ""</span><br><span class="line">输出：0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>0 &lt;= s.length &lt;= 3 * 104</code></li>
<li><code>s[i]</code> 为 <code>'('</code> 或 <code>')'</code></li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">if</span>(charArray[i] == <span class="string">')'</span>){</span><br><span class="line">                <span class="keyword">if</span>((i-dp[i-<span class="number">1</span>]-<span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; charArray[i-dp[i-<span class="number">1</span>]-<span class="number">1</span>] == <span class="string">'('</span>){</span><br><span class="line">                    <span class="keyword">if</span>(i-dp[i-<span class="number">1</span>]-<span class="number">2</span> &lt; <span class="number">0</span>){</span><br><span class="line">                        dp[i] = dp[i-<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                    }<span class="keyword">else</span>{</span><br><span class="line">                        dp[i] = dp[i-<span class="number">1</span>] + dp[i-dp[i-<span class="number">1</span>]-<span class="number">2</span>] + <span class="number">2</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        }</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>括号分为两个情况</p>
<ol>
<li><p>“（）”，即如果s[i]是’)’且s[i - 1]是’(‘，那么长度为dp[i-2] + 2；</p>
</li>
<li><p>“（（···））”，即如果s[i]是’)’且s[i - dp[i-1] - 1]是’(‘，那么长度为dp[i-1] + dp[i - dp[i-1] - 2] + 2</p>
</li>
</ol>
<p>以上两种情况可以合并，如果s[i - 1]时候’(‘，那么dp[i - 1]也就是0，第二种情况也就包含了第一种情况</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-栈"><a href="#题解2-栈" class="headerlink" title="题解2: 栈"></a>题解2: 栈</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        stack.push(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">if</span>(charArray[i] == <span class="string">'('</span>){</span><br><span class="line">                stack.push(i);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty()){</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    max = Math.max(max, i - stack.peek());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>将’(‘的下标放入栈中，当遍历到’)’时，我们弹出栈顶元素表示匹配了当前右括号，然后以’)’的下标减去当前栈顶元素就是该有效括号的长度。</p>
<p>开始我们在栈中放入-1以解决边界情况，当有’)’匹配到了栈底时，则表示匹配失败，将栈底元素改为该’)’的下标，表示后面括号从此处开始匹配。</p>
<p>用时：2ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解3-贪心算法"><a href="#题解3-贪心算法" class="headerlink" title="题解3: 贪心算法"></a>题解3: 贪心算法</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            state += getState(charArray[i]);</span><br><span class="line">            <span class="keyword">if</span>(state &lt; <span class="number">0</span>){</span><br><span class="line">                start = i+<span class="number">1</span>;</span><br><span class="line">                state = <span class="number">0</span>;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span>){</span><br><span class="line">                max = Math.max(i-start+<span class="number">1</span>, max);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        start = len-<span class="number">1</span>;</span><br><span class="line">        state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">            state += getStateReversed(charArray[i]);</span><br><span class="line">            <span class="keyword">if</span>(state &lt; <span class="number">0</span>){</span><br><span class="line">                start = i-<span class="number">1</span>;</span><br><span class="line">                state = <span class="number">0</span>;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span>){</span><br><span class="line">                max = Math.max(start-i+<span class="number">1</span>, max);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">(<span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">')'</span>){</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStateReversed</span><span class="params">(<span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">')'</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>假定’(‘表示1，’)’表示-1，用state来计算当前匹配情况。</p>
<p>state = 0，匹配成功；</p>
<p>state &lt; 0，匹配失败；</p>
<p>但这种遍历方式有个致命的问题，例“(()”，遍历完成后state = 1，没有匹配到有效括号。</p>
<p>因此我们还需反着遍历一遍以解决这种问题。</p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0042——接雨水</title>
    <url>/2021/09/24/LeetCodeP0042%E2%80%94%E2%80%94%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定 <em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p><img src="https://z3.ax1x.com/2021/09/24/4DZ8TU.png" alt=""></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：height = [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li><code>n == height.length</code></li>
<li><code>0 &lt;= n &lt;= 3 * 104</code></li>
<li><code>0 &lt;= height[i] &lt;= 105</code></li>
</ul>
<p><br></p>
<h3 id="题解1-动态规划"><a href="#题解1-动态规划" class="headerlink" title="题解1: 动态规划"></a>题解1: 动态规划</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> volume = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] leftMax = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++){</span><br><span class="line">            leftMax[i] = Math.max(leftMax[i-<span class="number">1</span>], height[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] rightMax = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        rightMax[len-<span class="number">1</span>] = height[len-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">            rightMax[i] = Math.max(rightMax[i+<span class="number">1</span>], height[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            volume += Math.min(leftMax[i], rightMax[i]) - height[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>求出在这个点从左边和右边遍历的最高值，取他们之间的较小值，即两个端点的较小值，减去该点的高度就是这个点可以储水的量了。</p>
<p><img src="https://z3.ax1x.com/2021/09/24/4DZBm6.png" alt=""></p>
<p>用时：1ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（n）</p>
<p><br></p>
<h3 id="题解2-双指针"><a href="#题解2-双指针" class="headerlink" title="题解2: 双指针"></a>题解2: 双指针</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = height.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> volume = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right){</span><br><span class="line">            maxLeft = Math.max(height[left], maxLeft);</span><br><span class="line">            maxRight = Math.max(height[right], maxRight);</span><br><span class="line">            <span class="keyword">if</span>(height[left] &lt; height[right]){</span><br><span class="line">                volume += maxLeft - height[left];</span><br><span class="line">                left++;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                volume += maxRight - height[right];</span><br><span class="line">                right--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>与动态规划类似，但采用双指针可以省去dp数组。</p>
<p>只移动短的那一头，因为短的那一头左右都已经有了边界，可以直接计算出储水量。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（n）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>动态规划</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown入门</title>
    <url>/2021/08/20/MarkDown%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="MarkDown入门"><a href="#MarkDown入门" class="headerlink" title="MarkDown入门"></a>MarkDown入门</h1><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1. 代码块"></a>1. 代码块</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">```python</span><br><span class="line">    </span><br><span class="line">`行内代码块`</span><br></pre></td></tr></tbody></table></figure>
<p><strong>python代码</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><code>行内代码块</code></p>
<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最多支持六级标题</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><span id="more"></span>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">~~删除~~					<span class="comment"># 删除线</span></span><br><span class="line">**加粗**					<span class="comment"># 加粗</span></span><br><span class="line">*斜体*					<span class="comment"># 斜体</span></span><br><span class="line">***加粗+斜体***					<span class="comment"># 粗斜体</span></span><br><span class="line">&lt;code&gt;高亮&lt;/code&gt;					<span class="comment"># 高亮</span></span><br><span class="line">`$H_2O_2$`					<span class="comment"># 下标</span></span><br><span class="line">`$X^{a^<span class="number">2</span>}$`					<span class="comment"># 平方</span></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;					<span class="comment"># 下划线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斜体、加粗中*和_效果相同</span></span><br><span class="line"><span class="comment"># HTML语法可以在Markdown中使用</span></span><br></pre></td></tr></tbody></table></figure>
<p><del>删除</del>            </p>
<p><strong>加粗</strong>            </p>
<p><em>斜体</em>            </p>
<p><strong><em>加粗+斜体</em></strong>  </p>
<p><code>高亮</code></p>
<script type="math/tex; mode=display">H_2O_2</script><script type="math/tex; mode=display">X^{a^2}</script><p><u>下划线</u>        </p>
<h2 id="4-表情符号"><a href="#4-表情符号" class="headerlink" title="4.表情符号"></a>4.表情符号</h2><figure class="highlight py"><table><tbody><tr><td class="code"><pre><span class="line">:smile_cat: :smile: :laughing: :dizzy_face: :sob: :weary:</span><br></pre></td></tr></tbody></table></figure>
<p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5.表格"></a>5.表格</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">name | price</span><br><span class="line">:---  | ---:			<span class="comment"># :在左边表示该列左对齐；在右边表示右对齐；左右都有居中对齐</span></span><br><span class="line">fried chicken | <span class="number">19</span></span><br><span class="line">cola | <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表格语法较为繁琐，建议右键插入表格</span></span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">name</th>
<th style="text-align:right">price</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">fried chicken</td>
<td style="text-align:right">19</td>
</tr>
<tr>
<td style="text-align:left">cola</td>
<td style="text-align:right">5</td>
</tr>
</tbody>
</table>
</div>
<h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>三级引用</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以此类推</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<p>三级引用</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h4 id="7-1无序列表"><a href="#7-1无序列表" class="headerlink" title="7.1无序列表"></a>7.1无序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">* 无序列表<span class="number">1</span></span><br><span class="line">+ 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上三种方式均可</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>无序列表1</li>
</ul>
<ul>
<li>无序列表2</li>
</ul>
<ul>
<li>无序列表3</li>
</ul>
<h4 id="7-2有序列表"><a href="#7-2有序列表" class="headerlink" title="7.2有序列表"></a>7.2有序列表</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 有序列表<span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 有序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 数字\.来取消显示列表（用反斜杠进行转义）</span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
<h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8.分割线"></a>8.分割线</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在一行中使用三个及以上的*即可</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h2 id="9-跳转"><a href="#9-跳转" class="headerlink" title="9.跳转"></a>9.跳转</h2><h4 id="9-1外部跳转"><a href="#9-1外部跳转" class="headerlink" title="9.1外部跳转"></a>9.1外部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[紫梦沁香的博客](https://紫梦沁香.com)</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">紫梦沁香的博客</a></p>
<h4 id="9-2内部跳转"><a href="#9-2内部跳转" class="headerlink" title="9.2内部跳转"></a>9.2内部跳转</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">[跳转至<span class="number">1.</span>代码块](<span class="comment">#1-代码块)</span></span><br><span class="line">    </span><br><span class="line">[跳转至Connor](<span class="comment">#Connor)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 空格用-代替，特殊字符直接删掉</span></span><br><span class="line"><span class="comment"># 也可以使用HTML标签中的id来进行跳转</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="#1-代码块">跳转至1.代码块</a></p>
<p><a href="#Connor">跳转至康娜酱</a></p>
<h4 id="9-3自动链接"><a href="#9-3自动链接" class="headerlink" title="9.3自动链接"></a>9.3自动链接</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&lt;https://紫梦沁香.com&gt;</span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 协议也写全，不然会有bug</span></span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://紫梦沁香.com">https://紫梦沁香.com</a><br><a href="https://www.baidu.com">https://www.baidu.com</a></p>
<h2 id="10-图片"><a href="#10-图片" class="headerlink" title="10.图片"></a>10.图片</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">![康娜酱](Connor.jpg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对路径在source/_posts/同名文件夹</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" alt="康娜酱"></p>
<h2 id="11-内置标签"><a href="#11-内置标签" class="headerlink" title="11.内置标签"></a>11.内置标签</h2><h4 id="11-1文本居中"><a href="#11-1文本居中" class="headerlink" title="11.1文本居中"></a>11.1文本居中</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="blockquote-center"是必要的</span></span><br><span class="line">&lt;blockquote <span class="class"><span class="keyword">class</span>="<span class="title">blockquote</span>-<span class="title">center</span>"&gt;<span class="title">HTML</span>居中&lt;/<span class="title">blockquote</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签</span></span><br><span class="line"><span class="class">{% <span class="title">centerquote</span> %}标签居中{% <span class="title">endcenterquote</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签别名</span></span><br><span class="line"><span class="class">{% <span class="title">cq</span> %}标签别名居中{% <span class="title">endcq</span> %}</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中</span></span><br><span class="line"><span class="class"># 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote class="blockquote-center">HTML居中</blockquote>

<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签别名居中</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<h4 id="11-2图片越界"><a href="#11-2图片越界" class="headerlink" title="11.2图片越界"></a>11.2图片越界</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># HTML，其中class="full-image"是必要的</span></span><br><span class="line">&lt;img src=<span class="string">"Connor.jpg"</span> <span class="class"><span class="keyword">class</span>="<span class="title">full</span>-<span class="title">image</span>" /&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 标签的方式失效了，可能换了其它的标签名</span></span><br><span class="line"><span class="class"># 看起来没啥效果</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/08/29/hG1BLV.jpg" class="full-image" id="Connor"></p>
<h3 id="11-3Bootstrap-Callout"><a href="#11-3Bootstrap-Callout" class="headerlink" title="11.3Bootstrap Callout"></a>11.3Bootstrap Callout</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">{% note class_name %} Content (md partial supported) {% endnote %}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中class_name可以是以下值</span></span><br><span class="line"><span class="comment"># danger primary success info warning default</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p>It’s danger </p>
          </div>
<div class="note primary">
            <p>It’s primary </p>
          </div>
<div class="note success">
            <p>It’s success </p>
          </div>
<div class="note info">
            <p>It’s info </p>
          </div>
<div class="note warning">
            <p>It’s warning </p>
          </div>
<div class="note default">
            <p>It’s default </p>
          </div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeP0033——搜索旋转排序数组</title>
    <url>/2021/09/22/LeetCodeP0033%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>
<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>
<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出：4</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出：-1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入：nums = [1], target = 0</span><br><span class="line">输出：-1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;= nums.length &lt;= 5000<br>-10^4 &lt;= nums[i] &lt;= 10^4<br>nums 中的每个值都 独一无二<br>题目数据保证 nums 在预先未知的某个下标上进行了旋转<br>-10^4 &lt;= target &lt;= 10^4</p>
<p><br></p>
<h3 id="题解1-二分查找"><a href="#题解1-二分查找" class="headerlink" title="题解1: 二分查找"></a>题解1: 二分查找</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right){</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target){</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 左递增</span></span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= nums[mid]){</span><br><span class="line">                <span class="keyword">if</span>(target &gt;= nums[<span class="number">0</span>] &amp;&amp; target &lt; nums[mid]){</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            <span class="comment">// 右递增</span></span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(target &lt;= nums[len-<span class="number">1</span>] &amp;&amp; target &gt; nums[mid] ){</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/22/4aAAje.png" alt=""></p>
<p>只需考虑“正向”的结果，例如左图中，nums[0] &lt;= nums[mid]，说明在(0, mid)单调递增。</p>
<p>如果nums[0] &lt; target &lt; nums[mid]，那么只需要在这之间查找即可；另一情况使用else囊括。</p>
<p>用时：0ms</p>
<p>时间复杂度：O（logn）</p>
<p>空间复杂度：S（1）</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
        <tag>JAVA</tag>
        <tag>LeetCodeTop100</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/10/18/Mybatis/</url>
    <content><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h4 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h4><ul>
<li>MyBatis 是一款优秀的持久层框架。</li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目 iBatis。</li>
<li>2010年这个项目由 apache software foundation 迁移到了 google code，并且改名为MyBatis。</li>
<li>2013年11月迁移到 Github。</li>
</ul>
<p>如何获取 Mybatis？</p>
<ul>
<li><p>maven 仓库：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Github：<a href="https://github.com/search?q=Mybatis">https://github.com/search?q=Mybatis</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></p>
</li>
</ul>
<h4 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h4><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程。</li>
<li>内存<strong>断电即失</strong></li>
</ul>
<p>为什么需要持久化？</p>
<ul>
<li>有一些对象不能让他丢掉。</li>
<li>内存太贵了。</li>
</ul>
<h4 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h4><p>Dao 层、Service 层、Controller 层……</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h4 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h4><ul>
<li>传统 JDBC 代码过于复杂冗余，而Mybatis 简洁了很多。</li>
<li>方便简洁自动化，框架在背后帮我们做了很多事情。</li>
</ul>
<h2 id="2、第一个-Mybatis-程序"><a href="#2、第一个-Mybatis-程序" class="headerlink" title="2、第一个 Mybatis 程序"></a>2、第一个 Mybatis 程序</h2><p>添加 maven 依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mybatis 配置文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册mapper文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/yqx/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>pojo 实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>mapper.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.yqx.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.yqx.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper.xml 放在 java 类中。不会被 maven 读取，需要在 pom.xml 中显式定义路径。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper 类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">     <span class="function">User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>SqlSession 工具类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Test 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yqx.utils.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(mapper.findUserById(<span class="number">5</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
  <entry>
    <title>Navigation</title>
    <url>/2021/09/25/Navigation/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>一个APP不可能只有一个页面吧，这时候就需要 Navigation 和 Fragment 来帮助我们切换页面。效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4shGLT.gif" alt=""></p>
<p>Fragment 生命周期如下图所示。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yVf4U.png" alt=""></p>
<span id="more"></span>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>MainActivity 部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.navigation1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.NavController;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.fragment.NavHostFragment;</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.NavigationUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);</span><br><span class="line">        NavController controller = navHostFragment.getNavController();</span><br><span class="line">        <span class="comment">// 显示导航栏上方返回按钮</span></span><br><span class="line">        NavigationUI.setupActionBarWithNavController(<span class="keyword">this</span>, controller);</span><br><span class="line">    }</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 导航栏上方返回按钮事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span> </span>{</span><br><span class="line">        NavHostFragment navHostFragment = (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.fragment);</span><br><span class="line">        NavController controller = navHostFragment.getNavController();</span><br><span class="line">        <span class="keyword">return</span> controller.navigateUp();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Navigation.xml 中可以写出各个 Fragment 的思维导图（具体跳转代码写在 java 文件中），也可以指定切换动画。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4s4SXV.png" alt=""></p>
<p>创建 Fragment 自动生成的代码就略去了。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">// 跳转页面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        Button button = getView().findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(Navigation.createNavigateOnClickListener(R.id.action_secondFragment_to_firstFragment));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><p>（1） 使用Bundle</p>
<p>有时界面会伴随着数据一起跳转，这个时候就可以使用 Bundle 这个键值对存储数据进行传送了。</p>
<p>效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4ypemD.gif" alt=""></p>
<p>发送方 Fragment</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        Button button = getView().findViewById(R.id.button);</span><br><span class="line">        EditText editText = getView().findViewById(R.id.editTextTextPersonName);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                String text = editText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(TextUtils.isEmpty(text)){</span><br><span class="line">                    Toast.makeText(getActivity(), <span class="string">"请输入姓名"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putString(<span class="string">"name"</span>, text);</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_firstFragment_to_secondFragment, bundle);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>接收方 Fragment</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        TextView textView = getView().findViewById(R.id.textView);</span><br><span class="line">        textView.setText(getArguments().getString(<span class="string">"name"</span>));</span><br><span class="line">        Button button = getView().findViewById(R.id.button2);</span><br><span class="line">        button.setOnClickListener(Navigation.createNavigateOnClickListener(R.id.action_secondFragment_to_firstFragment));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 使用 ViewModel，效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/26/4yrL6g.gif" alt=""></p>
<p>FirstFragment部分。</p>
<p>要注意onCreateView是创建的时候调用，onViewCreated是在onCreateView后被触发的事件，前后关系。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        MyViewModel myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br><span class="line">        FragmentFirstBinding binding = DataBindingUtil.inflate(inflater, R.layout.fragment_first, container, <span class="keyword">false</span>);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(getActivity());</span><br><span class="line">        binding.buttonNext.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_firstFragment_to_secondFragment);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        binding.seekBar.setProgress(myViewModel.getNumber().getValue());</span><br><span class="line">        binding.seekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> i, <span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">                myViewModel.getNumber().setValue(binding.seekBar.getProgress());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span>  binding.getRoot();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>SecondFragment部分。</p>
<p>两边获取 ViewModelProvider 都是使用的 <code>getActivity()</code> 而不是 <code>this</code>，因此请求的 ViewModel 是一个对象，这就是 Singleton 的含义，故能数据共享。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        FragmentSecondBinding binding = DataBindingUtil.inflate(inflater, R.layout.fragment_second, container, <span class="keyword">false</span>);</span><br><span class="line">        MyViewModel myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(getActivity());</span><br><span class="line">        binding.buttonBack.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{</span><br><span class="line">                NavController navController = Navigation.findNavController(view);</span><br><span class="line">                navController.navigate(R.id.action_secondFragment_to_firstFragment);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> binding.getRoot();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="动画补间"><a href="#动画补间" class="headerlink" title="动画补间"></a>动画补间</h2><p>各个 Fragment 之间的切换动作。效果图如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yCqfA.gif" alt=""></p>
<p>Slide_From_Left 进入动画。</p>
<p>fromXDelta：起始位置。（0% 表示 Fragment 中的位置）</p>
<p>toXDelta：结束位置。</p>
<p>duration：持续时间。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"-100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>Slide_To_Right 移出动画。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>也可以定制其它花里胡哨的动画。</p>
<p><img src="https://z3.ax1x.com/2021/09/25/4yPzg1.gif" alt=""></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">"100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"-100%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>ViewModelSavedState（即使进程在后台被系统杀死数据也能保存下来）</title>
    <url>/2021/09/24/ViewModelSavedState%EF%BC%88%E5%8D%B3%E4%BD%BF%E8%BF%9B%E7%A8%8B%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%A2%AB%E7%B3%BB%E7%BB%9F%E6%9D%80%E6%AD%BB%E6%95%B0%E6%8D%AE%E4%B9%9F%E8%83%BD%E4%BF%9D%E5%AD%98%E4%B8%8B%E6%9D%A5%EF%BC%89/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>正常情况下，如果一个进程被移到后台，且当前系统内存不足时，会有一定概率会将该进程杀死来释放内存资源，而被系统杀死时，ViewModel也会被删除，UI的数据就会遭到丢失。</p>
<p><img src="https://z3.ax1x.com/2021/09/24/4DxeOJ.png" alt=""></p>
<p>如下图所示，一旦切出后台进程被系统杀死数据就会丢失。</p>
<p>不过好在系统杀死进程时，会调用 onSaveInstanceState() 方法，顾名思义就是保存实例状态的，我们重写这个方法来保存我们的数据。</p>
<div style="display: flex;justify-content: center;">
    <img src="https://z3.ax1x.com/2021/09/24/4Dzc8K.png" height="400px" width="230px" style="margin: 50px;">
    <img src="https://z3.ax1x.com/2021/09/24/4Dz6C6.png" height="400px" width="230px" style="margin: 50px;">
</div>

<span id="more"></span>
<p><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="1-onSaveInstanceState"><a href="#1-onSaveInstanceState" class="headerlink" title="1. onSaveInstanceState"></a>1. onSaveInstanceState</h4><p>ViewModel部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="keyword">null</span>){</span><br><span class="line">            number = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            number.setValue(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        number.setValue(number.getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>MainActivity，21 - 23行是载入 savedInstanceState，28 - 32是写入 savedInstanceState。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.example.viewmodelsavedstate.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    MyViewModel myViewModel;</span><br><span class="line">    ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SAVED_KEY_NAME = <span class="string">"number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        <span class="keyword">if</span>(savedInstanceState != <span class="keyword">null</span>){</span><br><span class="line">            myViewModel.getNumber().setValue(savedInstanceState.getInt(SAVED_KEY_NAME));</span><br><span class="line">        }</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(<span class="meta">@NonNull</span> Bundle outState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        outState.putInt(SAVED_KEY_NAME, myViewModel.getNumber().getValue());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-SavedStateHandle"><a href="#2-SavedStateHandle" class="headerlink" title="2. SavedStateHandle"></a>2. SavedStateHandle</h4><p>ViewModel部分，使用 SavedStateHandle 来代替 MutableLiveData 存储数据，同时在创建 ViewModel 时将SavedStateHandle 传入供后续使用。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.MutableLiveData;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.SavedStateHandle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> SavedStateHandle handle;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span><span class="params">(SavedStateHandle handle)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.handle = handle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(!handle.contains(MainActivity.SAVED_KEY_NAME)){</span><br><span class="line">            handle.set(MainActivity.SAVED_KEY_NAME, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> handle.getLiveData(MainActivity.SAVED_KEY_NAME);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">        getNumber().setValue(getNumber().getValue() + x);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>MainActivity部分</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.viewmodelsavedstate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.viewmodelsavedstate.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line">    MyViewModel myViewModel;</span><br><span class="line">    ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SAVED_KEY_NAME = <span class="string">"number"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>制作俄罗斯方块</title>
    <url>/2021/08/29/%E5%88%B6%E4%BD%9C%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前游戏标签下只是大致做了个目录，游戏实质内容并没有实现，最近又超级不想学<code>Deep Learning</code>，就来把这个俄罗斯方块给写了吧，后续的游戏等有空再写（下次一定）。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hG3GOx.jpg" alt="empty"></p>
<span id="more"></span>
<p><br></p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>写游戏嘛，肯定要先把大致的框架和要实现的功能想好。于是我就画了个比较简略的图，不过应该还是挺清楚的，还附加了尺寸，没提到的部分就自由发挥吧，怎么舒服怎么来。</p>
<p>其中每个俄罗斯方块都是由四个小方块组成，每个小方块都是32px * 32px的，一共19行，12列。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGVaT.jpg" alt="design"></p>
<p>实际HTML实现效果如下。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGGQMR.jpg" alt="efficiency"></p>
<p>然后设计每一个俄罗斯方块，由于考虑到旋转的问题，这里将他们都用一个大的矩形框起来。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGBD3V.jpg" alt="tetrisCube"></p>
<p>平移就不用多说了，我就着重说下旋转吧！</p>
<p>下面是L型的旋转图示，从左至右，从上至下，我把对应方块的X，Y坐标也写在旁边了。</p>
<p>仔细观察的话可以发现，旋转之后图形的Y就是旋转之前图形的X，而旋转之后图形的X就是旋转之前的（3 - Y）。</p>
<p>不过需要注意的是，旋转也会越界，需做一定的判断。</p>
<p><img src="https://z3.ax1x.com/2021/08/29/hGzkdO.jpg" alt="rotate"></p>
<p><br></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>设计好实现的框架后，再添加亿点代码就完事了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>这里就不把代码贴出来了，没怎么写注释，让我再看一遍也费劲，相信聪明的人看了上面的设计图就会有思路了。</p>
<p>从昨天下午写到今天下午，一半的时间都在改bug，不是很会用JS的debug。</p>
<p><img src="https://z3.ax1x.com/2021/08/30/htyG1s.gif" alt="code"></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
  <entry>
    <title>制作贪吃蛇</title>
    <url>/2021/09/10/%E5%88%B6%E4%BD%9C%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>直接步入正题，由于游戏本身游玩以及操作比较简单，因此这次的游戏界面会有点简陋，实在是不知道该加啥东西了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>游戏主体部分是宽为650px，高为450px，而小蛇的每一格身体都是25 * 25的，因此整个游戏界面有18行，26列。</p>
<p>这一次我会尽量把每一个功能的代码都记录下来，一是因为这个贪吃蛇代码肯定比俄罗斯方块要少，二是因为，不写代码的话，我这篇博客已经结束了，这也太短了吧喂！</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjBnGF.jpg" alt=""></p>
<span id="more"></span>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>HTML代码如下，布局都是采用position：absolute的方式，因为部件比较少，这样代码也不会很繁琐，而且很简单。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./snake.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">#000000</span> <span class="number">3.5px</span> solid;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.container</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">570px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">707px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin</span>: <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin-top</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.gameDiv</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">450px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">650px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">p</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.length</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.score</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-tag">h2</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">left</span>: <span class="number">305px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.deflory</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">				<span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.snakeCube</span>{</span></span><br><span class="line"><span class="css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">			}</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"length"</span>&gt;</span></span><br><span class="line">				长度：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"score"</span>&gt;</span></span><br><span class="line">				分数：</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gameDiv"</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/Deflory.png"</span> <span class="attr">class</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-移动贪吃蛇"><a href="#1-移动贪吃蛇" class="headerlink" title="1. 移动贪吃蛇"></a>1. 移动贪吃蛇</h4><p>（1） 键盘监听</p>
<p>首先需要让小蛇动起来，因此就会需要键盘监听事件。</p>
<p>凡事都不能一口吃成一个大胖子，不要急着写移动的功能，先看看能否监听到键盘。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ROWS = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> COLS = <span class="number">26</span></span><br><span class="line"><span class="keyword">var</span> SNAKE_SIZE = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{</span><br><span class="line">	onKeyDown();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// A 和 ←</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// S 和 ↓</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">// D 和 →</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>稍微按了几下，浏览器的输出也正常，接下来就开始写移动的函数了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjfPHg.jpg" alt="console"></p>
<p>但在此之前，还有一件事。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjIFs0.png" alt="havesomethingmore"></p>
<p>（2） 创建小蛇</p>
<p>我们没有东西去移动啊！所以要写一个小蛇初始化的函数。</p>
<p>此处snakeCube类我只写了个position：absolute，不然每次写挺麻烦的。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建初始的贪吃蛇</span></span><br><span class="line"><span class="function">function <span class="title">createSnake</span><span class="params">()</span></span>{</span><br><span class="line">	game_div = document.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 蛇头</span></span><br><span class="line">	snakeHead = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">	snakeHead.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/right.png"</span>)</span><br><span class="line">	snakeHead.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	game_div.appendChild(snakeHead);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 蛇身×3</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++){</span><br><span class="line">		snakeBody = document.createElement(<span class="string">"img"</span>);</span><br><span class="line">		snakeBody.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>)</span><br><span class="line">		snakeBody.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">		game_div.appendChild(snakeBody);</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果单单只是创建元素，而不给它“定位”，也就是设定top和left值，他显示是会叠在一起的。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjozgs.jpg" alt="error"></p>
<p>（3） 定位</p>
<p>综上所述，还有一件事，再写一个定位的函数。不要忘了在createSnake的末尾加上这个定位函数。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjogHK.jpg" alt=""></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="keyword">var</span> snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">var</span> len = snakes.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjbUM9.jpg" alt=""></p>
<p>（4） 移动</p>
<p>好了，历经千辛万苦，终于可以准备让这个小蛇动起来了。</p>
<p>先来解释下这里的逻辑吧，想想贪吃蛇是怎么移动的呢？</p>
<p>是不是头先动，然后紧接着第一节身体移动到原先头的位置，第二节身体移动到原先第一节身体的位置。因此我们只需要把snakeLocation数组从后往前覆盖就行了（不能从先往后噢，想想就明白了）。</p>
<p>此外这里x，y都是单位长度，因此还要乘以蛇的大小。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 贪吃蛇移动，x为横向，y为纵向</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">x, y</span>)</span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=snakeLen-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--){</span><br><span class="line">		snakeLocation[i][<span class="number">0</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">		snakeLocation[i][<span class="number">1</span>] = snakeLocation[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	}</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = snakeLocation[<span class="number">0</span>][<span class="number">0</span>] + SNAKE_SIZE * x;</span><br><span class="line">	snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = snakeLocation[<span class="number">0</span>][<span class="number">1</span>] + SNAKE_SIZE * y;</span><br><span class="line">	snakeLocate();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>好像略微有些惊悚嘛，不过没关系，修改一下移动时头部的方向就行。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hjO7RO.png" alt=""></p>
<p>只需要在移动前修改方向变量，定位时判断方向即可，这里代码太多就放出来一部分。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line"><span class="comment">// 键盘监听事件，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">			<span class="comment">// W 和 ↑</span></span><br><span class="line">			<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">				snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">				move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位蛇的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snakeLocate</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> snakes = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"snakeCube"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;snakeLen;i++){</span><br><span class="line">		snakes[i].style.left = snakeLocation[i][<span class="number">0</span>] + <span class="string">"px"</span>;</span><br><span class="line">		snakes[i].style.top = snakeLocation[i][<span class="number">1</span>] + <span class="string">"px"</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			snakes[<span class="number">0</span>].setAttribute(<span class="string">"src"</span>,<span class="string">"./img/up.png"</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hjzREj.gif" alt=""></p>
<h4 id="2-碰撞判定"><a href="#2-碰撞判定" class="headerlink" title="2. 碰撞判定"></a>2. 碰撞判定</h4><p>（1） 自身碰撞判定</p>
<p>贪吃蛇碰到自己身体就应该结束游戏了。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSKsS.png" alt=""></p>
<p>自身碰撞判定无非就是判断头和身体有没有碰撞，一个for-loop就行了。</p>
<p>当然，我们还需要一个flag，来判断当前是否已经结束，默认是false。</p>
<p>函数实现起来比较轻松，注意每次move都需判断，而且得在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 自身碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchItself</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;snakeLen;i++){</span><br><span class="line">		<span class="keyword">if</span>(left == snakeLocation[i][<span class="number">0</span>] &amp;&amp; top == snakeLocation[i][<span class="number">1</span>]){</span><br><span class="line">			gameover = <span class="literal">true</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后还得修改一下键盘监听事件，只有gameover = false时才监听移动事件。</p>
<p>这里我多添加了两个方法，一会儿实现。</p>
<p>一个是gameover = true时的restart()；一个是gameover = false时的pause()。</p>
<p>前者用于重新开始，后者用于游戏暂停</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyDown</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line">		<span class="keyword">if</span>(!gameover){</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// W 和 ↑</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">87</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"up"</span>;</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"上"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// A 和 ←</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">65</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"left"</span>;</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"左"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// S 和 ↓</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">83</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"down"</span>;</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"下"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// D 和 →</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">				<span class="keyword">case</span> <span class="number">68</span>:{</span><br><span class="line">					snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="built_in">console</span>.log(<span class="string">"右"</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					pause();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			<span class="keyword">switch</span>(event.keyCode){</span><br><span class="line">				<span class="comment">// 空格键</span></span><br><span class="line">				<span class="keyword">case</span> <span class="number">32</span>:{</span><br><span class="line">					restart();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 边框碰撞判定</p>
<p>贪吃蛇是不能穿越这个游戏的边框的，至于碰到边框是会死，还是从另一边出来可以自由发挥。</p>
<p>我这里实现的是从另一头出来的方式。</p>
<p><img src="https://z3.ax1x.com/2021/09/10/hvSWLD.png" alt=""></p>
<p>类似自身碰撞判定，也是要在“定位”之前判断。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 边界碰撞判定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crashBoundary</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(left &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">625</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(left &gt; <span class="number">625</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &lt; <span class="number">0</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">425</span>;</span><br><span class="line">	}<span class="keyword">else</span> <span class="keyword">if</span>(top &gt; <span class="number">425</span>){</span><br><span class="line">		snakeLocation[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvwSEV.gif" alt=""></p>
<h4 id="3-游戏结束"><a href="#3-游戏结束" class="headerlink" title="3.游戏结束"></a>3.游戏结束</h4><p>（1） 计时器</p>
<p>首先，我们的小蛇不能自己动，需要设置一个计时器。</p>
<p>因为需要暂停和继续游戏，所以我们在方法中判断，如果当前有计时器就取消它，没有则设置一个。</p>
<p>记得在初始化的时候调用一下。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 暂停/继续游戏</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>暂停的时候，屏幕上空荡荡的也不大好，给人有一种没有暂停的错觉。所以加一个div，美化下暂停的界面。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.paused</span>{</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"paused"</span>&gt;</span></span><br><span class="line">    按下 SPACE 继续游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvWBxx.png" alt=""></p>
<p>在修改下上面pause方法，暂停的时候显示提示，继续时隐去提示。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">if</span>(timer == <span class="literal">null</span>){</span><br><span class="line">		timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">			<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">					move(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">					move(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">					move(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}, <span class="number">200</span>);</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">		timer = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"paused"</span>)[<span class="number">0</span>]</span><br><span class="line">		end.style.display = <span class="string">"block"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 游戏结束</p>
<p>在此之前，我又写了个div，可以先看看效果。同暂停类似，只需要将它的display值默认设为none，待到游戏结束时在改成block即可。</p>
<p>处于美观，我将游戏背景颜色改成了深灰色。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.gameover</span>{</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"gameover"</span>&gt;</span></span><br><span class="line">    游戏结束</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    按下 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#ee3000"</span>&gt;</span>SPACE<span class="tag">&lt;/<span class="name">font</span>&gt;</span> 重新开始</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">final</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>;</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/10/hvgmVJ.png" alt=""></p>
<p>（3） 重新开始</p>
<p>重新开始需要把所有的变量都重置，然后删除游戏中的贪吃蛇，再把游戏结束的提示隐去，然后和init()一样。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 重新开始</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restart</span>(<span class="params"></span>)</span>{</span><br><span class="line">	snakeLocation = [[<span class="number">200</span>, <span class="number">125</span>],[<span class="number">175</span>, <span class="number">125</span>],[<span class="number">150</span>, <span class="number">125</span>],[<span class="number">125</span>, <span class="number">125</span>]]</span><br><span class="line">	snakeLen = <span class="number">4</span>;</span><br><span class="line">	snakeHeadDirection = <span class="string">"right"</span>;</span><br><span class="line">	gameover = <span class="literal">false</span>;</span><br><span class="line">	timer = <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> children = gameDiv.children;</span><br><span class="line">	<span class="keyword">var</span> childrenLen = children.length;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=childrenLen-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">		gameDiv.removeChild(children[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">var</span> end = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameover"</span>)[<span class="number">0</span>]</span><br><span class="line">	end.style.display = <span class="string">"none"</span>; </span><br><span class="line">	createSnake();</span><br><span class="line">	pause();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-分数系统"><a href="#4-分数系统" class="headerlink" title="4. 分数系统"></a>4. 分数系统</h4><p>最后就是小蛇蛇吃的食物啦。</p>
<p>（1） 食物是在屏幕中随机出现，而且吃完一个就会出现下一个。</p>
<p>创建食物同创建小蛇类似，只是多了个random函数，要确保食物随机在游戏界面中。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	foodLeft = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * COLS);</span><br><span class="line">	foodTop = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * ROWS);</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> food = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	food.className = <span class="string">"foodCube"</span>;</span><br><span class="line">	food.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/food.png"</span>);</span><br><span class="line">	food.style.top = foodTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	food.style.left = foodLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	gameDiv.appendChild(food);</span><br><span class="line">	updateData();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（2） 吃一个长度+1，分数+10，且小蛇的身体+1。</p>
<p>蛇头碰到食物即吃掉，删除该img，然后生成新的食物；</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 吃掉食物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatFood</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> left = snakeLocation[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> top = snakeLocation[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(foodLeft == left &amp;&amp; foodTop == top){</span><br><span class="line">		snakeLen++;</span><br><span class="line">		score += <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">var</span> food = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"foodCube"</span>)[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">		gameDiv.removeChild(food);</span><br><span class="line">		createFood();</span><br><span class="line">		grow();</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 长身体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grow</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> gameDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"gameDiv"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> body = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">	body.className = <span class="string">"snakeCube"</span>;</span><br><span class="line">	body.setAttribute(<span class="string">"src"</span>,<span class="string">"./img/body.png"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 当前最后一个身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> lastTop = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">var</span> lastLeft = snakeLocation[snakeLen-<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="comment">// 新的身体的位置</span></span><br><span class="line">	<span class="keyword">var</span> bodyTop = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> bodyLeft = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(snakeHeadDirection){</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"up"</span>:{</span><br><span class="line">			bodyTop = lastTop + <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"down"</span>:{</span><br><span class="line">			bodyTop = lastTop - <span class="number">1</span>;</span><br><span class="line">			bodyLeft = lastLeft;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"left"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"right"</span>:{</span><br><span class="line">			bodyTop = lastTop;</span><br><span class="line">			bodyLeft = lastLeft - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	body.style.top = bodyTop * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	body.style.left = bodyLeft * SNAKE_SIZE + <span class="string">"px"</span>;</span><br><span class="line">	snakeLocation[snakeLen-<span class="number">1</span>] = [bodyLeft, bodyTop];</span><br><span class="line">	gameDiv.appendChild(body);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>之后更新界面分数</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 更新界面中分数和长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>)</span>{</span><br><span class="line">	<span class="keyword">var</span> scoreH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"score"</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> lengthH1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"length"</span>)[<span class="number">0</span>];</span><br><span class="line">	scoreH1.innerHTML = <span class="string">"分数："</span> + score;</span><br><span class="line">	lengthH1.innerHTML = <span class="string">"长度："</span> + snakeLen;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>（3） 分数越高，小蛇移动速度越快。</p>
<p>三句代码即可，记得添加到适当的位置，这里就不给出来了。</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> speed = <span class="number">1</span>;</span><br><span class="line">speed += score / <span class="number">10</span> * <span class="number">0.05</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{}, <span class="number">100</span> / speed);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-游戏性"><a href="#5-游戏性" class="headerlink" title="5. 游戏性"></a>5. 游戏性</h4><p>至此，贪吃蛇的代码已全部写完，之后可以按自己的想法添加一些游戏的规则，例如可以添加一个红色果实的设定，效果是绿色果实的三倍，出现概率10%。我就不实现了，现在已经凌晨了，累了。</p>
<p>游戏运行画面如下。</p>
<p><img src="https://z3.ax1x.com/2021/09/11/hvLwJf.gif" alt=""></p>
<p>以后写小游戏就不写这么详细了，这也太累了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>游戏制作</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式回归</title>
    <url>/2021/09/27/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>如果你的数据比直线更复杂怎么办？例如抛物线。显然 <a href="/2021/09/13/线性回归">线性回归</a> 无法胜任这个工作，但我们只需要稍加修改，将每个特征的幂次方作为一个新特征即可，大致与<code>线性回归</code>类似，不过是多元一次和多元多次的区别。</p>
<p>线性回归假设目标拟合曲线函数为$y = w_1x_1 + w_2x_2 + w_3x_3 + … + b$，其中 $w_n$ 为系数 $x_n$ 为特征。</p>
<p>而多项式回归假设目标拟合曲线为$y = w_1x_1^n + w_2x_1^{n-1}x_2 + w_3x_1^{n-2}x_2^2 + … + w_nx_2^n$，这里出于简便只写了两个未知数的情况。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里我用的是三次函数的图像外加了点噪声，用<code>线性回归</code>肯定是拟合不了的。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">2.6</span> * x ** <span class="number">3</span> - <span class="number">3.14</span> * x ** <span class="number">2</span> - <span class="number">8.8</span> * x + np.random.normal(<span class="number">0</span>, <span class="number">700</span>, (<span class="number">200</span>, ))</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/27/4RC9un.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = x.reshape([-<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">X = np.hstack([X ** <span class="number">3</span>, X ** <span class="number">2</span>, X])</span><br><span class="line">X_b = np.hstack([np.ones([<span class="built_in">len</span>(y), <span class="number">1</span>]), X])</span><br><span class="line"><span class="comment"># X [200, 3]</span></span><br><span class="line"><span class="built_in">print</span>(X.shape)</span><br></pre></td></tr></tbody></table></figure>
<p>如算法思想所述，梯度下降的代码是没有改变的，只是添加了特征的幂指数作为额外的特征值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">    <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">X_b, y, theta, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">        gradient = DJ(X_b, y, theta)</span><br><span class="line">        last_theta = theta</span><br><span class="line">        theta = theta - eta * gradient</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i_iter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">initial_theta = np.zeros(X_b.shape[<span class="number">1</span>])</span><br><span class="line">theta = gradient_descent(X_b, y, initial_theta, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>得出 theta = array([-12.65120346,   2.89719563,  -3.12234806, -15.72650818])</p>
<p>也基本对应了我预设的函数系数[2.6, -3.14, -8.8]</p>
<p>注：theta 每一项分别对应了截距，$x^3$ 的系数，$x^2$ 的系数，$x$ 的系数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pred_y = theta[<span class="number">1</span>] * x ** <span class="number">3</span> + theta[<span class="number">2</span>] * x ** <span class="number">2</span> + theta[<span class="number">3</span>] * x + theta[<span class="number">0</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/27/4RPGd0.png" alt=""></p>
<p><br></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>需要注意的是多项式化是成<code>阶乘式</code>的增长，比指数爆炸更可怕！</p>
<p>$\frac{(n + d)!}{d!n!}$，其中 n 为原本特征数，d 为最高次数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolynomialRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, degree</span>):</span></span><br><span class="line">        self.degree = degree</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">        self.X = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        </span><br><span class="line">        initial_theta = np.zeros([self.X.shape[<span class="number">1</span>]])</span><br><span class="line">        theta = self._gradient_descent(self.X, y, initial_theta, eta, n_iters, epsilon)</span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.coefficient = theta[<span class="number">1</span>:]</span><br><span class="line">        self.intercept = theta[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多项式化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPolynomialFeatures</span>(<span class="params">self, X, start, col_val, degree</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">X, result, start, col_val, degree</span>):</span></span><br><span class="line">            result.append(col_val)</span><br><span class="line">            <span class="keyword">if</span>(degree == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, X.shape[<span class="number">1</span>]):</span><br><span class="line">                dfs(X, result, start, col_val * X[:, i].reshape([-<span class="number">1</span>, <span class="number">1</span>]), degree - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        dfs(X, result, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), degree)</span><br><span class="line">        <span class="keyword">return</span> np.squeeze(np.array(result), -<span class="number">1</span>).T</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X_b = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        y_pred = X_b.dot(self.theta)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = self.predict(X)</span><br><span class="line">        <span class="keyword">return</span> np.mean((y - y_pred) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gradient_descent</span>(<span class="params">self, X_b, y, theta, eta, n_iters, epsilon</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line">        </span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            gradient = DJ(X_b, y, theta)</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * gradient</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">poly_reg = PolynomialRegression(<span class="number">3</span>)</span><br><span class="line">poly_reg.fit(x.reshape([-<span class="number">1</span>, <span class="number">1</span>]), y, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span>)</span><br><span class="line"></span><br><span class="line">theta = poly_reg.theta</span><br><span class="line">pred_y = theta[<span class="number">3</span>] * x ** <span class="number">3</span> + theta[<span class="number">2</span>] * x ** <span class="number">2</span> + theta[<span class="number">1</span>] * x + theta[<span class="number">0</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>结果如出一辙。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fChIP.png" alt=""></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>梯度下降法</title>
    <url>/2021/09/12/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>梯度下降法是一种非常通用的优化算法，能够为大范围的问题找到最优解。梯度下降的中心思想就是迭代地调整参数从而使成本函数最小化。（PS：梯度上升法解决最大化问题）</p>
<p><img src="https://z3.ax1x.com/2021/09/12/4p2RAS.png" alt=""></p>
<p>斜率为正，代表单调递增，说明极值点在左边；</p>
<p>斜率为负，代表单调递减，说明极值点在右边。</p>
<p>因此我们可以通过减去导数来找到最值点（假如极值点只有一个），因此被称为梯度下降法。</p>
<p>不过由于每个点上的导数是固定的，例如接近笔直的直线斜率就几乎是无穷大，如果我们直接减去导数，显然就不大合适。</p>
<p>所以就引申出了eta，也被称作学习率（learning rate）。现在我们只需减去eta * gradient就可以了，通过调整eta的大小来改变拟合的速度</p>
<p>eta过大可能导致无法拟合，eta过小则会拟合过慢，下面会有实例展示。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这是eta适中的情况，只花了26步就找到了最小值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 26 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pIdbR.png" alt=""></p>
<p>这里eta就偏小了，虽然也能找到最小值，但运行了875次，是上面的五十多倍。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 875 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pTA1S.png" alt=""></p>
<p>这里eta也算是适中的情况，只不过图像会比较特殊，左右反复横跳，因此我也拿出来当个样例。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 21 steps</span></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4pTtB9.png" alt=""></p>
<p>这是最差的情况，eta过大，导致y越来越大，已经无法取得最小值了。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta, max_len = <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/12/4p7FER.png" alt=""></p>
<p><br></p>
<p>当然也会有存在多个极值点的情况，下图中如果选择左边作为起始点，基本就找不到全局最优解了，只能找到局部最优解。</p>
<p>不过幸好，一般使用MSE(Mean Square Error)作为成本函数，而MSE恰好是个凸函数，这就意味着连接曲线上任意两点的线段永远也不会跟曲线相交。也就是说不存在局部最小值，只有一个全局最小值。它同时也是一个连续函数，所以斜率不会产生陡峭的变化。</p>
<p>这两点保证的结论是：即便是乱走，梯度下降也可以趋近到全局最小值（只要等待时间足够长，学习率也不是太高）。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4CjCQI.png" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * x ** <span class="number">2</span> + <span class="number">3.5</span> * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标导函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制导数轨迹曲线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gradient_tracks</span>(<span class="params">start, epsilon, eta, max_len = <span class="number">1e4</span></span>):</span></span><br><span class="line">    a = start</span><br><span class="line"></span><br><span class="line">    historys = []</span><br><span class="line">    <span class="keyword">while</span>(max_len &gt; <span class="number">0</span>):</span><br><span class="line">        last = J(a)</span><br><span class="line">        historys.append([a, J(a)])</span><br><span class="line">        a = a - eta * DJ(a)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(last - J(a)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        max_len -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    historys = np.array(historys)</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    plt.plot(historys[:, <span class="number">0</span>], historys[:, <span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="built_in">print</span>(historys.shape[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> historys[-<span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start = -<span class="number">10.0</span></span><br><span class="line">epsilon = <span class="number">1e-5</span></span><br><span class="line">eta = <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">plot_gradient_tracks(start, epsilon, eta)		<span class="comment"># array([-3.5000062, -4.125])</span></span><br></pre></td></tr></tbody></table></figure>
<p>将目标函数配方得，$\frac{1}{2}x^2 + \frac{7}{2}x + 2 = \frac{1}{2}[(x + \frac{7}{2})^2 + \frac{33}{4}]$</p>
<p>可以得出在$x = -\frac{7}{2}$处，取得最小值$y = \frac{33}{8}$</p>
<p>与测试结果基本一致。</p>
<p>注：计算结果不可能与理论值相等。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>数据归一化</title>
    <url>/2021/09/14/%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>观察下图，可以发现每个特征之间的量纲不同，没有办法放在一起比较，学习出来的模型可解释性比较差。而且对于KNN算法来说，样本之间的距离极大部分会由发现时间（天）来引导，肿瘤大小（厘米）几乎可以忽略不计。</p>
<p><img src="https://z3.ax1x.com/2021/09/14/4k3M9K.png" alt=""></p>
<p>为此我们就需要采用归一化，把有量纲的表达式改成<code>无量纲</code>的表达式，将数据的所有特征都映射到一个统一的尺度下。（对于其它算法如线性回归则不会影响分类或预测结果）</p>
<p>而且归一化后可以加速训练，左侧因为进行了归一化，因此等高线几乎是正圆，等高线上的法线指向圆心，因此能快速收敛到最小值，而右图没有进行归一化则需进行多次迭代。</p>
<p>没有进行归一化，学习率也得按照特征取值范围最小的那个维度来取，不然很容易出现nan。</p>
<p>注：由于进行了归一化，我们的模型都是按照归一化的数据进行训练的，因此测试数据也要进行归一化，否则没有意义了。</p>
<p><img src="https://z3.ax1x.com/2021/09/14/4kxFRU.png" alt=""></p>
<p>（1） 均值方差归一化（standardization）</p>
<script type="math/tex; mode=display">
X_{scale} = \frac{X - X_{mean}}{X_{std}}</script><p>经过该标准化处理的数据，均值为0，方差为1，符合正态分布。</p>
<p>适用于数据分布没有明显的边界，有可能存在极端的数据值。</p>
<p>正好学了概率论，就来简单推导下吧。</p>
<script type="math/tex; mode=display">
设经过均值方差归一化后X^*的数学期望和方差分别为E^*X, D^*X \qquad (X^* = \frac{X - EX}{\sqrt{DX}})
\\
E^*X = E(\frac{X - EX}{\sqrt{DX}}) = \frac{1}{\sqrt{DX}} * (EX - EX) = 0
\\
D^*X = D(\frac{X - EX}{\sqrt{DX}}) = \frac{1}{DX} * D(X - EX) = \frac{1}{DX} * DX = 1</script><p>（2）最值归一化（Normalization）</p>
<script type="math/tex; mode=display">
X_{scale} = \frac{X - X_{min}}{X_{max} - X_{min}}</script><p>经过该标准化处理的数据，数据分布在(0, 1)。</p>
<p>适用于分布有明显边界的情况，受 outliner影响较大。</p>
<p>例如像素范围（0 ~ 255），学生成绩（0 ~ 100）。</p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>（1） 最值归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinMaxScaler</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.<span class="built_in">max</span> = np.<span class="built_in">max</span>(X, axis = <span class="number">0</span>)</span><br><span class="line">        self.<span class="built_in">min</span> = np.<span class="built_in">min</span>(X, axis = <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (X - self.<span class="built_in">min</span>) / (self.<span class="built_in">max</span> - self.<span class="built_in">min</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>原始数据均值为46.995，标准差为27.97007284581147。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(np.mean(X))			<span class="comment"># 46.995</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X))			<span class="comment"># 27.97007284581147</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kODbt.png" alt=""></p>
<p>经过最值归一化后，均值为0.4721085858585859，标准差为0.2863025514861211。</p>
<p>所有值都被映射到（0， 1）之间</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">minMaxScaler = MinMaxScaler()</span><br><span class="line">minMaxScaler.fit(X)</span><br><span class="line">X1 = minMaxScaler.transform(X)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(X1))			<span class="comment"># 0.4721085858585859</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X1))			<span class="comment"># 0.2863025514861211</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X1[:, <span class="number">0</span>], X1[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kXqTP.png" alt=""></p>
<p>（2） 均值方差归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardScaler</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.mean = np.mean(X, axis = <span class="number">0</span>)</span><br><span class="line">        self.std = np.std(X, axis = <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (X - self.mean) / self.std</span><br></pre></td></tr></tbody></table></figure>
<p>经过均值方差归一化后，均值几乎为0，标准差也几乎为1，但数据范围不一定在（0， 1）中。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">standardScaler = StandardScaler()</span><br><span class="line">standardScaler.fit(X)</span><br><span class="line">X1 = standardScaler.transform(X)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(X1))				<span class="comment"># -2.7755575615628914e-17</span></span><br><span class="line"><span class="built_in">print</span>(np.std(X1))				<span class="comment"># 0.9999999999999998</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X1[:, <span class="number">0</span>], X1[:, <span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/14/4kXEMd.png" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先介绍一下 <code>train test split</code>，正如它的字面意思。将一份数据集分成训练数据集和测试数据集，这样在使用 score 函数时，使用的都是训练时没有见过的数据集，得出来的准确率也就更可靠。</p>
<p>首先数据集需要打乱，因为有些数据集是根据类别来分类的，例如前 k 个都是类别1，后 k 个都是类别2，这样 train 和test中的类别分布差距很大，会导致泛化效果不好。</p>
<p>np.random.seed(seed) 使用同一个种子为了能更好的比较使用归一化和不使用归一化的区别。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_test_split</span>(<span class="params">X, y, split_rate, seed</span>):</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    length = <span class="built_in">int</span>(<span class="built_in">len</span>(X) * split_rate)</span><br><span class="line">    p = np.random.permutation(<span class="built_in">len</span>(X))</span><br><span class="line">    <span class="keyword">return</span> X[p[length:]], X[p[:length]], y[p[length:]], y[p[:length]]</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>（1） 不使用归一化进行学习</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data			<span class="comment"># (506, 13)</span></span><br><span class="line">y=boston.target			<span class="comment"># (506, )</span></span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-6</p>
<p>score = 31.348463775149956</p>
<p>（2） 使用最值归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">minMaxScaler = MinMaxScaler()</span><br><span class="line">minMaxScaler.fit(X)</span><br><span class="line">X = minMaxScaler.transform(X)</span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-2</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-2</p>
<p>score = 25.209485526542817</p>
<p>（3） 使用均值方差归一化</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">standardScaler = StandardScaler()</span><br><span class="line">standardScaler.fit(X)</span><br><span class="line">X = standardScaler.transform(X)</span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.2</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, split_rate)</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X_train, y_train, eta = <span class="number">1e-2</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line">lr.score(X_test, y_test)</span><br></pre></td></tr></tbody></table></figure>
<p>eta = 1e-2</p>
<p>score = 18.92473923096906</p>
<p>经过对比，使用同样的训练次数，经过了归一化的预测率明显比没有经过归一化的预测率更高，而且eta取1e-2就行，不用多次尝试。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>概率论</title>
    <url>/2021/09/16/%E6%A6%82%E7%8E%87%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="一-公式"><a href="#一-公式" class="headerlink" title="一. 公式"></a>一. 公式</h1><h2 id="1-排列组合"><a href="#1-排列组合" class="headerlink" title="1. 排列组合"></a>1. 排列组合</h2><p><strong>（1） 排列</strong></p>
<p>$P_m^n = m(m - 1)(m - 2)···(m - n + 1)$</p>
<p>$P_m^n = \frac{m!}{(m - n)!}$</p>
<p><strong>（2） 组合</strong></p>
<p>$C_m^n = \frac{P_m^n}{n!} = \frac{m(m - 1)(m - 2)···(m - n + 1)}{n!}$</p>
<p>$C_m^n = \frac{m!}{n!(m - n)!}$</p>
<p>$C_m^n = C_m^{m-n}$</p>
<p>$C^n_{m+1} = \frac{(m+1)m(m-1)···(m-n+2)}{n!} = \frac{[(m - n + 1) + n]m(m-1)···(m-n+2)}{n!} = \frac{m(m-1)···(m-n+1)}{n!} + \frac{m(m-1)···(m-n+2)}{(n-1)!} = C_m^n + C_m^{n-1}$</p>
<h2 id="2-条件概率"><a href="#2-条件概率" class="headerlink" title="2.条件概率"></a>2.条件概率</h2><p>（1） 条件概率</p>
<p>$P(B|A) = \frac{P(AB)}{P(A)}$，                P(A) &gt; 0</p>
<p>（2） 乘法公式</p>
<p>$$</p>
<p>（3） 完备事件组</p>
<p>（4） 全概率公式</p>
<p>（5） 贝叶斯公式</p>
]]></content>
  </entry>
  <entry>
    <title>模型的训练</title>
    <url>/2021/10/08/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<h2 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h2><p>在 <a href="/2021/09/28/过拟合和欠拟合/">过拟合和欠拟合</a> 中，我们是手动调整超参数 <code>degree</code> ，经由人工一一比对来获取最好的值，效率比较低下。因此我们引入网格搜索这个概念，不要被这个看起来很高大上的名词吓唬住了，其实逻辑十分简单，具体请看下述代码。</p>
<p>使用 sklearn 中自带的波士顿房产数据作为我们的测试数据。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line"></span><br><span class="line">boston = datasets.load_boston()</span><br><span class="line">X = boston.data</span><br><span class="line">y = boston.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br></pre></td></tr></tbody></table></figure>
<p>这里我们要网格搜索的参数即为 p，neighbor， weight。</p>
<p>可以看到所谓 <code>网格搜索</code> 就是使用 for-loop 像网格一样将你预设的可能的值都遍历一遍，依次寻求 score 最高的超参数组合。</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">KNN中的超参数：</span><br><span class="line"><span class="bullet">  -</span> weights：含有 <span class="code">`uniform`</span> 和 <span class="code">`distance`</span> 两种模式</span><br><span class="line"><span class="code">             uniform 是正常的模式</span></span><br><span class="line"><span class="code">             distance 给 k 个相邻的点按照距离远近都赋予一个权重，离预测样本点距离远的权重就低一些，距离近的权重就高一些，</span></span><br><span class="line"><span class="code">             </span></span><br><span class="line"><span class="code">  - p：闵可夫斯基距离参数</span></span><br><span class="line"><span class="code">       p = 1 时，等价于曼哈顿距离</span></span><br><span class="line"><span class="code">       p = 2 时，等价于欧拉距离</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">weights = [<span class="string">"uniform"</span>, <span class="string">"distance"</span>]</span><br><span class="line">best_score = -<span class="number">1</span></span><br><span class="line">best_p = <span class="number">0</span></span><br><span class="line">best_neighbor = <span class="number">0</span></span><br><span class="line">best_weight = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weight <span class="keyword">in</span> weights:</span><br><span class="line">    <span class="keyword">for</span> neighbor <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            reg = KNeighborsRegressor(n_neighbors=neighbor,</span><br><span class="line">                                      weights = weight,</span><br><span class="line">                                      p = p,</span><br><span class="line">                                      n_jobs = -<span class="number">1</span>)</span><br><span class="line">            reg.fit(X_train, y_train)</span><br><span class="line">            score = reg.score(X_test, y_test)</span><br><span class="line">            <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">                best_score = score</span><br><span class="line">                best_neighbor = neighbor</span><br><span class="line">                best_p = p</span><br><span class="line">                best_weight = weight</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_weight ="</span>, best_weight)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_p ="</span>, best_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_neighbor ="</span>, best_neighbor)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best_score ="</span>, best_score)</span><br></pre></td></tr></tbody></table></figure>
<p>输出结果如下。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">best_weight = distance</span><br><span class="line">best_p = <span class="number">1</span></span><br><span class="line">best_neighbor = <span class="number">3</span></span><br><span class="line">best_score = <span class="number">0.7420720968121362</span></span><br></pre></td></tr></tbody></table></figure>
<p>注：KNeighborsRegressor 和 KNeighborsClassifier 思想相同。</p>
<p>KNeighborsClassifier 是找到附近 <code>k</code> 个数据，找到最多那个类别作为预测的<code>类别</code>，用于解决分类问题。</p>
<p>而 KNeighborsRegressor 是找到附近 <code>k</code> 个数据，然后取平均值作为预测的<code>数值</code>，用于解决回归问题。</p>
<p><br></p>
<h4 id="scikit-中的实现"><a href="#scikit-中的实现" class="headerlink" title="scikit 中的实现"></a>scikit 中的实现</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">params = {</span><br><span class="line">    <span class="string">"weights"</span> : [<span class="string">"uniform"</span>, <span class="string">"distance"</span>],</span><br><span class="line">    <span class="string">"p"</span> : [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)],</span><br><span class="line">    <span class="string">"n_neighbors"</span> : [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">knn_reg = KNeighborsRegressor()</span><br><span class="line">grid_search=GridSearchCV(knn_reg, params)</span><br><span class="line">%time grid_search.fit(X_train,y_train)</span><br></pre></td></tr></tbody></table></figure>
<p>GridSearchCV 使用交叉验证来训练数据，即 train-validation-test。因此best_score_可能会比较低。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">grid_search.best_params_ = {<span class="string">'n_neighbors'</span>: <span class="number">5</span>, <span class="string">'p'</span>: <span class="number">1</span>, <span class="string">'weights'</span>: <span class="string">'distance'</span>}</span><br><span class="line">grid_search.best_score_ = <span class="number">0.6091159004372775</span></span><br><span class="line">grid_search.best_estimator_.score(X_test, y_test) = <span class="number">0.7276418519232821</span></span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>在之前模型的训练中，我们都是以测试数据集的 score 来衡量模型的好坏，换言之就是根据 <code>test_score</code> 来调整超参数，并从所有的模型中挑出 <code>test_score</code> 最高的作为我们的预测模型。但这样也会暴露出一个问题，在模型训练期间，我们的模型就已经<code>见过</code>了测试数据集，因此可能会<code>过拟合</code>测试数据集！</p>
<p>这样肯定是不对的，要模拟真正的生产环境，那么测试数据集就不能参与到模型的训练当中。我们只需要再引入一个验证数据集来<code>代替</code>之前测试数据集的作用就行了。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5kvEY4.png" alt=""></p>
<p>但其实这样也会有<code>过拟合</code>验证数据集的问题，因此就有了<code>交叉验证</code>。具体则是将训练数据集分成 K 份，从这 K 份当中选择一份作为验证数据集，其余 K-1 份作为训练数据集。一共有 $C^1_K = K$ 种分法，因此我们可以得到 K 个模型，因此这也被称为 <code>K-folds Cross  Validation</code>（K折交叉验证），最后取他们在验证数据集上的均值作为判断模型好坏的依据。</p>
<p>这里提一句，在 scikit-learn 的网格搜索中，默认使用的是 cv = 5 的交叉验证，也就是五折交叉验证。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5kvFTU.png" alt=""></p>
<p>当交叉验证的 K = n_samples 时，会产生 n_samples 个模型，这时训练出来的模型完全不受随机的影响，将最接近模型真正的性能指标，代价就是训练时间会扩大 n_samples 倍，这就是 <code>LOO-CV</code>（Leave One Out Cross Validtion），也就是留一法。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2021/10/14/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h2><h4 id="1-1、-内置注解"><a href="#1-1、-内置注解" class="headerlink" title="1.1、 内置注解"></a>1.1、 内置注解</h4><ul>
<li><p>@Deprecated</p>
<p>被注解的元素是不鼓励使用的程序元素，通常是因为它是<code>危险</code>的，或者因为存在更好的替代方法。</p>
</li>
<li><p>@Override</p>
<p>表示重写父类方法。</p>
</li>
<li><p>@SuppressWarning</p>
<p>抑制警告。</p>
</li>
<li><p>@FunctionaInterface</p>
<p>指定接口必须为函数式接口。</p>
</li>
</ul>
<h4 id="1-2、元注解"><a href="#1-2、元注解" class="headerlink" title="1.2、元注解"></a>1.2、元注解</h4><p>元注解的作用就是负责<code>注解</code>其它注解。</p>
<ul>
<li><p>@Target</p>
<p>用于描述注解的使用范围。</p>
</li>
<li><p>@Retention</p>
<p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期。</p>
<ul>
<li>SOURCE &lt; CLASS &lt; RUNTIME</li>
</ul>
</li>
<li><p>@Document</p>
<p>说明该注解将被包含在 javadoc 中。</p>
</li>
<li><p>@Inherited</p>
<p>说明子类可以<code>继承</code>父类中的该注释。</p>
</li>
</ul>
<h2 id="1-3、自定义注解"><a href="#1-3、自定义注解" class="headerlink" title="1.3、自定义注解"></a>1.3、自定义注解</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    String[] hobby() <span class="keyword">default</span> {<span class="string">"dance"</span>, <span class="string">"sing"</span>};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2{</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注解中的参数一定要加<code>()</code>！</p>
<p>当注解只有一个参数时，参数名可以定义为 <code>value</code>，在调用的时候直接赋值就行。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>{</span><br><span class="line">    <span class="meta">@MyAnnotation1(age = 12)</span></span><br><span class="line">    <span class="meta">@MyAnnotation2("value")</span></span><br><span class="line">    String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2、反射"><a href="#2、反射" class="headerlink" title="2、反射"></a>2、反射</h2><p>Java 反射就是在<code>运行</code>状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性，并且能改变它的属性。</p>
<h4 id="2-1、获取-Class-类的实例"><a href="#2-1、获取-Class-类的实例" class="headerlink" title="2.1、获取 Class 类的实例"></a>2.1、获取 Class 类的实例</h4><ul>
<li><p>通过类的 class 属性获取，安全可靠，性能最高。</p>
<p><code>Class clz = Person.class;</code></p>
</li>
<li><p>调用实例的 getClass() 方法。</p>
<p><code>Class clz = person.getClass();</code></p>
</li>
<li><p>通过 Class.forName() 获取。</p>
<p><code>Class clz = Class.forName("com.yqx.Person");</code></p>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">    Class clz1 = Person.class;</span><br><span class="line">    Class clz2 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line">    Class clz3 = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">    System.out.println(clz1 == clz2);	<span class="comment">// true</span></span><br><span class="line">    System.out.println(clz2 == clz3);	<span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2、拥有-Class-对象的类型"><a href="#2-2、拥有-Class-对象的类型" class="headerlink" title="2.2、拥有 Class 对象的类型"></a>2.2、拥有 Class 对象的类型</h4><ul>
<li>class：外部类，成员，局部内部类，匿名内部类。</li>
<li>interface：接口</li>
<li>[]：数组</li>
<li>enum：枚举</li>
<li>annotation：注解 @interface</li>
<li>primitive type：基本数据类型</li>
<li>void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    Class clz1 = Object.class;</span><br><span class="line">    Class clz2 = Comparable.class;</span><br><span class="line">    Class clz3 = String[].class;</span><br><span class="line">    Class clz4 = String[][].class;</span><br><span class="line">    Class clz5 = Override.class;</span><br><span class="line">    Class clz6 = ElementType.class;</span><br><span class="line">    Class clz7 = Integer.class;</span><br><span class="line">    Class clz8 = <span class="keyword">void</span>.class;</span><br><span class="line">    Class clz9 = Class.class;</span><br><span class="line"></span><br><span class="line">    System.out.println(clz1);</span><br><span class="line">    System.out.println(clz2);</span><br><span class="line">    System.out.println(clz3);</span><br><span class="line">    System.out.println(clz4);</span><br><span class="line">    System.out.println(clz5);</span><br><span class="line">    System.out.println(clz6);</span><br><span class="line">    System.out.println(clz7);</span><br><span class="line">    System.out.println(clz8);</span><br><span class="line">    System.out.println(clz9);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">    System.out.println(a.getClass() == b.getClass());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印输出 (数组即使长度不同，其 Class 类也都是相同的)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> [<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> [[<span class="title">Ljava</span>.<span class="title">lang</span>.<span class="title">String</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Override</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">ElementType</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">void</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Class</span></span></span><br><span class="line"><span class="class"><span class="title">true</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3、类的加载"><a href="#2-3、类的加载" class="headerlink" title="2.3、类的加载"></a>2.3、类的加载</h4><p><img src="https://z3.ax1x.com/2021/10/14/5QnMng.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/14/5QnIUA.png" alt=""></p>
<h4 id="2-4、获取类的属性及方法"><a href="#2-4、获取类的属性及方法" class="headerlink" title="2.4、获取类的属性及方法"></a>2.4、获取类的属性及方法</h4><p>反射机制允许程序在运行时取得任何一个已知名称的 class 的内部信息，包括包括其modifiers (修饰符)，fields (属性)，methods (方法)等，并可于运行时改变 fields 内容或调用 methods。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">// 获取 Class 对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象(无参)</span></span><br><span class="line">        Person person1 = (Person) c1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        Person person2 = (Person) constructor.newInstance(<span class="string">"yqx"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射调用方法</span></span><br><span class="line">        Method method1 = c1.getDeclaredMethod(<span class="string">"getName"</span>);</span><br><span class="line">        Method method2 = c1.getDeclaredMethod(<span class="string">"setName"</span>, String.class);</span><br><span class="line">        String name1 = (String) method1.invoke(person1);</span><br><span class="line">        method2.invoke(person1, <span class="string">"deflory"</span>);</span><br><span class="line">        String name2 = (String) method1.invoke(person1);</span><br><span class="line">        System.out.println(<span class="string">"Before: "</span> + name1);</span><br><span class="line">        System.out.println(<span class="string">"After: "</span> + name2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射操作属性</span></span><br><span class="line">        Field field = c1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  <span class="comment">// 设置可访问的</span></span><br><span class="line">        field.set(person1, <span class="number">18</span>);</span><br><span class="line">        System.out.println(person1.getAge());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Person{name=<span class="string">'null'</span>, age=<span class="number">0</span>}</span><br><span class="line">Person{name=<span class="string">'yqx'</span>, age=<span class="number">20</span>}</span><br><span class="line">Before: <span class="keyword">null</span></span><br><span class="line">After: deflory</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-5、性能测试"><a href="#2-5、性能测试" class="headerlink" title="2.5、性能测试"></a>2.5、性能测试</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>{</span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        person.getAge();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"普通方法用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射(检测开启)</span></span><br><span class="line">    Method method = Person.class.getDeclaredMethod(<span class="string">"getAge"</span>);</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        method.invoke(person);</span><br><span class="line">    }</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"反射(检测开启)用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射(检测关闭)</span></span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1e9</span>;i++){</span><br><span class="line">        method.invoke(person);</span><br><span class="line">    }</span><br><span class="line">    end = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"反射(检测关闭)用时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">普通方法用时：1379ms</span><br><span class="line">反射(检测开启)用时：1863ms</span><br><span class="line">反射(检测关闭)用时：1591ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-6、反射操作泛型"><a href="#2-6、反射操作泛型" class="headerlink" title="2.6、反射操作泛型"></a>2.6、反射操作泛型</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>{</span><br><span class="line">    Method test01 = Person.class.getDeclaredMethod(<span class="string">"test01"</span>, Map.class, List.class);</span><br><span class="line">    Method test02 = Person.class.getDeclaredMethod(<span class="string">"test02"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"test01(参数泛型)"</span>);</span><br><span class="line">    Type[] genericParameterTypes = test01.getGenericParameterTypes();</span><br><span class="line">    <span class="keyword">for</span>(Type genericParameterType : genericParameterTypes){</span><br><span class="line">        System.out.println(genericParameterType);</span><br><span class="line">        <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType){</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span>(Type actualTypeArgument : actualTypeArguments){</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"\ntest02(返回值泛型)"</span>);</span><br><span class="line">    Type getGenericReturnType = test02.getGenericReturnType();</span><br><span class="line">    System.out.println(getGenericReturnType);</span><br><span class="line">    <span class="keyword">if</span> (getGenericReturnType <span class="keyword">instanceof</span> ParameterizedType){</span><br><span class="line">        Type[] actualTypeArguments = ((ParameterizedType) getGenericReturnType).getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span>(Type actualTypeArgument : actualTypeArguments){</span><br><span class="line">            System.out.println(actualTypeArgument);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">test01(参数泛型)</span><br><span class="line">java.util.Map&lt;java.lang.String, java.lang.Integer&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Character</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Character</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">test02</span>(返回值泛型)</span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">util</span>.<span class="title">Map</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>, <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> </span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
  </entry>
  <entry>
    <title>神经网络权重的初始化</title>
    <url>/2021/10/16/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%9D%83%E9%87%8D%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<p>当我们在训练一个神经网络的时候，参数的随机初始化是非常重要的，对于逻辑回归来说，可以将权重初始化为0。而对于神经网络而言，这样做将会导致梯度下降算法无法起作用。</p>
<h2 id="1-为什么使用于逻辑回归？"><a href="#1-为什么使用于逻辑回归？" class="headerlink" title="1. 为什么使用于逻辑回归？"></a>1. 为什么使用于逻辑回归？</h2><p>如下图所示，其中$X_1$ 和 $X_2$ 是特征值。</p>
<p><img src="https://z3.ax1x.com/2021/10/16/5JSZ2F.png" alt=""></p>
<p><strong>前向传播</strong>：</p>
<p>$a_1 = sigmoid(X_1 <em> W_1 + X_2 </em> W_2 + b)$</p>
<p>$loss = -ylog(a_1) - (1 - y)log(1 - a_1)$</p>
<p><strong>反向传播</strong>：</p>
<p>$da_1 = -\frac{y}{a_1} + \frac{1 - y}{1 - a_1}$</p>
<p>$dw_1 = da_1 <em> a’_1 </em> X_1 = (a_1 - y) * X_1$</p>
<p>$dw_2 = da_1 <em> a’_1 </em> X_2 = (a_1 - y) * X_2$</p>
<p>$db = da_1 <em> a’_1 </em> 1 = a_1 - y$</p>
<p><strong>参数更新</strong>：</p>
<p>$W_1 = w_1 - η * dw_1$</p>
<p>$W_2 = w_2 - η * dw_2$</p>
<p>$b = b - η * db$</p>
<p>可以看到， $W_1$ 和 $W_2$  并不影响 $dw_1$ 和 $dw_2$ 的值，而是根据 $X_1$ 和 $X_2$ 的不同而改变，且不为0，模型的权重能够得到更新。因此即使我们将 $W_1$ 和 $W_2$ 初始化为0也无所谓。参数 同理。</p>
<h2 id="2-为什么不适用于神经网络"><a href="#2-为什么不适用于神经网络" class="headerlink" title="2. 为什么不适用于神经网络?"></a>2. 为什么不适用于神经网络?</h2><p>神经网络结构图如下。</p>
<p><img src="https://z3.ax1x.com/2021/10/16/5J9qER.png" alt=""></p>
<p><strong>前向传播</strong>：</p>
<p>$a_1 = f(X_1 <em> W_{11} + X_2 </em> W_{21} + b_1)$</p>
<p>$a_2 = f(X_1 <em> W_{12} + X_2 </em> W_{22} + b_2)$</p>
<p>$a_3 = sigmoid(a_1 <em> W_{13} + a_2 </em> W_{23} + b_3)$</p>
<p>$loss = -ylog(a_3) - (1 - y)log(1 - a_3)$</p>
<p><strong>反向传播</strong>：</p>
<p>$da_3 = -\frac{y}{a_3} + \frac{1 - y}{1 - a_3}$</p>
<p>$dw_{13} = da_3 <em> a’_3 </em> a_1 = (a_3 - y) * a_1$</p>
<p>$dw_{23} = da_3 <em> a’_3 </em> a_2 = (a_3 - y) * a_2$</p>
<p>$db_{3} = da_3 <em> a’_3 </em> 1 = a_3 - y$</p>
<p>$da_1 = da_3 <em> a’_3 </em> W_{13} = (a_3 - y) * W_{13}$</p>
<p>$da_2 = da_3 <em> a’_3 </em> W_{23} = (a_3 - y) * W_{23}$</p>
<p>$dw_{12} = da_2 <em> a’_2 </em> X_1$</p>
<p>$dw_{22} = da_2 <em> a’_2 </em> X_2$</p>
<p>$db_{2} = da_2 * a’_2$</p>
<p>$dw_{11} = da_1 <em> a’_1 </em> X_1$</p>
<p>$dw_{21} = da_1 <em> a’_1 </em> X_2$</p>
<p>$db_{1} = da_1 * a’_1$</p>
<p><strong>参数更新</strong>：</p>
<p>$W_1 = w_1 - η * dw_1$</p>
<p>$W_2 = w_2 - η * dw_2$</p>
<p>$b = b - η * db$</p>
<p>根据上述的详细公式，我们分析一下3种情况：</p>
<ul>
<li>模型所有权重 W 初始化为0，所有偏置 b 初始化为0</li>
<li>模型所有权重 W 初始化为0，所有偏置 b 随机初始化</li>
<li>模型所有的权重 W 随机初始化，所有偏置 b 初始化为0</li>
</ul>
<h4 id="2-1-模型所有权重-W-初始化为0，所有偏置-b-初始化为0"><a href="#2-1-模型所有权重-W-初始化为0，所有偏置-b-初始化为0" class="headerlink" title="2.1 模型所有权重 W 初始化为0，所有偏置 b 初始化为0"></a>2.1 模型所有权重 W 初始化为0，所有偏置 b 初始化为0</h4><p>在此情况下， 第一个 batch 的前向传播过程时，$a_1 = f(0), a_2 = f(0), a_3 = sigmoid(0)$。在反向传播进行参数更新的时候，会发现 $a_1 = a_2 = f(0) \ \  =&gt;\ \  dw_{13} = dw_{23}$，$W_{13} = W_{23} = 0 \ \  =&gt; \ \ da_1 = da_2 = 0$。也就是说，在第一个 batch 中，只有 $W_{13}$ 和 ${W_{23}}$ 进行了更新并且<code>相等</code>，而其它参数均没有更新。</p>
<p>而当第二个 batch 传给神经网络时，$W_{13} = W_{23} \neq 0 \ \  =&gt;\ \  da_1 = da_2 \ \ =&gt; dw_{21} = dw_{22},\ dw_{11} = dw_{12}$。</p>
<p>以此类推，无论训练多少次，无论隐藏层神经元有多少个，由于权重的<code>对称性</code>，隐藏层神经单元的输出始终不变(权重相等)。我们希望不同的神经元能够有不同的输出，这样的神经网络才有意义。</p>
<p><strong>总结：将权重 W 初始化为0，会导致同一隐藏层的所有神经元输出都一致。对于后期不同的 batch，每一隐藏层的权重都能得到更新，但是每一隐藏层神经元的权重都是一致的，多个隐藏神经元的作用就如同1个神经元。</strong></p>
<h4 id="2-2-模型所有权重-W-初始化为0，所有偏置-b-随机初始化"><a href="#2-2-模型所有权重-W-初始化为0，所有偏置-b-随机初始化" class="headerlink" title="2.2 模型所有权重 W 初始化为0，所有偏置 b 随机初始化"></a>2.2 模型所有权重 W 初始化为0，所有偏置 b 随机初始化</h4><p>在此情况下，第一个 batch 的前向传播过程时，$a_1 = f(b_1), a_2 = f(b_2), a_3 = sigmoid(b_3)$，在反向传播过程时，$da_1 = da_2 = 0 \ \ =&gt; \ \ dw_{11} = dw_{12} = dw_{21} = dw_{22} = 0$，因此第一个 batch 中只有 $W_{13}, W_{23}$ 和 $B_{3}$ 能得到更新。</p>
<p>同理，在第二个 batch 反向传播的过程中，由于 $W_{13}$ 和 $W_{23}$ 不为0，因此所有的参数都能得到更新。<strong>这种方式存在更新较慢、梯度消失、梯度爆炸等问题，在实践中，通常不会选择该方法。</strong></p>
<h4 id="2-3-模型所有的权重-W-随机初始化，所有偏置-b-初始化为0"><a href="#2-3-模型所有的权重-W-随机初始化，所有偏置-b-初始化为0" class="headerlink" title="2.3 模型所有的权重 W 随机初始化，所有偏置 b 初始化为0"></a>2.3 模型所有的权重 W 随机初始化，所有偏置 b 初始化为0</h4><p>在此情况下，第一个 batch 的前向传播过程时，由于 $W_{13}$ 和 $W_{23}$ 不为0，因此所有的参数可以直接得到更新。</p>
<h2 id="结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！"><a href="#结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！" class="headerlink" title="结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！"></a><strong>结论：在训练神经网络的时候，权重初始化要谨慎，不能初始化为0！</strong></h2>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>线性回归</title>
    <url>/2021/09/13/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>用于解决回归问题，做法就是找一条最能拟合测试数据的直线，求该拟合直线的斜率和截距就是最值问题，可以通过梯度下降法解决。预测数据也比较简单，将数据代入直线中求出结果即可。</p>
<p><img src="https://z3.ax1x.com/2021/10/15/51Iy7R.png" alt=""></p>
<p><br></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在举例之前，先介绍几种求误差的方法。</p>
<ol>
<li><p>MSE (Mean Square Error) 均方误差</p>
<p>$\frac{1}{m}\sum\limits_{n=1}^{m} (y - y_n)^2$</p>
</li>
<li><p>RMSE (Root Mean Square Error) 均方根误差</p>
<p>$\sqrt{\frac{1}{m}\sum\limits_{n=1}^m (y - y_n)^2}$</p>
</li>
<li><p>MAE (Mean Absolute Error) 平均绝对误差</p>
<p>$\frac{1}{m}\sum\limits_{n=1}^{m} |y - y_n|$</p>
<p>上述三种中，均方误差和均方根误差只是差了个根号，本质是一样的，都是求预测值与真实值的平方差。</p>
<p>因为是平方差，会对极度偏颇的数据特别敏感，因此会着重去拟合这部分数据。</p>
<p>而绝对值对所有的数据都是一样的，没有侧重点。</p>
</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">0.2</span>).reshape([<span class="number">100</span>,<span class="number">1</span>])</span><br><span class="line">y = <span class="number">3.5</span> * x + np.random.normal(<span class="number">0</span>, <span class="number">20</span>, <span class="number">100</span>).reshape([<span class="number">100</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">55</span>, <span class="number">55</span>], color = <span class="string">"red"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4PSGuR.png" alt=""></p>
<p>如上图所示，蓝色的离散点就是我们的测试数据，红色是要求的拟合曲线，方程为$y = ax + b$。</p>
<p>我们需要让这条直线的预测值和真实值的误差尽可能小，因此成本函数为</p>
<p>$cost = \frac{1}{m}\sum\limits_{n=1}^{m} (ax_n + b - y_n)^2$     （MSE）</p>
<p>此处$x_n$和$y_n$都是已知的数据，a和b才是我们要求的未知数。</p>
<p>该成本函数的偏导函数为</p>
<p>$\frac{dcost}{da} = \frac{2}{m}\sum\limits_{n=1}^{m} x_n(ax_n + b - y_n)$</p>
<p>$\frac{dcost}{db} = \frac{2}{m}\sum\limits_{n=1}^{m} (ax_n + b - y_n)$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((a * x + b - y) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ_a</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>(x * (a * x + b - y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ_b</span>(<span class="params">a, b, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>(a * x + b - y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">a, b, eta, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        last_a = a</span><br><span class="line">        last_b = b</span><br><span class="line">        a = a - eta * DJ_a(a, b, x, y)</span><br><span class="line">        b = b - eta * DJ_b(a, b, x, y)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(last_a, last_b, x, y) - J(a, b, x, y)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> a, b</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">eta = <span class="number">0.02</span></span><br><span class="line">epsilon = <span class="number">1e-6</span></span><br><span class="line"></span><br><span class="line">a, b = gradient_descent(a, b, eta, epsilon)</span><br><span class="line"></span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">10</span> * a + b, <span class="number">10</span> * a + b], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4PfaGT.png" alt=""></p>
<p>效果也是挺不错的，不过这是一元的情况，可以写两个DJ_a和DJ_b，但如果是百元呢？</p>
<p>下面将会实现一种通用的梯度下降法。</p>
<p><br></p>
<p>先更改一下我们的成本函数，其中θ是系数矩阵，对于一元函数，它的shape就是(2, )，x需要再添一列（数值为1），这样x <em> a + 1 </em> b就正好是我们的直线方程预测值。</p>
<p>$cost = \frac{1}{m}\sum (x.dot(θ) - y)^2$     （MSE）</p>
<p>导函数</p>
<p>$\frac{dcost}{dθ} = \frac{2}{m} x.t.dot((x.dot(θ) - y))$</p>
<p>推导过程</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iWVJK.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iRJKJ.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">theta, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((x.dot(theta) - y) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">theta, x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> / <span class="built_in">len</span>(x) * (x.T.dot(x.dot(theta) - y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span>(<span class="params">theta, x, y, eta, n_iters = <span class="number">2e5</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">    i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">        last_theta = theta</span><br><span class="line">        theta = theta - eta * DJ(theta, x, y)</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(last_theta, x, y) - J(theta, x, y)) &lt; epsilon:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i_iter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<p>然后我们来拟合刚刚随机的数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = np.hstack([x, np.ones([<span class="number">100</span>, <span class="number">1</span>])])</span><br><span class="line"></span><br><span class="line">theta = np.zeros([<span class="number">2</span>])</span><br><span class="line">eta = <span class="number">0.02</span></span><br><span class="line">y = y.reshape([<span class="number">100</span>])</span><br><span class="line">theta = gradient_descent(theta, x, y, eta)</span><br><span class="line"></span><br><span class="line">plt.plot([-<span class="number">10</span>, <span class="number">10</span>],[-<span class="number">10</span> * theta[<span class="number">0</span>] + theta[<span class="number">1</span>], <span class="number">10</span> * theta[<span class="number">0</span>] + theta[<span class="number">1</span>]], color = <span class="string">"red"</span>)</span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>],y.reshape([<span class="number">100</span>, <span class="number">1</span>]))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">theta 		<span class="comment"># array([3.4686148, -1.06100372])</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4ifDnH.png" alt=""></p>
<p>显然，这条直线还是能较好拟合这个测试数据的。</p>
<p>theta[0] = 3.4686148 ≈ 3.5，也和我们预设的基本一致。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.X = <span class="literal">None</span></span><br><span class="line">        self.y = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        self.X = X</span><br><span class="line">        self.y = y</span><br><span class="line">        self.<span class="built_in">len</span> = <span class="built_in">len</span>(X)</span><br><span class="line">        self.X_b = np.hstack([self.X, np.ones([self.<span class="built_in">len</span>, <span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">self, theta</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>((self.y - self.X_b.dot(theta)) ** <span class="number">2</span>) / self.<span class="built_in">len</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">self, theta</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.X_b.T.dot(self.X_b.dot(theta) - y) * <span class="number">2</span> / self.<span class="built_in">len</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">self, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e5</span>, epsilon = <span class="number">1e-8</span></span>):</span></span><br><span class="line">        <span class="keyword">assert</span> self.X_b <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, \</span><br><span class="line">        <span class="string">"must fit before transform"</span></span><br><span class="line">        </span><br><span class="line">        theta = np.zeros(self.X.shape[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * self.DJ(theta)</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(self.J(theta) - self.J(last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.intercept = self.theta[-<span class="number">1</span>]</span><br><span class="line">        self.coefficient = self.theta[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> theta</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> X.dot(self.coefficient) + self.intercept</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = X.dot(self.coefficient) + self.intercept</span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>((y_pred - y) ** <span class="number">2</span>) / <span class="built_in">len</span>(X)</span><br></pre></td></tr></tbody></table></figure>
<p>需要注意的是，第28行中<code>theta = theta - eta * self.DJ(theta)</code>，不能写成<code>theta -= eta * self.DJ(theta)</code>，这是因为现在last_theta和theta都指向同一块内存单元，-=是原地操作，在更改了theta的同时，last_theta也被更改了，而=则是重新开辟一块新的内存空间，然后再让theta指向它。</p>
<p><br></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">boston=datasets.load_boston()</span><br><span class="line">X=boston.data</span><br><span class="line">y=boston.target</span><br><span class="line"></span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(X, y)</span><br><span class="line">lr.transform(eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"""lr.coefficient</span></span><br><span class="line"><span class="string">array([-0.09218218,  0.06825598, -0.00529991,  0.46137796,  0.17983213,</span></span><br><span class="line"><span class="string">        4.30941577,  0.02543425, -0.70440603,  0.17038895, -0.00977886,</span></span><br><span class="line"><span class="string">       -0.09173025,  0.01804173, -0.55937148])</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">   lr.intercept 	</span></span><br><span class="line"><span class="string">   0.4361364266724813</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>
<p>因为数据是13维的，没有办法可视化，我们只能使用MSE指标来衡量，其中lr.score(X, y) = 26.11494。</p>
<p>为了能看得清楚点，我们只使用其中一维来进行预测。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = X[:, <span class="number">5</span>]</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这里上面有一排数值都为50，这是因为在做调查的时候，最高一个档就是50（大于50W都只能填50W），因此这部分数据我们当做无效数据，直接丢弃掉。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iztpD.png" alt=""></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = X[y &lt; <span class="number">50</span>]</span><br><span class="line">y = y[y &lt; <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>做一下筛选，只选y&lt;50的数据就行了。</p>
<p><img src="https://z3.ax1x.com/2021/09/13/4iz00I.png" alt=""></p>
<p>然后开始整体，进行预测。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">X = X.reshape([-<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">lr.fit(X, y)</span><br><span class="line">theta = lr.transform(eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e6</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(X, lr.predict(X), color=<span class="string">"red"</span>)</span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/13/4izc9S.png" alt=""></p>
<p>lr.score(X, y) = 42.28978618974813</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>过拟合和欠拟合</title>
    <url>/2021/09/28/%E8%BF%87%E6%8B%9F%E5%90%88%E5%92%8C%E6%AC%A0%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>继之前的<a href="/2021/09/27/多项式回归/">多项式回归</a>，如果 <code>degree</code> 设置过大或者过小会出现什么样的问题呢？</p>
<p>在此之前，先来说明一下 <a href="/2021/09/14/数据归一化/">归一化</a> 的必要性。多项式回归采用了特征组合的方式，当 <code>degree</code> 为100时，最高次就是100次，而最低次只是常数级，各个维度数值之间的跨度非常大，这就导致 <code>eta</code> 必须设置得非常小，否则稍大一点，就会无法拟合，变成 <code>nan</code> 。</p>
<p>当 degree 为10时， eta就必须设置成$10^{-19}$，很不利于我们训练模型，所以在数据与距离阶段除了要多项式化还得归一化！</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4feNrT.png" alt=""></p>
<p>根据上述要求，改进了一下多项式回归的类。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolynomialRegression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, degree</span>):</span></span><br><span class="line">        self.degree = degree</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y, eta = <span class="number">0.01</span>, n_iters = <span class="number">1e4</span>, epsilon = <span class="number">1e-6</span></span>):</span></span><br><span class="line">        self.X = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        self.X = self.standardization(self.X)</span><br><span class="line">        </span><br><span class="line">        initial_theta = np.zeros([self.X.shape[<span class="number">1</span>]])</span><br><span class="line">        theta = self._gradient_descent(self.X, y, initial_theta, eta, n_iters, epsilon)</span><br><span class="line">        self.theta = theta</span><br><span class="line">        self.coefficient = theta[<span class="number">1</span>:]</span><br><span class="line">        self.intercept = theta[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    <span class="comment"># 第一列全为1方差为0要单独处理，改成第一列全为0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">standardization</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.hstack([np.zeros([<span class="built_in">len</span>(X), <span class="number">1</span>]), (X[:, <span class="number">1</span>:] - np.mean(X[:, <span class="number">1</span>:], axis = <span class="number">0</span>)) / np.std(X[:, <span class="number">1</span>:], axis = <span class="number">0</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多项式化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getPolynomialFeatures</span>(<span class="params">self, X, start, col_val, degree</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">X, result, start, col_val, degree</span>):</span></span><br><span class="line">            result.append(col_val)</span><br><span class="line">            <span class="keyword">if</span>(degree == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, X.shape[<span class="number">1</span>]):</span><br><span class="line">                dfs(X, result, start, col_val * X[:, i].reshape([-<span class="number">1</span>, <span class="number">1</span>]), degree - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        result = []</span><br><span class="line">        dfs(X, result, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), degree)</span><br><span class="line">        <span class="keyword">return</span> np.squeeze(np.array(result), -<span class="number">1</span>).T</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测也要多项式化和归一化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X_b = self._getPolynomialFeatures(X, <span class="number">0</span>, np.ones([<span class="built_in">len</span>(X), <span class="number">1</span>]), self.degree)</span><br><span class="line">        X_b = self.standardization(X_b)</span><br><span class="line">        y_pred = X_b.dot(self.theta)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># MSE</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        y_pred = self.predict(X)</span><br><span class="line">        <span class="keyword">return</span> np.mean((y - y_pred) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gradient_descent</span>(<span class="params">self, X_b, y, theta, eta, n_iters, epsilon</span>):</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">J</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> np.mean((X_b.dot(theta) - y) ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">DJ</span>(<span class="params">X_b, y, theta</span>):</span></span><br><span class="line">            <span class="keyword">return</span> X_b.T.dot((X_b.dot(theta) - y)) * <span class="number">2</span> / <span class="built_in">len</span>(y);</span><br><span class="line">        </span><br><span class="line">        i_iter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> i_iter &lt; n_iters:</span><br><span class="line">            gradient = DJ(X_b, y, theta)</span><br><span class="line">            last_theta = theta</span><br><span class="line">            theta = theta - eta * gradient</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(J(X_b, y, theta) - J(X_b, y, last_theta)) &lt; epsilon:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theta</span><br></pre></td></tr></tbody></table></figure>
<p>当然直接使用 sklearn 中的 <code>Pipeline</code> 可以更加简便的实现这一切。</p>
<p><code>Pipeline</code> 具体运作机制就是逐行运行，上一行的输出就是下一行的输入，因此我们先进行多项式化，再归一化，最后放入线性回归中训练模型。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialRegression</span>(<span class="params">X,y,degree</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"lin_reg"</span>,LinearRegression())</span><br><span class="line">    ])</span><br><span class="line">    pipeline.fit(X,y)</span><br><span class="line">    <span class="keyword">return</span> pipeline.predict(X)</span><br></pre></td></tr></tbody></table></figure>
<p><br></p>
<h2 id="数据拟合"><a href="#数据拟合" class="headerlink" title="数据拟合"></a>数据拟合</h2><p>先写一个绘制拟合曲线的函数便于我们观测结果。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_matching_curve</span>(<span class="params">X, y, degree, eta = <span class="number">1e-6</span>, n_iters = <span class="number">1e5</span></span>):</span></span><br><span class="line">    poly_reg = PolynomialRegression(degree)</span><br><span class="line">    poly_reg.fit(X, y, eta, n_iters)</span><br><span class="line">    theta = poly_reg.theta</span><br><span class="line">    pred_y = poly_reg.X.dot(theta)</span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], y)</span><br><span class="line">    plt.plot(X[:, <span class="number">0</span>], pred_y, color = <span class="string">"r"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> poly_reg</span><br></pre></td></tr></tbody></table></figure>
<p>当 degree 为0时，也就是最高次为0次，拟合曲线成一条直线，这就是欠拟合。</p>
<p>毕竟函数只有一个常数嘛，合理。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">plot_matching_curve(x.reshape([-<span class="number">1</span>, <span class="number">1</span>]), y, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://z3.ax1x.com/2021/09/28/4fEsRP.png" alt=""></p>
<p>再来看看 degree 分别为1，2的情况，是不是越来越接近我们的拟合曲线了。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fVdyT.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fV50e.png" alt=""></p>
<p>当 degree 为3时，曲线终于拟合了我们的数据。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4fZQ91.png" alt=""></p>
<p>那我们再看看 degree 为10，50，100，200的情况。</p>
<p>很容易可以观察出，曲线变得越来越复杂，也越来越能拟合我们的训练数据，这是因为随着 degree 的增大，参数数量的增长使得我们的模型可以将训练的数据给<code>记住</code>，但这真的是我们想要的吗？</p>
<p>不，我们想要的是<code>泛化</code>能力，是在测试数据乃至之后模型上线后的真实数据上也能有非常好的预测能力。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f1qaV.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f39q1.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f3ia6.png" alt=""></p>
<p>之前也说过了，多项式化是阶乘式地增长，一旦 <code>degree</code> 过大，直接就会导致栈溢出。</p>
<p><img src="https://z3.ax1x.com/2021/09/28/4f3nsA.png" alt=""></p>
<p><br></p>
<h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><p>通过观察学习曲线，也可以帮助我们判断出模型是否有过拟合或欠拟合的情况。它是绘制模型在训练集和测试集上的性能函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_poly_reg</span>(<span class="params">degree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>, PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std"</span>, StandardScaler()),</span><br><span class="line">        (<span class="string">"reg"</span>, LinearRegression())</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span>(<span class="params">X, y, degree</span>):</span></span><br><span class="line">    train_mse = []</span><br><span class="line">    test_mse = []</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y)</span><br><span class="line">    poly_reg = get_poly_reg(degree)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(X) + <span class="number">1</span>):</span><br><span class="line">        poly_reg.fit(X_train[:i], y_train[:i])</span><br><span class="line">        train_pred = poly_reg.predict(X_train[:i])</span><br><span class="line">        test_pred = poly_reg.predict(X_test)</span><br><span class="line">        train_mse.append(np.mean(np.square(train_pred - y_train[:i])))</span><br><span class="line">        test_mse.append(np.mean(np.square(test_pred - y_test)))</span><br><span class="line">        </span><br><span class="line">    plt.plot(np.arange(<span class="number">2</span>, <span class="built_in">len</span>(X)+<span class="number">1</span>), train_mse, label=<span class="string">"train"</span>)</span><br><span class="line">    plt.plot(np.arange(<span class="number">2</span>, <span class="built_in">len</span>(X)+<span class="number">1</span>), test_mse, label=<span class="string">"test"</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.axis([<span class="number">0</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">5</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>这次我们把目标函数换成二次函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">X = np.random.uniform(-<span class="number">3</span>,<span class="number">3</span>,size=<span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y = <span class="number">0.5</span> * X**<span class="number">2</span> + X + <span class="number">4</span> + np.random.normal(<span class="number">0</span>,<span class="number">1</span>,size = <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>degree = 1</p>
<p>随着样本数量的增加 test 的误差在减小，train 的误差在增加，而当样本到了一定程度后，两者也没有保持在一个较小的程度上。这时说明模型欠拟合。</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5u1WSP.png" alt=""></p>
<p>degree = 2</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5uQx3V.png" alt=""></p>
<p>随着样本数量的增加 test 的误差在减小，train 的误差在增加，而当样本到了一定程度后，两者基本<code>持平</code>，保持在一个较小的程度上。这时模型已经拟合。</p>
<p>degree = 10</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5ul2KU.png" alt=""></p>
<p>随着样本的增加 test 的误差在减小，train 的误差在增加，但当样本到了一定程度后，在 train 上的误差要比在 test 上的误差小得多，这时就要注意是不是过拟合了。</p>
<p>degree = 100</p>
<p><img src="https://z3.ax1x.com/2021/10/13/5ulxIA.png" alt=""></p>
<p>此时 test 上的误差已经飙到天上去了，妥妥的过拟合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在训练数据集上表现良好，却在测试数据集上表现差劲的就是<code>过拟合</code>，这时候要降低参数数量。</p>
<p>而在训练数据集上表现就不尽人意的有可能是<code>欠拟合</code>（也有可能是模型压根不对等问题），这时候可以试试增大模型，增加参数数量。</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>降低过拟合</title>
    <url>/2021/10/17/%E9%99%8D%E4%BD%8E%E8%BF%87%E6%8B%9F%E5%90%88/</url>
    <content><![CDATA[<p>在训练模型的过程中，过拟合几乎是不可避免的。因此可以这么说，深度学习就是训练一个庞大的模型，在此基础上我们来降低过拟合的程度。相较之下，如果模型欠拟合了，貌似除了扩大模型就没有任何方法了。</p>
<p>下面介绍几个常用的降低过拟合的方法。</p>
<h2 id="一、正则化"><a href="#一、正则化" class="headerlink" title="一、正则化"></a>一、正则化</h2><h4 id="1-什么是正则化？"><a href="#1-什么是正则化？" class="headerlink" title="1. 什么是正则化？"></a>1. 什么是正则化？</h4><p>正则化的思想，即通过<code>限制</code>参数值的选择范围来控制模型容量。而正则化又分为岭回归（权重衰退）、LASSO 回归和弹性网络等。下面我着重说明的是岭回归。</p>
<p>首先，先来看一张极度过拟合的图像。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tSi5t.png" alt=""></p>
<p>这是上述图像的部分权重，无一例外，每个 $W_i$ 都极其的大，这也导致了图像十分的<code>陡峭</code>。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">array([-<span class="number">4.09493627e+11</span>,  <span class="number">5.76349998e+12</span>,  <span class="number">1.71369179e+11</span>, -<span class="number">9.99031499e+12</span>,</span><br><span class="line">        <span class="number">9.23500127e+11</span>,  <span class="number">9.26094018e+12</span>, -<span class="number">1.94635409e+12</span>, -<span class="number">5.40895631e+10</span>,</span><br><span class="line">        <span class="number">7.94601628e+11</span>, -<span class="number">7.85418293e+12</span>,  <span class="number">1.63904594e+12</span>,  <span class="number">1.67984971e+12</span>,</span><br><span class="line">       -<span class="number">9.87156668e+11</span>,  <span class="number">6.88721582e+12</span>, -<span class="number">1.64914180e+12</span>,  <span class="number">3.50775793e+11</span>,</span><br><span class="line">        <span class="number">2.60751888e+11</span>, -<span class="number">5.87372086e+12</span>,  <span class="number">1.66748622e+12</span>, -<span class="number">3.77434047e+12</span>,</span><br><span class="line">        <span class="number">1.00605169e+12</span>,  <span class="number">2.34190394e+12</span>, -<span class="number">8.57867266e+11</span>,  <span class="number">5.39077331e+12</span>,</span><br><span class="line">       -<span class="number">1.60621032e+12</span>,  <span class="number">2.95930952e+12</span>, -<span class="number">9.52432067e+11</span>, -<span class="number">1.74889800e+12</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>因此很自然而然地就能想到，那我限制 $W_i$ 的选择范围就行了嘛。从模型的角度来说，参数数量不变，但参数的选择范围小了，那模型自然也变小了。</p>
<p>于是就有了使用均方范数作为<code>硬性</code>限制，小的 θ 意味着更强的正则项。</p>
<p>需要注意的是，偏置 <strong>b</strong> 并没有加入到正则化中来，毕竟我们的目标是让曲线更加的<code>平缓</code>，跟偏置 <strong>b</strong> 没有什么关系。</p>
<p>$min l(w,b) \quad subject\ to \quad ||W||^2 \le θ,\quad\quad ||W||^2 = \sum W^2$</p>
<p>但硬性限制优化求导比较麻烦，结果也会比较<code>硬</code>，一般使用均方范数作为<code>柔性</code>限制。</p>
<p>$loss = l(w, b) + \frac{λ}{2}||W||^2$</p>
<p>其中超参数 λ 控制了正则项的重要程度</p>
<ul>
<li>λ = 0，即无正则化，和普通的损失函数没有区别。</li>
<li>λ → $\infty$，此时 W → <strong>0</strong></li>
</ul>
<h4 id="2-如何影响损失函数？"><a href="#2-如何影响损失函数？" class="headerlink" title="2. 如何影响损失函数？"></a>2. 如何影响损失函数？</h4><p>可以看到，原先的极值点 $\widetilde{W}^*$ 在绿色椭圆的圆心，但在加入正则化项之后，极值点在两者之间做了一个权衡，取在了切点。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tFpqS.png" alt=""></p>
<h4 id="3-参数更新法则"><a href="#3-参数更新法则" class="headerlink" title="3. 参数更新法则"></a>3. 参数更新法则</h4><ul>
<li><p>计算梯度</p>
<p>$\frac{\partial}{\partial W}(l(W, b) + \frac{λ}{2}||W||^2) = \frac{\partial l(W, b)}{\partial W} + λW$</p>
</li>
<li><p>更新参数</p>
<p>$W’ = W - η(\frac{\partial l(W, b)}{\partial W} + λW) = (1 - ηλ)W - η\frac{\partial l(W, b)}{\partial W}$</p>
</li>
</ul>
<p>通常 ηλ &lt; 1，因此每次在参数更新时，都会对 W 进行<code>缩小</code>，也就是权重衰退这个名字的由来。</p>
<h4 id="4-岭回归"><a href="#4-岭回归" class="headerlink" title="4. 岭回归"></a>4. 岭回归</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RidgeRegression</span>(<span class="params">degree,alpha</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"ridge_reg"</span>,Ridge(alpha=alpha))</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure>
<p>alpha = 0，即普通多项式回归。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UMrqJ.png" alt=""></p>
<p>alpha = 1e-4，曲线一下子就柔和了。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQeL4.png" alt=""></p>
<p>alpha = 100，有点像二次曲线了。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQJyD.png" alt=""></p>
<p>alpha → $\infty$，为了控制损失函数，只能将权重设为0。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UQhYq.png" alt=""></p>
<h4 id="5-Tensorflow-岭回归实现"><a href="#5-Tensorflow-岭回归实现" class="headerlink" title="5. Tensorflow 岭回归实现"></a>5. Tensorflow 岭回归实现</h4><p>为了能够过拟合，只设置了20个训练样本，每个样本有 200 个特征。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">n_train = <span class="number">20</span></span><br><span class="line">n_test = <span class="number">100</span></span><br><span class="line">num_inputs = <span class="number">200</span></span><br><span class="line">batch_size = <span class="number">5</span></span><br><span class="line">num_outputs = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">true_w, true_b = tf.ones([num_inputs, <span class="number">1</span>]) * <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">train_data = d2l.synthetic_data(true_w, true_b, n_train)</span><br><span class="line">test_data = d2l.synthetic_data(true_w, true_b, n_test)</span><br><span class="line">train_iter = d2l.load_array(train_data, batch_size)</span><br><span class="line">test_iter = d2l.load_array(test_data, batch_size, is_train=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>参数初始化，线性模型没那么多讲究，初始化为0也行。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_params</span>(<span class="params">num_inputs, num_outputs</span>):</span></span><br><span class="line">    W = tf.Variable(tf.random.normal(mean=<span class="number">1</span>, shape=(num_inputs, <span class="number">1</span>)))</span><br><span class="line">    b = tf.Variable(tf.zeros(num_outputs))</span><br><span class="line">    <span class="keyword">return</span> [W, b]</span><br><span class="line"></span><br><span class="line">W, b = init_params(num_inputs, num_outputs)</span><br></pre></td></tr></tbody></table></figure>
<p>网络模型</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 线性模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span>(<span class="params">X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> X @ W + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># L2正则化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">l2_penalty</span>(<span class="params">W</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_sum(tf.<span class="built_in">pow</span>(W, <span class="number">2</span>)) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MSE损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>(<span class="params">y, y_hat</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(tf.square(y - y_hat))</span><br></pre></td></tr></tbody></table></figure>
<p>训练函数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">lambd, epochs = <span class="number">100</span>, lr = <span class="number">0.003</span></span>):</span></span><br><span class="line">    animator = d2l.Animator(xlabel=<span class="string">'epochs'</span>, ylabel=<span class="string">'loss'</span>, yscale=<span class="string">'log'</span>,</span><br><span class="line">                            xlim=[<span class="number">5</span>, epochs], legend=[<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                <span class="comment"># 最终损失函数添加正则化项</span></span><br><span class="line">                l = loss(y, net(X)) + lambd * l2_penalty(W)</span><br><span class="line">            grads = tape.gradient(l, [W, b])</span><br><span class="line">            <span class="keyword">for</span> param, grad <span class="keyword">in</span> <span class="built_in">zip</span>([W, b], grads):</span><br><span class="line">                param.assign_sub(grad * lr)</span><br><span class="line">        <span class="keyword">if</span> (epoch + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            animator.add(epoch +<span class="number">1</span>, (d2l.evaluate_loss(net, train_iter, loss),</span><br><span class="line">                                   (d2l.evaluate_loss(net, test_iter, loss))))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"W的L2范数是"</span>, tf.norm(W).numpy())</span><br></pre></td></tr></tbody></table></figure>
<p>train(lambd = 0)</p>
<p>模型没有泛化，光是训练误差减小，典型的过拟合。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5t4RR1.png" alt=""></p>
<p>train(lambd = 3)</p>
<p>训练和测试误差都在同步降低，且两者差距较上述过拟合之下减小了不少。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIZ9A.png" alt=""></p>
<p>train(lambd = 20)</p>
<p>同上，效果更好了。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIKnf.png" alt=""></p>
<p>train(lambd = 100)</p>
<p>虽然图形十分曲折，但总体趋势是在下降且损失更低了。</p>
<p><img src="https://z3.ax1x.com/2021/10/17/5tIJ9s.png" alt=""></p>
<h4 id="6-LASSO-回归"><a href="#6-LASSO-回归" class="headerlink" title="6. LASSO 回归"></a>6. LASSO 回归</h4><p>和岭回归类似，但正则项使用的是 L1 范数。但绝对值就意味着不可导，不好优化。</p>
<p>$loss = l(w, b) + λ||W||,\quad\quad ||W|| = \sum |W|$</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LassoRegression</span>(<span class="params">degree,alpha</span>):</span></span><br><span class="line">    pipeline = Pipeline([</span><br><span class="line">        (<span class="string">"poly"</span>,PolynomialFeatures(degree = degree)),</span><br><span class="line">        (<span class="string">"std_scaler"</span>,StandardScaler()),</span><br><span class="line">        (<span class="string">"lasso_reg"</span>,Lasso(alpha=alpha))</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure>
<p>alpha = 0</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlPne.png" alt=""></p>
<p>alpha = 0.1</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlEtI.png" alt=""></p>
<p>alpha = 1</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5Ulm1f.png" alt=""></p>
<p>alpha = 10</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlMng.png" alt=""></p>
<p>通过对比，可以发现一个比较有意思的事情。Ridge 回归在增大 alpha 时，曲线还是<code>弯曲的</code>，但没那么陡峭，因为权重都比较小。而 LASSO 回归在增大 alpha 时，并没有那么多弯曲的地方，因此它的权重大部分都是0。</p>
<p>至于为什么会这样呢？这也和他们正则化项的式子有关。</p>
<h4 id="7-Ridge-和-LASSO-区别"><a href="#7-Ridge-和-LASSO-区别" class="headerlink" title="7. Ridge 和 LASSO 区别"></a>7. Ridge 和 LASSO 区别</h4><p><strong>Ridge 回归</strong> 的梯度是会随着离极值点越近而渐渐<code>变小</code>的，因此所有的参数是同步在更新，从图像上来看就是沿着梯度慢慢想极值点靠拢，因此不会有很多权重被设为0。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5UlxEj.png" alt=""></p>
<p><strong>LASSO 回归</strong> 的梯度是一个定值，只能由 η 来控制大小，这样就会造成部分权重会早早停在零点，这可以起到一定的特征筛选的作用，虽然也有可能将有用的特征也筛选掉。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5U3pee.png" alt=""></p>
<h4 id="8-弹性网络"><a href="#8-弹性网络" class="headerlink" title="8. 弹性网络"></a>8. 弹性网络</h4><p>顾名思义，是个弹性(折中)的网络，它结合岭回归和 LASSO 回归的思想。</p>
<p>$loss = l(w, b) + γλ||W|| + \frac{(1-γ)}{2}λ||W||^2,\quad\quad γ∈[0,1]$</p>
<p>γ 代表一种比率，取值为 0% ~ 100%，当γ = 0时，该弹性网络为岭回归；当γ = 1时，该弹性网络为 LASSO 回归。</p>
<h2 id="二、丢弃法"><a href="#二、丢弃法" class="headerlink" title="二、丢弃法"></a>二、丢弃法</h2><p>丢弃法，又称 <strong>DropOut</strong>，具体做法是在每一层输出后，随机将一定量的输出置为0。那么这么做的目的是为什么呢？</p>
<p>一个好的模型需要对输入数据的扰动<strong>鲁棒</strong>。</p>
<ul>
<li>使用有噪音的数据等价于正则化。</li>
<li>丢弃法则是在层之间加入噪音，同时也降低了模型的容量。</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/10/18/5admbq.png" alt=""></p>
<p>诶，那么这时有人要问了，你这随机置为0，对x的期望都变掉了。为了防止这样的情况，我们不单单是对数据置0，对另一部分的数据也要改动，保证期望不变。</p>
<p>注：p 是一个概率值，将神经元置为0的比率，$p∈[0,1]$。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5awNlQ.png" alt=""></p>
<script type="math/tex; mode=display">
Ex_i' = p * X_i * 0 + (1-p) \frac{x_i}{1-p} = x_i</script><p>左边没有 Dropout，右边有 Dropout。</p>
<p><img src="https://z3.ax1x.com/2021/10/18/5a0N4K.png" alt=""></p>
<p><strong>总结</strong></p>
<ul>
<li>丢弃法将一些输出项随机置0来控制模型复杂度。</li>
<li>常作用在多层感知机的隐藏层输出上。</li>
<li>丢弃概率是控制模型复杂度的超参数。</li>
</ul>
]]></content>
      <categories>
        <category>Deep Learning</category>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/10/08/Spring/</url>
    <content><![CDATA[<h2 id="1、-Spring"><a href="#1、-Spring" class="headerlink" title="1、 Spring"></a>1、 Spring</h2><h4 id="1-1、-简介"><a href="#1-1、-简介" class="headerlink" title="1.1、 简介"></a>1.1、 简介</h4><ul>
<li>Spring：春天 ——&gt; 给软件行业带来了春天！</li>
<li>2002年，首次推出了 <code>Spring</code> 框架的雏形：interface21 框架！</li>
<li><code>Spring</code> 框架即以 interface21 框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日，发布了1.0正式版。</li>
<li><strong>Rod Johnson</strong>，Spring Framework 创始人，著名作家，还是悉尼大学的音乐学博士。</li>
<li>spring理念：使现有的技术更加容易使用，本身是个大杂烩，整合了现有的技术框架！</li>
</ul>
<ul>
<li>SSH：Struts2 + Spring + Hibernate</li>
<li>SSM：SpringMvc + Spring + Mybatis</li>
</ul>
<p>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></p>
<p>GitHub：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p>
<p>maven 依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h4><ul>
<li>Spring 是一个开源免费的框架（容器）！</li>
<li>Spring 是一个轻量级的、<code>非入侵式</code>的框架！</li>
<li>控制反转（<code>IOC</code>），面向切面编程（<code>AOP</code>）！</li>
<li>支持事务的处理，对框架整合的支持！</li>
</ul>
<p><code>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</code></p>
<h4 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h4><p><img src="https://z3.ax1x.com/2021/10/08/5PkD2Q.png" alt=""></p>
<h4 id="1-4、-拓展"><a href="#1-4、-拓展" class="headerlink" title="1.4、 拓展"></a>1.4、 拓展</h4><p>现代化的 Java 开发，说白就是基于 Spring 的开发！</p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PAVJS.png" alt=""></p>
<ul>
<li>Spring Boot<ul>
<li>一个<code>快速开发</code>的脚手架。</li>
<li>基于 SpringBoot 可以快速地开发单个微服务。</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud 是基于 SpringBoot 实现的。</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用 SpringBoot 进行快速开发，学习 SpringBoot 的前提，需要完全掌握 Spring 及 SpringMVC！起到承上启下的作用！</p>
<p>Spring弊端：发展了太久以后，违背了原来的理念！配置十分繁琐，人称<code>配置地狱</code>！</p>
<h2 id="2、-IOC理论推导"><a href="#2、-IOC理论推导" class="headerlink" title="2、 IOC理论推导"></a>2、 IOC理论推导</h2><h4 id="2-1、MVC三层架构"><a href="#2-1、MVC三层架构" class="headerlink" title="2.1、MVC三层架构"></a>2.1、MVC三层架构</h4><p>MVC （模型视图控制器）即 Model、View 和 Controller。</p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PZaLj.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/08/5PHLBd.png" alt=""></p>
<p>Model</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起路由请求（a，img，form…）</li>
</ul>
<p>Controller</p>
<ul>
<li>接受用户请求，request：请求参数、Session信息…</li>
<li>交给业务层处理请求</li>
<li>控制视图跳转</li>
</ul>
<p>例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">登录---&gt;接受用户的登录请求---&gt;处理用户的请求（获取用户登录的参数：username，password）---&gt;交给业务层处理登录业务（判断用户名账号密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确---&gt;数据库</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2、实例"><a href="#2-2、实例" class="headerlink" title="2.2、实例"></a>2.2、实例</h4><ol>
<li><p>UserDao 接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserDaoImpl 实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"默认获取用户的数据！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserService 业务接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>UserServiceImpl 业务实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>MyTest 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 用户实际调用的是业务层，Dao层他们不需要接触</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Console 结果正常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">默认获取用户的数据！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>如果这时我们需要添加业务呢？</p>
<ol>
<li><p>新增 Dao 实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Mysql获取用户的数据！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>修改业务实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMysqlImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>Console 结果正常</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Mysql获取用户的数据！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>但每新增一个业务操作，我们就要去更改我们业务类吗？如果程序代码量十分庞大，修改一次的成本代价将十分昂贵，这显然不可能。</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ASIN8.png" alt=""></p>
<p>为此我们需要 <code>set</code>注入。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>{</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        userDao.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 用户实际调用的是业务层，Dao层他们不需要接触</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.setUserDao(<span class="keyword">new</span> UserDaoMysqlImpl());</span><br><span class="line">        userService.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>之前，程序是<code>主动</code>创建对象！控制权在程序员手上！</li>
<li>现在，使用了 set 注入后，程序不再具有主动性，而是变成了<code>被动</code>的接收对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注在业务的是线上！这就是IOC的原型！</p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ASH3Q.png" alt=""></p>
<p><img src="https://z3.ax1x.com/2021/10/10/5ApAD1.png" alt=""></p>
<h4 id="2-3、IOC本质"><a href="#2-3、IOC本质" class="headerlink" title="2.3、IOC本质"></a>2.3、IOC本质</h4><p><strong>控制翻转Ioc(Inversion of Control)，是一种设计思想，DI (依赖注入)是一种实现Ioc的一种方法</strong>。在没有Ioc的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制翻转后将对象的创建转移给第三方，个人认为所谓控制反转就是<strong>获得依赖对象的方式反转了</strong>。</p>
<p>采用 XML 方式配置 Bean 的时候，Bean 的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean 的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p>
<p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在 Spring 中实现的控制反转的是 Ioc 容器，其实现方式是依赖注入（Dependency Injection，DI）</strong></p>
<h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"余千禧"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>打印结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Hello{name=<span class="string">'余千禧'</span>}</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上述代码中，自始至终我都没有使用 <code>new</code> 来创建 Hello 对象，对象创建和属性赋值全权交由 IOC 容器解决，它使得程序从原本<code>主动</code>的编程转变为<code>被动</code>的接受。</p>
<p><strong>至目前为止，我们已经彻底不用再到程序中去改动了，要实现不同的操作，只需要在 xml 配置文件中进行修改，所谓 IOC，即对象由 Spring 创建、管理和装配！</strong></p>
<h2 id="jump">4、IOC创建对象的方式</h2>

<p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String id, <span class="keyword">int</span> score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        System.out.println(<span class="string">"User类已被有参构造方法创建！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"User类已被无参构造方法创建！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-1、使用无参构造方法创建对象（默认）"><a href="#4-1、使用无参构造方法创建对象（默认）" class="headerlink" title="4.1、使用无参构造方法创建对象（默认）"></a>4.1、使用无参构造方法创建对象（默认）</h4>   <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2、-使用有参构造方法创建对象"><a href="#4-2、-使用有参构造方法创建对象" class="headerlink" title="4.2、 使用有参构造方法创建对象"></a>4.2、 使用有参构造方法创建对象</h4><p>(1) 根据参数名赋值</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"User"</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"id"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">"yqx"</span>/&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">"score"</span> value=<span class="string">"10"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>(2) 根据参数下标赋值</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"ysy"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>(3) 根据参数类型赋值（相同则按顺序赋值）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"mc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>注：在默认情况下，只要注册在 beans.xml 中，则无论是否调用 getBean 来获取对象都会在读取配置文件的时候创建好对象，因此返回的都是这个事先被创建好的对象</code></p>
<p>此处还没运行到 <code>getBean</code> 时，就已经打印了创建对象的语句。</p>
<p><img src="https://z3.ax1x.com/2021/10/11/5VEsCn.png" alt=""></p>
<p>可以看到 user1 和 user2 是同一个对象。</p>
<p><img src="https://z3.ax1x.com/2021/10/11/5VV2RI.png" alt=""></p>
<h2 id="5、Spring-配置"><a href="#5、Spring-配置" class="headerlink" title="5、Spring 配置"></a>5、Spring 配置</h2><h4 id="5-1、bean-的配置"><a href="#5-1、bean-的配置" class="headerlink" title="5.1、bean 的配置"></a>5.1、bean 的配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	id: bean 的唯一标识</span></span><br><span class="line"><span class="comment">	class: bean 对象所对应的全限定名(包名 + 类型)</span></span><br><span class="line"><span class="comment">	name: 别名，但不唯一，可以用符号分隔</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">name</span>=<span class="string">"u1,u2 u3;u4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"mc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-2、别名"><a href="#5-2、别名" class="headerlink" title="5.2、别名"></a>5.2、别名</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	和 name 功能一致，可以给别名再取别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"u5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"u5"</span> <span class="attr">alias</span>=<span class="string">"u6"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h4><p><code>import</code> 一般用于团队开发使用，可以将多个配置文件导入合并成一个</p>
<p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的 bean 中，我们可以用 <code>import</code> 将所有人的 beans.xml 合并成一个！</p>
<ul>
<li>beans1.xml</li>
<li>beans2.xml</li>
<li>beans3.xml</li>
<li>applicaionContext.xml</li>
</ul>
<p>applicationContext.xml 作为汇总的配置文件只需要在其中导入其它配置文件即可。</p>
<p>注：有多个重复的 bean 时，会合并一个。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans1.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans2.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans3.xml"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用的时候直接使用总的配置文件就行。</p>
<h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h4 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h4><p>详情查看<a href="#jump">IOC 创建对象的方式</a></p>
<h4 id="6-2、Set方式注入-【重点】"><a href="#6-2、Set方式注入-【重点】" class="headerlink" title="6.2、Set方式注入 【重点】"></a>6.2、Set方式注入 【重点】</h4><ul>
<li>依赖注入：Set 注入！<ul>
<li>依赖：bean 对象的创建依赖于容器！</li>
<li>注入：bean 对象中的所有属性由容器来注入！</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>宝山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yqx"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>逛B站<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>风来之国<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>以撒的结合<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>杀戮尖塔<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--array--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>高等数学<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>线性代数<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>概率论<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Sun"</span> <span class="attr">value</span>=<span class="string">"太阳"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Star"</span> <span class="attr">value</span>=<span class="string">"星星"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"The Hanged Man"</span> <span class="attr">value</span>=<span class="string">"倒吊人"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"height"</span>&gt;</span>175<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"weight"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student{</span><br><span class="line">    name=<span class="string">'yqx'</span>, </span><br><span class="line">    address=Address{address=<span class="string">'宝山'</span>}, </span><br><span class="line">    age=<span class="number">20</span>, </span><br><span class="line">    books=[高等数学, 线性代数, 概率论], </span><br><span class="line">    hobbies=[唱歌, 跳舞, 逛B站], </span><br><span class="line">    card={The Sun=太阳, The Star=星星, The Hanged Man=倒吊人}, </span><br><span class="line">    games=[风来之国, 以撒的结合, 杀戮尖塔], </span><br><span class="line">    wife=<span class="string">'null'</span>, </span><br><span class="line">    info={height=<span class="number">175</span>, weight=<span class="number">60</span>}}</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h4><p>p (parameter) 命名空间，即 <code>set</code> 方式注入。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--以下两种方式等价--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">p:name</span>=<span class="string">"yqx"</span> <span class="attr">p:age</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"yqx"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>c (constructor) 命名空间，即<code>构造器</code>注入。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">c:name</span>=<span class="string">"deflory"</span> <span class="attr">c:age</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"use2"</span> <span class="attr">class</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>命名空间注入简化了配置文件的代码，但需要显示声明命名空间。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">xmlns:c="http://www.springframework.org/schema/c"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-4、Bean-的作用域"><a href="#6-4、Bean-的作用域" class="headerlink" title="6.4、Bean 的作用域"></a>6.4、Bean 的作用域</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">作用域</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">singleton</td>
<td style="text-align:center">该作用域将 bean 的定义限制在每一个 IoC 容器中的一个单一实例(默认)。</td>
</tr>
<tr>
<td style="text-align:center">prototype</td>
<td style="text-align:center">该作用域将单一 bean 的定义限制在任意数量的对象实例。</td>
</tr>
<tr>
<td style="text-align:center">request</td>
<td style="text-align:center">该作用域将 bean 的定义限制为 HTTP 请求。只在 web-aware Spring ApplicationContext 的上下文中有效。</td>
</tr>
<tr>
<td style="text-align:center">session</td>
<td style="text-align:center">该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</td>
</tr>
<tr>
<td style="text-align:center">global-session</td>
<td style="text-align:center">该作用域将 bean 的定义限制为全局 HTTP 会话。只在 web-aware Spring ApplicationContext 的上下文中有效。</td>
</tr>
</tbody>
</table>
</div>
<p>singleton 单例模式（默认）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    User user1 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    System.out.println(user1 == user2);		<span class="comment">// true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>prototype 原型模式</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"deflory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    User user1 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    User user2 = context.getBean(<span class="string">"user"</span>, User.class);</span><br><span class="line">    System.out.println(user1 == user2);		<span class="comment">// false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="7、Bean-的自动装配"><a href="#7、Bean-的自动装配" class="headerlink" title="7、Bean 的自动装配"></a>7、Bean 的自动装配</h2><h4 id="7-1、ByName自动装配"><a href="#7-1、ByName自动装配" class="headerlink" title="7.1、ByName自动装配"></a>7.1、ByName自动装配</h4><p>会自动寻找与属性<code>类名</code>相同的 bean_id (首字母小写)。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"Person"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h4><p>会自动寻找与<code>属性</code>相同类型的 bean (该类型必须唯一)。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"Person"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>总结：在使用 ByName 时，需要指定和类名小写相同的 bean_id；</p>
<p>​            在使用 ByType 时，与属性同类型的 bean 必须唯一。</p>
<h4 id="7-3、使用注解实现自动装配"><a href="#7-3、使用注解实现自动装配" class="headerlink" title="7.3、使用注解实现自动装配"></a>7.3、使用注解实现自动装配</h4><p>使用前提：<code>导入约束</code>并开启<code>注解支持</code></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>@Autowired 注解</strong></p>
<p>默认使用 ByType 的方式，不行则使用 ByName。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以使用 <code>@Qualifier</code> 来指定 bean_id</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = "cat11")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>@Resource 注解 （Java 原生注解）</strong></p>
<p>默认使用 ByName 的方式，不行则使用 ByType。</p>
<p>功能更为强大，可以指定 bean_id，相当于上述两个注解的结合。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = "cat11")</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>必须指定<code>扫描</code>带有注解的包才能使用</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.pojo"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-1、属性注入"><a href="#8-1、属性注入" class="headerlink" title="8.1、属性注入"></a>8.1、属性注入</h4><ul>
<li><p>@Component 表明该类被 Spring 托管，id 为类名首字母小写。</p>
</li>
<li><p>@Value 给属性注入值。</p>
</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("yqx")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-2、注解的衍生"><a href="#8-2、注解的衍生" class="headerlink" title="8.2、注解的衍生"></a>8.2、注解的衍生</h4><ul>
<li>@Component 有几个衍生注解，在 web 开发中，会按照 mvc 三层架构分层！<ul>
<li>Dao 【@Repository】</li>
<li>Service 【@Service】</li>
<li>Controller 【@Controller】</li>
</ul>
</li>
</ul>
<p>这四个注解功能都是一样的，都是将某个类注册到 Spring 中，装配 Bean。</p>
<h4 id="8-3、作用域"><a href="#8-3、作用域" class="headerlink" title="8.3、作用域"></a>8.3、作用域</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("yqx")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-4、小结"><a href="#8-4、小结" class="headerlink" title="8.4、小结"></a>8.4、小结</h4><p>xml 与 注解：</p>
<ul>
<li>xml 更加万能，适用于任何场合！维护简单方便，只需修改配置文件。</li>
<li>注解维护繁琐，分散在各个实体类中。</li>
</ul>
<p>xml 与 注解最佳实践：</p>
<ul>
<li>xml 用来管理 bean。</li>
<li>注解只负责完成属性注入。</li>
</ul>
<h2 id="9、使用-Java-的方式配置-Spring"><a href="#9、使用-Java-的方式配置-Spring" class="headerlink" title="9、使用 Java 的方式配置 Spring"></a>9、使用 Java 的方式配置 Spring</h2><p><strong>@Configuration</strong></p>
<p>基于 Java 的配置选项，可以是你在不用配置 XML 的情况下编写大部分的 Spring。</p>
<ul>
<li>@Configuration 用于类上，表示这个类可以使用 Spring IOC 容器作为 Bean 定义的来源。</li>
<li>@Bean 用于方法上，这个方法要返回一个对象，而该对象会被注册为在 Spring 应用程序上下文中的 Bean。</li>
</ul>
<p>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Value("deflory")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Java 配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上面的 Java 配置类等同于下面的 XML 配置。</p>
<p>需要注意的是，bean_id 和 @Bean 修饰的<code>方法名</code>一致。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">class</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>注：虽然 @Bean 中是 return new User()，但默认还是<code>单例</code>模式。</p>
<p><strong>@Import</strong></p>
<p>@import 注解允许从另一个配置类中加载 @Bean 定义。</p>
<p>另一个配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigA</span> </span>{</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> A(); </span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>主配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigB</span> </span>{</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> B(); </span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">   ApplicationContext context = </span><br><span class="line">   <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigB.class);</span><br><span class="line">   A a = context.getBean(A.class);</span><br><span class="line">   B b = context.getBean(B.class);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>代理模式的分类：</p>
<ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/10/16/5JbxhQ.png" alt=""></p>
<h4 id="10-1、-静态代理"><a href="#10-1、-静态代理" class="headerlink" title="10.1、 静态代理"></a>10.1、 静态代理</h4><p>角色分析：</p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决。</li>
<li>真实角色：被代理的角色。</li>
<li>代理角色：代理真实角色，添加额外操作。</li>
<li>客户：访问代理对象的人。</li>
</ul>
<p>代码：</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>真实角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>代理角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line">    Rent landlord;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Rent landlord)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.landlord = landlord;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        findRenter();</span><br><span class="line">        landlord.rent();</span><br><span class="line">        negotiation();</span><br><span class="line">        fee();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fee</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介收取中介费"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findRenter</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介寻找租客"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">negotiation</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"中介签订合同"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>客户端访问代理角色</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Rent agent = <span class="keyword">new</span> Agent(<span class="keyword">new</span> Landlord());</span><br><span class="line">        agent.rent();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
</ol>
<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务。</li>
<li>公共业务交代代理角色，实现了业务的分工。</li>
<li>公共业务发生拓展的时候，方便集中管理。</li>
</ul>
<p>缺点：</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低。</li>
</ul>
<h4 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h4><ul>
<li>动态代理和静态代理角色一样</li>
<li>动态代理的代理类是动态生成的，而非程序员手写的！</li>
<li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理。<ul>
<li>基于接口：JDK 动态代理 【下述使用】</li>
<li>基于类：cglib</li>
<li>java 字节码实现：javasist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：</p>
<ul>
<li>Proxy：代理</li>
<li>InvocationHandler：调用处理程序</li>
</ul>
<p>优点：</p>
<ul>
<li>包含静态代理的优点。</li>
<li>一个动态代理类代理的是一个接口，对应一类业务。</li>
</ul>
<h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。</p>
<h4 id="11-1、通知类型"><a href="#11-1、通知类型" class="headerlink" title="11.1、通知类型"></a>11.1、通知类型</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">通知</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">前置通知</td>
<td style="text-align:left">在一个方法执行之前，执行通知。</td>
</tr>
<tr>
<td style="text-align:left">后置通知</td>
<td style="text-align:left">在一个方法执行之后，不考虑其结果，执行通知。</td>
</tr>
<tr>
<td style="text-align:left">返回后通知</td>
<td style="text-align:left">在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td>
</tr>
<tr>
<td style="text-align:left">抛出异常后通知</td>
<td style="text-align:left">在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td>
</tr>
<tr>
<td style="text-align:left">环绕通知</td>
<td style="text-align:left">在建议方法调用之前和之后，执行通知。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="11-2、在-Spring-中使用-Aop"><a href="#11-2、在-Spring-中使用-Aop" class="headerlink" title="11.2、在 Spring 中使用 Aop"></a>11.2、在 Spring 中使用 Aop</h4><p>导入依赖包</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>添加约束</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>(1) 原生 Spring Api 接口</strong></p>
<p>xml 配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.yqx.log.Log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--方式一：使用原生的Spring API接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yqx.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>日志类，这里采用了多实现。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span>, <span class="title">AfterReturningAdvice</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(method.getName() + <span class="string">"方法执行完毕，返回值为："</span> + returnValue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"中的"</span> + method.getName() + <span class="string">"方法被调用了！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Test 测试类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yqx.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 动态代理代理的是接口，因此只能转为接口类型</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.query();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>(2) 自定义类</strong></p>
<p>日志类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myLog"</span> <span class="attr">class</span>=<span class="string">"com.yqx.log.MyLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myLog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointout"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.yqx.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointout"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointout"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>虽然方便，但无法获取类与方法的信息，功能不够强大。</p>
<p><strong>(3) 注解</strong></p>
<p>日志类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yqx.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationLog</span> </span>{</span><br><span class="line">    <span class="meta">@Before("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("execution(* com.yqx.service.UserServiceImpl.*(..))")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        System.out.println(joinPoint.getSignature());</span><br><span class="line">        System.out.println(joinPoint.getArgs());</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.yqx.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yqx.log"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>打印内容</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">环绕前</span><br><span class="line"><span class="keyword">void</span> com.yqx.service.UserService.add()</span><br><span class="line">[Ljava.lang.Object;@6c6cb480</span><br><span class="line">前置通知</span><br><span class="line">添加了一条数据</span><br><span class="line">后置通知</span><br><span class="line">环绕后</span><br><span class="line">环绕前</span><br><span class="line"><span class="keyword">void</span> com.yqx.service.UserService.query()</span><br><span class="line">[Ljava.lang.Object;@3c46e67a</span><br><span class="line">前置通知</span><br><span class="line">查询了一条数据</span><br><span class="line">后置通知</span><br><span class="line">环绕后</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
  </entry>
</search>
